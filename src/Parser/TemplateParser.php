<?php

// line 11 "src/Parser/TemplateParser.y"


namespace Smarty\Parser;

use \Smarty\Lexer\TemplateLexer as Lexer;
use \Smarty\ParseTree\Template as TemplateParseTree;
use \Smarty\Compiler\Template as TemplateCompiler;
use \Smarty\ParseTree\Code;
use \Smarty\ParseTree\Dq;
use \Smarty\ParseTree\DqContent;
use \Smarty\ParseTree\Tag;


/**
* Smarty Template Parser Class
*
* This is the template parser.
* It is generated from the TemplateParser.y file
* 
* @author Uwe Tews <uwe.tews@googlemail.com>
*/
class TemplateParser
{
// line 35 "src/Parser/TemplateParser.y"

    const ERR1 = 'Security error: Call to private object member not allowed';
    const ERR2 = 'Security error: Call to dynamic object member not allowed';

    /**
     * result status
     *
     * @var bool
     */
    public $successful = true;

    /**
     * return value
     *
     * @var mixed
     */
    public $retvalue = 0;

    /**
     * @var
     */
    public $yymajor;

    /**
     * last index of array variable
     *
     * @var mixed
     */
    public $last_index;

    /**
     * last variable name
     *
     * @var string
     */
    public $last_variable;

    /**
     * root parse tree buffer
     *
     * @var TemplateParseTree
     */
    public $root_buffer;

    /**
     * current parse tree object
     *
     * @var \Smarty\ParseTree\Base
     */
    public $current_buffer;

    /**
     * lexer object
     *
     * @var Lexer
     */
    public $lex;

    /**
     * internal error flag
     *
     * @var bool
     */
    private $internalError = false;

    /**
     * {strip} status
     *
     * @var bool
     */
    public $strip = false;
    /**
     * compiler object
     *
     * @var TemplateCompiler
     */
    public $compiler = null;

    /**
     * smarty object
     *
     * @var \Smarty\Smarty
     */
    public $smarty = null;

    /**
     * template object
     *
     * @var \Smarty\Template
     */
    public $template = null;

    /**
     * block nesting level
     *
     * @var int
     */
    public $block_nesting_level = 0;

    /**
     * security object
     *
     * @var \Smarty\Security
     */
    public $security = null;

    /**
     * template prefix array
     *
     * @var \Smarty\ParseTree\Base[]
     */
    public $template_prefix = array();

    /**
     * template prefix array
     *
     * @var \Smarty\ParseTree\Base[]
     */
    public $template_postfix = array();

    /**
     * constructor
     *
     * @param Lexer        $lex
     * @param TemplateCompiler $compiler
     */
    public function __construct(Lexer $lex, TemplateCompiler $compiler)
    {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->template = $this->compiler->getTemplate();
        $this->smarty = $this->template->getSmarty();
        $this->security = $this->smarty->security_policy ?? false;
        $this->current_buffer = $this->root_buffer = new TemplateParseTree();
    }

     /**
     * insert PHP code in current buffer
     *
     * @param string $code
     */
    public function insertPhpCode($code)
    {
        $this->current_buffer->append_subtree($this, new Tag($this, $code));
    }

    /**
     * error rundown
     *
     */
    public function errorRunDown()
    {
        while ($this->yystack !== array()) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource($this->yyTraceFILE)) {
            fclose($this->yyTraceFILE);
        }
    }

    /**
     *  merge PHP code with prefix code and return parse tree tag object
     *
     * @param string $code
     *
     * @return Tag
     */
    private function mergePrefixCode($code)
    {
        $tmp = '';
        foreach ($this->compiler->prefix_code as $preCode) {
            $tmp .= $preCode;
        }
        $this->compiler->prefix_code = array();
        $tmp .= $code;
        return new Tag($this, $this->compiler->processNocacheCode($tmp));
    }


    const TP_VERT                           =  1;
    const TP_COLON                          =  2;
    const TP_TEXT                           =  3;
    const TP_STRIPON                        =  4;
    const TP_STRIPOFF                       =  5;
    const TP_LITERALSTART                   =  6;
    const TP_LITERALEND                     =  7;
    const TP_LITERAL                        =  8;
    const TP_SIMPELOUTPUT                   =  9;
    const TP_SIMPLETAG                      = 10;
    const TP_SMARTYBLOCKCHILDPARENT         = 11;
    const TP_LDEL                           = 12;
    const TP_RDEL                           = 13;
    const TP_DOLLARID                       = 14;
    const TP_EQUAL                          = 15;
    const TP_ID                             = 16;
    const TP_PTR                            = 17;
    const TP_NSPTR                          = 18;
    const TP_LDELIF                         = 19;
    const TP_LDELFOR                        = 20;
    const TP_SEMICOLON                      = 21;
    const TP_INCDEC                         = 22;
    const TP_TO                             = 23;
    const TP_STEP                           = 24;
    const TP_LDELFOREACH                    = 25;
    const TP_SPACE                          = 26;
    const TP_AS                             = 27;
    const TP_APTR                           = 28;
    const TP_LDELSETFILTER                  = 29;
    const TP_CLOSETAG                       = 30;
    const TP_LDELSLASH                      = 31;
    const TP_ATTR                           = 32;
    const TP_INTEGER                        = 33;
    const TP_COMMA                          = 34;
    const TP_OPENP                          = 35;
    const TP_CLOSEP                         = 36;
    const TP_MATH                           = 37;
    const TP_UNIMATH                        = 38;
    const TP_ISIN                           = 39;
    const TP_QMARK                          = 40;
    const TP_NOT                            = 41;
    const TP_TYPECAST                       = 42;
    const TP_HEX                            = 43;
    const TP_DOT                            = 44;
    const TP_INSTANCEOF                     = 45;
    const TP_SINGLEQUOTESTRING              = 46;
    const TP_DOUBLECOLON                    = 47;
    const TP_NAMESPACE                      = 48;
    const TP_AT                             = 49;
    const TP_HATCH                          = 50;
    const TP_OPENB                          = 51;
    const TP_CLOSEB                         = 52;
    const TP_DOLLAR                         = 53;
    const TP_LOGOP                          = 54;
    const TP_SLOGOP                         = 55;
    const TP_TLOGOP                         = 56;
    const TP_SINGLECOND                     = 57;
    const TP_ARRAYOPEN                      = 58;
    const TP_QUOTE                          = 59;
    const TP_BACKTICK                       = 60;
    const YY_NO_ACTION = 542;
    const YY_ACCEPT_ACTION = 541;
    const YY_ERROR_ACTION = 540;

    const YY_SZ_ACTTAB = 2122;
public static $yy_action = array(
    256,  257,  258,    1,  149,  135,  321,  202,  223,  209,
      6,   55,  268,  229,  265,   18,  114,  408,   15,  267,
    224,  270,  225,  209,  217,  408,   22,  408,  266,   43,
    408,   95,   44,   45,  286,  233,  408,  244,  408,  212,
    408,   54,    4,  334,  308,  151,   58,  323,  232,    5,
     52,  256,  257,  258,    1,  265,   99,  402,   53,  245,
    298,    6,   55,  278,  229,  175,  311,  114,  161,  266,
    402,  224,  270,  225,   16,  231,  402,   22,  265,  449,
     43,  343,  310,   44,   45,  286,  233,  255,  290,  223,
    212,  449,   54,    4,  139,  308,  240,  190,  101,  102,
      5,   52,  256,  257,  258,    1,  139,  137,  276,  211,
    154,  311,    6,   55,  187,  229,  234,    3,  114,  101,
    102,  292,  224,  270,  225,  140,  231,  273,   22,  121,
     54,   43,   12,  308,   44,   45,  286,  233,  163,  290,
    277,  212,   54,   54,    4,  308,  308,   35,  265,  116,
     51,    5,   52,  256,  257,  258,    1,   19,  137,  201,
    203,  280,  165,    6,   55,  319,  229,  190,   36,  114,
    101,  102,  265,  224,  270,  225,  462,  231,  281,   22,
    313,  152,   43,  462,  141,   44,   45,  286,  233,  273,
    290,  190,  212,  367,   54,    4,  262,  308,  308,  367,
    116,  449,    5,   52,  256,  257,  258,    1,  143,  136,
    449,  211,   51,  449,    6,   55,   27,  229,  510,  242,
    114,  152,  449,  449,  224,  270,  225,  331,  231,   96,
     11,  367,  153,   43,  266,  449,   44,   45,  286,  233,
    273,  290,  209,  212,  367,   54,    4,  308,  308,  119,
    367,   28,  241,    5,   52,  256,  257,  258,    1,  100,
    137,  109,  198,   51,  108,    6,   55,   13,  229,  541,
     98,  114,  306,   14,    7,  224,  270,  225,  186,  220,
    328,   22,  266,  312,   43,  101,  102,   44,   45,  286,
    233,   34,  290,  321,  212,  223,   54,    4,  181,  308,
     46,   21,  293,  191,    5,   52,  256,  257,  258,    1,
     32,  138,  237,  211,  167,  116,    6,   55,  478,  229,
    232,  478,  114,  191,  269,  478,  224,  270,  225,  155,
    231,  266,   22,  209,  317,   43,  209,   39,   44,   45,
    286,  233,  160,  290,  264,  212,   92,   54,    4,  227,
    308,  308,  265,  154,  311,    5,   52,  256,  257,  258,
      1,   29,  137,  237,  196,  156,  144,    6,   55,   13,
    229,  191,  166,  114,  266,   14,  265,  224,  270,  225,
    297,  231,  273,   22,  142,  146,   43,  113,  121,   44,
     45,  286,  233,  162,  290,  110,  212,   93,   54,    4,
    183,  308,  308,  265,  147,   51,    5,   52,  256,  257,
    258,    1,  329,  137,  265,  211,  341,  177,    6,   55,
     17,  229,  191,  308,  114,  191,   14,  265,  224,  270,
    225,   25,  197,  309,   22,  101,  102,   43,  209,  140,
     44,   45,  286,  233,  164,  290,   12,  212,   94,   54,
      4,  272,  308,  119,  265,  308,  275,    5,   52,  256,
    257,  258,    1,  100,  139,   26,  211,  176,  311,    6,
     55,  462,  274,  191,  209,  114,  306,  180,  462,  224,
    270,  225,  184,  231,  226,   20,  368,  265,   47,  221,
    206,   44,   45,  286,  233,   31,  290,   88,  212,  368,
     54,    4,  188,  308,  254,  368,  273,  191,    5,   52,
    256,  257,  258,    1,    9,  139,  324,  211,    7,  232,
      6,   55,    9,  253,  254,  450,  114,  330,  246,   51,
    224,  270,  225,   89,  231,  344,   20,  450,  110,   43,
    327,   10,   44,   45,  286,  233,   25,  290,  335,  212,
    278,   54,    4,  117,  308,   41,   42,   40,  246,    5,
     52,  295,  222,  223,  261,  247,   91,  111,  110,  200,
    103,   87,  301,  302,  303,  304,  100,  307,  318,  282,
     25,  338,  336,  190,  289,  213,  291,  157,  296,  306,
     39,    8,  168,  295,  222,  223,  261,  172,   91,  111,
    174,  199,  103,   67,   90,   41,   42,   40,  100,  207,
    269,  282,   97,  182,  185,  158,  289,  213,  291,  159,
    296,  306,  301,  302,  303,  304,  295,  252,  223,  263,
    169,  107,  111,  170,  200,  103,   87,  295,  259,  223,
    260,  100,  107,  283,  282,  210,  120,   79,  189,  289,
    213,  291,  100,  296,  306,  282,  115,  271,  123,  279,
    289,  213,  291,  268,  296,  306,   18,  285,  232,  295,
    267,  223,  287,  209,  107,  216,  326,  210,  120,   79,
     13,  288,  150,  305,  100,  404,   14,  282,    7,   23,
     56,   36,  289,  213,  291,   57,  296,  306,  404,  243,
    171,  295,  173,  223,  404,  342,  106,  215,  326,  210,
    124,   49,  295,  122,  223,  332,  100,  107,  333,  282,
    210,  124,   74,  345,  289,  213,  291,  100,  296,  306,
    282,  268,   37,  304,   18,  289,  213,  291,  267,  296,
    306,  295,  304,  223,  304,  304,  107,  219,   13,  210,
    124,   74,  304,  304,   14,  304,  100,  304,  304,  282,
    268,  304,  304,   18,  289,  213,  291,  267,  296,  306,
    295,  304,  223,  304,  209,  107,  214,  304,  210,  120,
     79,  304,  246,  304,  268,  100,  401,   18,  282,  248,
    208,  267,  110,  289,  213,  291,  304,  296,  306,  401,
    236,  304,  295,  304,  223,  401,  304,  107,  304,  325,
    210,  124,   74,  304,  304,  304,  304,  100,  304,  304,
    282,  304,  304,  304,  228,  289,  213,  291,  304,  296,
    306,  295,  304,  223,  304,  478,  106,  218,  478,  210,
    124,   64,  478,  247,  304,  304,  100,  304,  304,  282,
    304,  304,  304,  304,  289,  213,  291,  304,  296,  306,
    322,  304,  304,  304,  304,  304,  256,  257,  258,    2,
    304,  320,  304,  304,  304,  478,    6,   55,  304,  304,
    304,  304,  114,  148,  304,  304,  224,  270,  225,  304,
    304,  304,  322,   41,   42,   40,  304,  304,  256,  257,
    258,    2,  304,  320,  304,  304,  304,  304,    6,   55,
    301,  302,  303,  304,  114,  304,  315,   30,  224,  270,
    225,  304,  304,  304,  249,  250,  251,  133,  304,  304,
    256,  257,  258,    1,  304,  304,  304,  304,  304,  304,
      6,   55,  304,  304,  304,  304,  114,  304,  316,   30,
    224,  270,  225,  295,  304,  223,  304,  304,  107,  304,
    304,  205,  118,   63,  304,  304,  304,  304,  100,  304,
    304,  282,  304,  304,  304,  304,  289,  213,  291,  304,
    296,  306,  304,  295,  304,  223,  304,  304,  107,  304,
    304,  210,  104,   86,  295,  304,  223,  304,  100,  107,
    304,  282,  210,  105,   85,  304,  289,  213,  291,  100,
    296,  306,  282,  304,  304,  304,  304,  289,  213,  291,
    304,  296,  306,  304,  304,  295,  304,  223,  304,  304,
    107,  304,  304,  210,  124,   59,  304,  304,  304,  304,
    100,  304,  304,  282,  304,  304,  304,  304,  289,  213,
    291,  304,  296,  306,  304,  295,  304,  223,  304,  304,
    107,  304,  304,  210,  124,   73,  295,  304,  223,  304,
    100,  107,  304,  282,  210,  104,   60,  304,  289,  213,
    291,  100,  296,  306,  282,  304,  304,  304,  304,  289,
    213,  291,  304,  296,  306,  304,  304,  295,  304,  223,
    304,  304,  107,  304,  304,  210,  124,   72,  304,  304,
    304,  304,  100,  304,  304,  282,  304,  304,  304,  304,
    289,  213,  291,  304,  296,  306,  304,  295,  304,  223,
    304,  304,  107,  304,  304,  210,  124,   61,  295,  304,
    223,  304,  100,  107,  304,  282,  210,  124,   62,  304,
    289,  213,  291,  100,  296,  306,  282,  304,  304,  304,
    304,  289,  213,  291,  304,  296,  306,  304,  304,  295,
    304,  223,  304,  304,  107,  304,  304,  210,  124,   75,
    304,  304,  304,  304,  100,  304,  304,  282,  304,  304,
    304,  304,  289,  213,  291,  304,  296,  306,  304,  295,
    304,  223,  304,  304,  107,  304,  304,  210,  124,   64,
    295,  304,  223,  304,  100,  107,  304,  282,  210,  124,
     71,  304,  289,  213,  291,  100,  296,  306,  282,  304,
    304,  304,  304,  289,  213,  291,  304,  296,  306,  304,
    304,  295,  304,  223,  304,  304,  107,  304,  304,  210,
    124,   76,  304,  304,  304,  304,  100,  304,  304,  282,
    304,  304,  304,  304,  289,  213,  291,  304,  296,  306,
    304,  295,  304,  223,  304,  304,  107,  304,  304,  210,
    124,   77,  295,  304,  223,  304,  100,  107,  304,  282,
    210,  124,   78,  304,  289,  213,  291,  100,  296,  306,
    282,  304,  304,  304,  304,  289,  213,  291,  304,  296,
    306,  304,  304,  295,  304,  223,  304,  304,  107,  304,
    304,  210,  124,   80,  304,  304,  304,  304,  100,  304,
    304,  282,  304,  304,  304,  304,  289,  213,  291,  304,
    296,  306,  304,  295,  304,  223,  304,  304,  107,  304,
    304,  210,  124,   65,  295,  304,  223,  304,  100,  107,
    304,  282,  210,  124,   66,  304,  289,  213,  291,  100,
    296,  306,  282,  304,  304,  304,  304,  289,  213,  291,
    304,  296,  306,  304,  304,  295,  304,  223,  304,  304,
    107,  304,  304,  204,  124,   68,  304,  304,  304,  304,
    100,  304,  304,  282,  304,  304,  304,  304,  289,  213,
    291,  304,  296,  306,  304,  295,  304,  223,  304,  304,
    107,  304,  304,  210,  124,   69,  295,  304,  223,  304,
    100,  107,  304,  282,  210,  124,   70,  304,  289,  213,
    291,  100,  296,  306,  282,  304,  304,  304,  304,  289,
    213,  291,  304,  296,  306,  304,  304,  295,  304,  223,
    304,  304,  107,  304,  304,  210,  124,   81,  304,  304,
    304,  304,  100,  304,  304,  282,  304,  304,  304,  304,
    289,  213,  291,  304,  296,  306,  304,  295,  304,  223,
    304,  304,  107,  304,  304,  210,  124,   82,  295,  304,
    223,  304,  100,  107,  304,  282,  210,  124,   83,  304,
    289,  213,  291,  100,  296,  306,  282,  304,  304,  304,
    304,  289,  213,  291,  304,  296,  306,  304,  304,  295,
    304,  223,  304,  304,  107,  304,  304,  210,  124,   84,
    304,  304,  304,  304,  100,  304,  304,  282,  304,  304,
    304,  304,  289,  213,  291,  304,  296,  306,  304,  295,
    304,  223,  304,  304,  107,  304,  304,  210,  124,   48,
    295,  304,  223,  304,  100,  107,  304,  282,  210,  124,
     50,  304,  289,  213,  291,  100,  296,  306,  282,  304,
    304,  304,  304,  289,  213,  291,  209,  296,  306,  304,
    304,  295,  304,  223,  304,  178,  107,  304,  371,  210,
    134,  304,  238,  239,  304,  265,  100,   46,   21,  293,
    304,   13,  304,  339,  289,  213,  291,   14,  296,  306,
    449,  295,  304,  223,  304,  145,  107,  304,  304,  210,
    130,  304,  449,  304,  304,  265,  100,   46,   21,  293,
    304,  304,  304,  294,  289,  213,  291,  230,  296,  306,
    304,  304,  112,  304,  478,  304,  304,  478,  304,  304,
      3,  478,  462,  462,  230,  304,  304,  284,   41,   42,
     40,  478,  304,  304,  478,  304,  304,  304,  478,  462,
    462,  304,  304,  304,  284,  301,  302,  303,  304,  462,
    304,  304,  462,  295,  478,  223,  462,  304,  107,  304,
    304,  210,  132,  304,  304,  304,  462,  304,  100,  462,
    304,  478,  230,  462,  299,  304,  289,  213,  291,  478,
    296,  306,  478,  179,  304,   35,  478,  462,  462,  304,
    304,  304,  284,  265,  304,   46,   21,  293,  304,  304,
    304,  295,  304,  223,  304,  304,  107,  304,  304,  210,
    125,  304,  304,  304,  462,  304,  100,  462,  304,  478,
    304,  462,  304,  304,  289,  213,  291,  304,  296,  306,
    304,  304,  304,  295,  304,  223,  304,  304,  107,  304,
    304,  210,  126,  304,  295,  304,  223,  304,  100,  107,
    304,  304,  210,  127,  304,  304,  289,  213,  291,  100,
    296,  306,  304,  304,  304,  304,  304,  289,  213,  291,
    304,  296,  306,  295,  304,  223,  304,  304,  107,  304,
    304,  210,  128,  304,  295,  304,  223,  304,  100,  107,
    304,  304,  210,  129,  304,  304,  289,  213,  291,  100,
    296,  306,  304,  304,  304,  304,  304,  289,  213,  291,
    230,  296,  306,  295,  304,  223,  304,  478,  107,  304,
    478,  210,  131,  304,  478,  462,  462,  304,  100,  304,
    284,   41,   42,   40,  304,  304,  289,  213,  291,  304,
    296,  306,  304,  304,  304,  304,  300,  304,  301,  302,
    303,  304,  462,  304,  304,  462,  304,  478,   24,  462,
    304,  304,   38,  304,   13,  478,  304,  304,  478,  304,
     14,  304,  478,  462,  462,   41,   42,   40,  284,  416,
    304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
    304,  304,  301,  302,  303,  304,  304,  304,  304,  304,
    462,  304,  304,  462,  304,  478,  304,  462,  304,  304,
    478,  304,  449,  478,  416,  416,  416,  478,  462,  462,
    304,  304,  304,  304,  449,  304,  304,  304,  304,  304,
     13,  416,  416,  416,  416,  304,   14,  304,  192,  304,
    304,   41,   42,   40,  304,  462,  304,  304,  462,  304,
    478,  304,  462,  337,   41,   42,   40,  304,  301,  302,
    303,  304,   41,   42,   40,  304,  193,  235,   41,   42,
     40,  301,  302,  303,  304,  314,  304,  304,  304,  301,
    302,  303,  304,  304,  304,  301,  302,  303,  304,  194,
     41,   42,   40,  304,  304,  304,  195,  304,  304,   41,
     42,   40,  304,  304,  304,  304,  304,  301,  302,  303,
    304,   33,  304,   41,   42,   40,  301,  302,  303,  304,
     41,   42,   40,  304,   41,   42,   40,  340,  304,  304,
    301,  302,  303,  304,  304,  304,  304,  301,  302,  303,
    304,  301,  302,  303,  304,  304,   41,   42,   40,  304,
    304,   41,   42,   40,  304,  304,  304,  304,  304,  304,
    304,  304,  304,  301,  302,  303,  304,  304,  301,  302,
    303,  304,
    );
    public static $yy_lookahead = array(
      9,   10,   11,   12,   73,   14,   66,   16,   68,    1,
     19,   20,    9,   22,   83,   12,   25,   13,   21,   16,
     29,   30,   31,    1,   33,   21,   35,   23,   97,   38,
     26,   34,   41,   42,   43,   44,   32,   46,   34,   48,
     36,   50,   51,   52,   53,   73,  106,  107,   44,   58,
     59,    9,   10,   11,   12,   83,   14,   13,   16,   15,
     52,   19,   20,   96,   22,   98,   99,   25,   73,   97,
     26,   29,   30,   31,   15,   33,   32,   35,   83,   35,
     38,   22,   70,   41,   42,   43,   44,   66,   46,   68,
     48,   47,   50,   51,   14,   53,   16,  102,   17,   18,
     58,   59,    9,   10,   11,   12,   14,   14,   16,   16,
     98,   99,   19,   20,   14,   22,   16,   15,   25,   17,
     18,   92,   29,   30,   31,   44,   33,   22,   35,  100,
     50,   38,   51,   53,   41,   42,   43,   44,   73,   46,
     48,   48,   50,   50,   51,   53,   53,   15,   83,   47,
     45,   58,   59,    9,   10,   11,   12,   12,   14,   14,
     16,   16,   73,   19,   20,   60,   22,  102,   15,   25,
     17,   18,   83,   29,   30,   31,   44,   33,   33,   35,
     13,   95,   38,   51,   81,   41,   42,   43,   44,   22,
     46,  102,   48,   26,   50,   51,   70,   53,   53,   32,
     47,   35,   58,   59,    9,   10,   11,   12,   14,   14,
     35,   16,   45,   47,   19,   20,   28,   22,    1,   44,
     25,   95,   47,   35,   29,   30,   31,   52,   33,   35,
     35,   13,   95,   38,   97,   47,   41,   42,   43,   44,
     22,   46,    1,   48,   26,   50,   51,   53,   53,   71,
     32,   12,   74,   58,   59,    9,   10,   11,   12,   81,
     14,   81,   16,   45,   81,   19,   20,   26,   22,   62,
     63,   25,   94,   32,   35,   29,   30,   31,   77,   33,
    100,   35,   97,  100,   38,   17,   18,   41,   42,   43,
     44,   15,   46,   66,   48,   68,   50,   51,   77,   53,
     85,   86,   87,  102,   58,   59,    9,   10,   11,   12,
     12,   14,   14,   16,   16,   47,   19,   20,    9,   22,
     44,   12,   25,  102,  103,   16,   29,   30,   31,   95,
     33,   97,   35,    1,  107,   38,    1,    2,   41,   42,
     43,   44,   73,   46,   83,   48,   77,   50,   51,   17,
     53,   53,   83,   98,   99,   58,   59,    9,   10,   11,
     12,   12,   14,   14,   16,   16,   73,   19,   20,   26,
     22,  102,   95,   25,   97,   32,   83,   29,   30,   31,
     92,   33,   22,   35,   14,   71,   38,   80,  100,   41,
     42,   43,   44,   73,   46,   81,   48,   77,   50,   51,
     77,   53,   53,   83,   73,   45,   58,   59,    9,   10,
     11,   12,   52,   14,   83,   16,   14,   73,   19,   20,
     26,   22,  102,   53,   25,  102,   32,   83,   29,   30,
     31,   34,   33,   36,   35,   17,   18,   38,    1,   44,
     41,   42,   43,   44,   73,   46,   51,   48,   77,   50,
     51,   16,   53,   71,   83,   53,   74,   58,   59,    9,
     10,   11,   12,   81,   14,   28,   16,   98,   99,   19,
     20,   44,   90,  102,    1,   25,   94,   73,   51,   29,
     30,   31,   77,   33,   49,   35,   13,   83,   38,   64,
     65,   41,   42,   43,   44,   12,   46,   81,   48,   26,
     50,   51,    6,   53,    8,   32,   22,  102,   58,   59,
      9,   10,   11,   12,   34,   14,   36,   16,   35,   44,
     19,   20,   34,    7,    8,   35,   25,   52,   71,   45,
     29,   30,   31,   81,   33,   78,   35,   47,   81,   38,
     52,   35,   41,   42,   43,   44,   34,   46,   36,   48,
     96,   50,   51,   47,   53,   37,   38,   39,   71,   58,
     59,   66,   67,   68,   69,   78,   71,   72,   81,   74,
     75,   76,   54,   55,   56,   57,   81,   99,   60,   84,
     34,   13,   36,  102,   89,   90,   91,   95,   93,   94,
      2,   35,   95,   66,   67,   68,   69,   95,   71,   72,
     95,   74,   75,   76,   95,   37,   38,   39,   81,   65,
    103,   84,   82,   82,   82,   95,   89,   90,   91,   95,
     93,   94,   54,   55,   56,   57,   66,    7,   68,   69,
     95,   71,   72,   95,   74,   75,   76,   66,   13,   68,
     13,   81,   71,   14,   84,   74,   75,   76,   16,   89,
     90,   91,   81,   93,   94,   84,   16,   16,   16,   16,
     89,   90,   91,    9,   93,   94,   12,   16,   44,   66,
     16,   68,   33,    1,   71,  104,  105,   74,   75,   76,
     26,   33,   28,   16,   81,   13,   32,   84,   35,   40,
     16,   15,   89,   90,   91,   16,   93,   94,   26,   16,
     50,   66,   50,   68,   32,   16,   71,  104,  105,   74,
     75,   76,   66,   78,   68,   52,   81,   71,   52,   84,
     74,   75,   76,   36,   89,   90,   91,   81,   93,   94,
     84,    9,   23,  108,   12,   89,   90,   91,   16,   93,
     94,   66,  108,   68,  108,  108,   71,  101,   26,   74,
     75,   76,  108,  108,   32,  108,   81,  108,  108,   84,
      9,  108,  108,   12,   89,   90,   91,   16,   93,   94,
     66,  108,   68,  108,    1,   71,  101,  108,   74,   75,
     76,  108,   71,  108,    9,   81,   13,   12,   84,   78,
     79,   16,   81,   89,   90,   91,  108,   93,   94,   26,
     49,  108,   66,  108,   68,   32,  108,   71,  108,  105,
     74,   75,   76,  108,  108,  108,  108,   81,  108,  108,
     84,  108,  108,  108,   49,   89,   90,   91,  108,   93,
     94,   66,  108,   68,  108,    9,   71,  101,   12,   74,
     75,   76,   16,   78,  108,  108,   81,  108,  108,   84,
    108,  108,  108,  108,   89,   90,   91,  108,   93,   94,
      3,  108,  108,  108,  108,  108,    9,   10,   11,   12,
    108,   14,  108,  108,  108,   49,   19,   20,  108,  108,
    108,  108,   25,   27,  108,  108,   29,   30,   31,  108,
    108,  108,    3,   37,   38,   39,  108,  108,    9,   10,
     11,   12,  108,   14,  108,  108,  108,  108,   19,   20,
     54,   55,   56,   57,   25,  108,   59,   60,   29,   30,
     31,  108,  108,  108,    3,    4,    5,    6,  108,  108,
      9,   10,   11,   12,  108,  108,  108,  108,  108,  108,
     19,   20,  108,  108,  108,  108,   25,  108,   59,   60,
     29,   30,   31,   66,  108,   68,  108,  108,   71,  108,
    108,   74,   75,   76,  108,  108,  108,  108,   81,  108,
    108,   84,  108,  108,  108,  108,   89,   90,   91,  108,
     93,   94,  108,   66,  108,   68,  108,  108,   71,  108,
    108,   74,   75,   76,   66,  108,   68,  108,   81,   71,
    108,   84,   74,   75,   76,  108,   89,   90,   91,   81,
     93,   94,   84,  108,  108,  108,  108,   89,   90,   91,
    108,   93,   94,  108,  108,   66,  108,   68,  108,  108,
     71,  108,  108,   74,   75,   76,  108,  108,  108,  108,
     81,  108,  108,   84,  108,  108,  108,  108,   89,   90,
     91,  108,   93,   94,  108,   66,  108,   68,  108,  108,
     71,  108,  108,   74,   75,   76,   66,  108,   68,  108,
     81,   71,  108,   84,   74,   75,   76,  108,   89,   90,
     91,   81,   93,   94,   84,  108,  108,  108,  108,   89,
     90,   91,  108,   93,   94,  108,  108,   66,  108,   68,
    108,  108,   71,  108,  108,   74,   75,   76,  108,  108,
    108,  108,   81,  108,  108,   84,  108,  108,  108,  108,
     89,   90,   91,  108,   93,   94,  108,   66,  108,   68,
    108,  108,   71,  108,  108,   74,   75,   76,   66,  108,
     68,  108,   81,   71,  108,   84,   74,   75,   76,  108,
     89,   90,   91,   81,   93,   94,   84,  108,  108,  108,
    108,   89,   90,   91,  108,   93,   94,  108,  108,   66,
    108,   68,  108,  108,   71,  108,  108,   74,   75,   76,
    108,  108,  108,  108,   81,  108,  108,   84,  108,  108,
    108,  108,   89,   90,   91,  108,   93,   94,  108,   66,
    108,   68,  108,  108,   71,  108,  108,   74,   75,   76,
     66,  108,   68,  108,   81,   71,  108,   84,   74,   75,
     76,  108,   89,   90,   91,   81,   93,   94,   84,  108,
    108,  108,  108,   89,   90,   91,  108,   93,   94,  108,
    108,   66,  108,   68,  108,  108,   71,  108,  108,   74,
     75,   76,  108,  108,  108,  108,   81,  108,  108,   84,
    108,  108,  108,  108,   89,   90,   91,  108,   93,   94,
    108,   66,  108,   68,  108,  108,   71,  108,  108,   74,
     75,   76,   66,  108,   68,  108,   81,   71,  108,   84,
     74,   75,   76,  108,   89,   90,   91,   81,   93,   94,
     84,  108,  108,  108,  108,   89,   90,   91,  108,   93,
     94,  108,  108,   66,  108,   68,  108,  108,   71,  108,
    108,   74,   75,   76,  108,  108,  108,  108,   81,  108,
    108,   84,  108,  108,  108,  108,   89,   90,   91,  108,
     93,   94,  108,   66,  108,   68,  108,  108,   71,  108,
    108,   74,   75,   76,   66,  108,   68,  108,   81,   71,
    108,   84,   74,   75,   76,  108,   89,   90,   91,   81,
     93,   94,   84,  108,  108,  108,  108,   89,   90,   91,
    108,   93,   94,  108,  108,   66,  108,   68,  108,  108,
     71,  108,  108,   74,   75,   76,  108,  108,  108,  108,
     81,  108,  108,   84,  108,  108,  108,  108,   89,   90,
     91,  108,   93,   94,  108,   66,  108,   68,  108,  108,
     71,  108,  108,   74,   75,   76,   66,  108,   68,  108,
     81,   71,  108,   84,   74,   75,   76,  108,   89,   90,
     91,   81,   93,   94,   84,  108,  108,  108,  108,   89,
     90,   91,  108,   93,   94,  108,  108,   66,  108,   68,
    108,  108,   71,  108,  108,   74,   75,   76,  108,  108,
    108,  108,   81,  108,  108,   84,  108,  108,  108,  108,
     89,   90,   91,  108,   93,   94,  108,   66,  108,   68,
    108,  108,   71,  108,  108,   74,   75,   76,   66,  108,
     68,  108,   81,   71,  108,   84,   74,   75,   76,  108,
     89,   90,   91,   81,   93,   94,   84,  108,  108,  108,
    108,   89,   90,   91,  108,   93,   94,  108,  108,   66,
    108,   68,  108,  108,   71,  108,  108,   74,   75,   76,
    108,  108,  108,  108,   81,  108,  108,   84,  108,  108,
    108,  108,   89,   90,   91,  108,   93,   94,  108,   66,
    108,   68,  108,  108,   71,  108,  108,   74,   75,   76,
     66,  108,   68,  108,   81,   71,  108,   84,   74,   75,
     76,  108,   89,   90,   91,   81,   93,   94,   84,  108,
    108,  108,  108,   89,   90,   91,    1,   93,   94,  108,
    108,   66,  108,   68,  108,   73,   71,  108,   13,   74,
     75,  108,   17,   18,  108,   83,   81,   85,   86,   87,
    108,   26,  108,   88,   89,   90,   91,   32,   93,   94,
     35,   66,  108,   68,  108,   73,   71,  108,  108,   74,
     75,  108,   47,  108,  108,   83,   81,   85,   86,   87,
    108,  108,  108,   88,   89,   90,   91,    2,   93,   94,
    108,  108,   21,  108,    9,  108,  108,   12,  108,  108,
     15,   16,   17,   18,    2,  108,  108,   22,   37,   38,
     39,    9,  108,  108,   12,  108,  108,  108,   16,   17,
     18,  108,  108,  108,   22,   54,   55,   56,   57,   44,
    108,  108,   47,   66,   49,   68,   51,  108,   71,  108,
    108,   74,   75,  108,  108,  108,   44,  108,   81,   47,
    108,   49,    2,   51,   52,  108,   89,   90,   91,    9,
     93,   94,   12,   73,  108,   15,   16,   17,   18,  108,
    108,  108,   22,   83,  108,   85,   86,   87,  108,  108,
    108,   66,  108,   68,  108,  108,   71,  108,  108,   74,
     75,  108,  108,  108,   44,  108,   81,   47,  108,   49,
    108,   51,  108,  108,   89,   90,   91,  108,   93,   94,
    108,  108,  108,   66,  108,   68,  108,  108,   71,  108,
    108,   74,   75,  108,   66,  108,   68,  108,   81,   71,
    108,  108,   74,   75,  108,  108,   89,   90,   91,   81,
     93,   94,  108,  108,  108,  108,  108,   89,   90,   91,
    108,   93,   94,   66,  108,   68,  108,  108,   71,  108,
    108,   74,   75,  108,   66,  108,   68,  108,   81,   71,
    108,  108,   74,   75,  108,  108,   89,   90,   91,   81,
     93,   94,  108,  108,  108,  108,  108,   89,   90,   91,
      2,   93,   94,   66,  108,   68,  108,    9,   71,  108,
     12,   74,   75,  108,   16,   17,   18,  108,   81,  108,
     22,   37,   38,   39,  108,  108,   89,   90,   91,  108,
     93,   94,  108,  108,  108,  108,   52,  108,   54,   55,
     56,   57,   44,  108,  108,   47,  108,   49,    2,   51,
    108,  108,   24,  108,   26,    9,  108,  108,   12,  108,
     32,  108,   16,   17,   18,   37,   38,   39,   22,    2,
    108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
    108,  108,   54,   55,   56,   57,  108,  108,  108,  108,
     44,  108,  108,   47,  108,   49,  108,   51,  108,  108,
      9,  108,   35,   12,   37,   38,   39,   16,   17,   18,
    108,  108,  108,  108,   47,  108,  108,  108,  108,  108,
     26,   54,   55,   56,   57,  108,   32,  108,   13,  108,
    108,   37,   38,   39,  108,   44,  108,  108,   47,  108,
     49,  108,   51,   36,   37,   38,   39,  108,   54,   55,
     56,   57,   37,   38,   39,  108,   13,   36,   37,   38,
     39,   54,   55,   56,   57,   13,  108,  108,  108,   54,
     55,   56,   57,  108,  108,   54,   55,   56,   57,   13,
     37,   38,   39,  108,  108,  108,   13,  108,  108,   37,
     38,   39,  108,  108,  108,  108,  108,   54,   55,   56,
     57,    2,  108,   37,   38,   39,   54,   55,   56,   57,
     37,   38,   39,  108,   37,   38,   39,   13,  108,  108,
     54,   55,   56,   57,  108,  108,  108,   54,   55,   56,
     57,   54,   55,   56,   57,  108,   37,   38,   39,  108,
    108,   37,   38,   39,  108,  108,  108,  108,  108,  108,
    108,  108,  108,   54,   55,   56,   57,  108,   54,   55,
     56,   57,
);
    const YY_SHIFT_USE_DFLT = -10;
    const YY_SHIFT_MAX = 248;
    public static $yy_shift_ofst = array(
    -10,   42,   42,   93,  144,  144,  195,   93,   93,  144,
     93,  195,   -9,  246,   93,   93,   93,  246,   93,   93,
     93,   93,   93,  297,  348,   93,   93,   93,   93,   93,
     93,   93,   93,   93,   93,  399,   93,   93,   93,  450,
    501,  501,  501,  501,  501,  501,  501,  501, 1888, 1954,
   1954,   92,  857, 1595,   80,  194,  241,  241,  889, 1641,
    856,  568, 1967, 1844, 1981, 1975, 2003, 2012,  518, 2026,
   2033, 2059, 2064, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
   2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,  654,  722,
     81,  102,  241,  241,  241,  194,  194,  335,  921, 1655,
    751,  298,  349,  473,  672,  773,  153,  268,    3,    3,
      3,  343,  370,  343,  394,  332,  100,  100,    8,  418,
    437,  418,  343,   22,   22,   22,   22,   22,   22,   22,
     22,  217,   22,  -10,  -10, 1672, 1720, 1858, 1906, 1951,
    145,  775,  309,  132,  343,  343,   59,  343,  402,  343,
    402,  343,  395,  395,  418,  395,  239,  395,  395,  395,
    343,  343,  343,  343,  343,  343,  395,  483,  395,  395,
    395,  427,  395,  427,  395,  418,  418,  343,  343,  343,
    343,   22,  588,   22,   22,  588,   22,  556,  -10,  -10,
    -10,  -10,  -10,  -10,  -10,  -10, 1927,    4,   44,  167,
    218,  826,  175,  188,  105,  360,  496,  516,   -3,  435,
    484,  166,  490,  506,  397,  480,  488,  475,  512,  546,
    276,  620,  625,  627,  632,  640,  641,  642,  643,  629,
    651,  624,  639,  648,  653,  649,  667,  556,  674,  679,
    650,  652,  683,  663,  666,  689,  676,  687,  709,
);
    const YY_REDUCE_USE_DFLT = -70;
    const YY_REDUCE_MAX = 195;
    public static $yy_reduce_ofst = array(
    207,  495,  527,  560,  571,  603,  635,  646,  675,  704,
    736,  765,  887,  917,  928,  959,  989, 1000, 1031, 1061,
   1072, 1103, 1133, 1144, 1175, 1205, 1216, 1247, 1277, 1288,
   1319, 1349, 1360, 1391, 1421, 1432, 1463, 1493, 1504, 1535,
   1565, 1637, 1685, 1717, 1728, 1757, 1768, 1797, 1532, 1562,
   1660,  382,  -60,  269,  178,  711,  320,  371,  227,  215,
    215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
    215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
    215,  215,  215,  215,  215,  215,  215,  215,  -69,  -28,
    -33,   12,   -5,   65,   89,  457,  487,  221,   21,  126,
    137,  180,  183,  201,  201,  201,  255,  255,  234,  277,
    137,  293,  314,  331,  344,  323,   29,  288,  201,  255,
    201,  369,  404,  405,  201,  201,  201,  201,  201,  201,
    201,  201,  201,  425,  201,   86,   86,   86,   86,   86,
    103,  185,   86,   86,  261,  261,  307,  261,  416,  261,
    452,  261,  454,  454,  478,  454,  492,  454,  454,  454,
    261,  261,  261,  261,  261,  261,  454,  497,  454,  454,
    454,  502,  454,  505,  454,  478,  478,  261,  261,  261,
    261,  481,  507,  481,  481,  507,  481,  509,  544,  530,
    531,  532,  520,  524,  535,  538,
);
    public static $yyExpectedTokens = array(
         array(),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 52, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 22, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(9, 10, 11, 12, 14, 16, 19, 20, 25, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 46, 48, 50, 51, 53, 58, 59, ),
         array(24, 26, 32, 37, 38, 39, 54, 55, 56, 57, ),
         array(26, 32, 37, 38, 39, 54, 55, 56, 57, ),
         array(26, 32, 37, 38, 39, 54, 55, 56, 57, ),
         array(14, 16, 48, 50, 53, ),
         array(3, 9, 10, 11, 12, 14, 19, 20, 25, 29, 30, 31, 59, 60, ),
         array(1, 13, 17, 18, 26, 32, 35, 47, ),
         array(14, 16, 50, 53, ),
         array(14, 35, 53, ),
         array(1, 26, 32, ),
         array(1, 26, 32, ),
         array(3, 9, 10, 11, 12, 14, 19, 20, 25, 29, 30, 31, 59, 60, ),
         array(21, 37, 38, 39, 54, 55, 56, 57, ),
         array(27, 37, 38, 39, 54, 55, 56, 57, ),
         array(13, 37, 38, 39, 54, 55, 56, 57, ),
         array(36, 37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 52, 54, 55, 56, 57, ),
         array(36, 37, 38, 39, 54, 55, 56, 57, ),
         array(13, 37, 38, 39, 54, 55, 56, 57, ),
         array(13, 37, 38, 39, 54, 55, 56, 57, ),
         array(13, 37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, 60, ),
         array(13, 37, 38, 39, 54, 55, 56, 57, ),
         array(13, 37, 38, 39, 54, 55, 56, 57, ),
         array(2, 37, 38, 39, 54, 55, 56, 57, ),
         array(13, 37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(37, 38, 39, 54, 55, 56, 57, ),
         array(9, 12, 16, 26, 28, 32, ),
         array(9, 12, 16, 26, 32, ),
         array(17, 18, 44, 51, ),
         array(15, 17, 18, 47, ),
         array(1, 26, 32, ),
         array(1, 26, 32, ),
         array(1, 26, 32, ),
         array(14, 35, 53, ),
         array(14, 35, 53, ),
         array(1, 2, ),
         array(3, 4, 5, 6, 9, 10, 11, 12, 19, 20, 25, 29, 30, 31, ),
         array(2, 9, 12, 15, 16, 17, 18, 22, 44, 47, 49, 51, ),
         array(9, 12, 16, 49, ),
         array(12, 14, 16, 53, ),
         array(12, 14, 16, 53, ),
         array(1, 13, 26, 32, ),
         array(1, 13, 26, 32, ),
         array(1, 13, 26, 32, ),
         array(15, 17, 18, 47, ),
         array(17, 18, 47, ),
         array(9, 12, 16, ),
         array(9, 12, 16, ),
         array(9, 12, 16, ),
         array(26, 32, ),
         array(14, 53, ),
         array(26, 32, ),
         array(26, 32, ),
         array(1, 17, ),
         array(14, 16, ),
         array(14, 16, ),
         array(1, 52, ),
         array(17, 18, ),
         array(1, 28, ),
         array(17, 18, ),
         array(26, 32, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(),
         array(),
         array(2, 9, 12, 16, 17, 18, 22, 44, 47, 49, 51, 52, ),
         array(2, 9, 12, 15, 16, 17, 18, 22, 44, 47, 49, 51, ),
         array(2, 9, 12, 16, 17, 18, 22, 44, 47, 49, 51, ),
         array(2, 9, 12, 16, 17, 18, 22, 44, 47, 49, 51, ),
         array(9, 12, 16, 17, 18, 44, 47, 49, 51, ),
         array(12, 14, 16, 33, 53, ),
         array(9, 12, 16, 49, ),
         array(9, 12, 16, ),
         array(15, 44, 51, ),
         array(26, 32, ),
         array(26, 32, ),
         array(15, 22, ),
         array(26, 32, ),
         array(14, 53, ),
         array(26, 32, ),
         array(14, 53, ),
         array(26, 32, ),
         array(44, 51, ),
         array(44, 51, ),
         array(17, 18, ),
         array(44, 51, ),
         array(12, 35, ),
         array(44, 51, ),
         array(44, 51, ),
         array(44, 51, ),
         array(26, 32, ),
         array(26, 32, ),
         array(26, 32, ),
         array(26, 32, ),
         array(26, 32, ),
         array(26, 32, ),
         array(44, 51, ),
         array(12, 35, ),
         array(44, 51, ),
         array(44, 51, ),
         array(44, 51, ),
         array(44, 51, ),
         array(44, 51, ),
         array(44, 51, ),
         array(44, 51, ),
         array(17, 18, ),
         array(17, 18, ),
         array(26, 32, ),
         array(26, 32, ),
         array(26, 32, ),
         array(26, 32, ),
         array(1, ),
         array(2, ),
         array(1, ),
         array(1, ),
         array(2, ),
         array(1, ),
         array(35, ),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(2, 35, 37, 38, 39, 47, 54, 55, 56, 57, ),
         array(13, 21, 23, 26, 32, 34, 36, 44, ),
         array(13, 15, 26, 32, 35, 47, ),
         array(13, 22, 26, 32, 45, ),
         array(13, 22, 26, 32, 45, ),
         array(9, 12, 16, 49, ),
         array(35, 44, 47, 52, ),
         array(28, 35, 47, ),
         array(22, 45, 60, ),
         array(22, 45, 52, ),
         array(6, 8, ),
         array(7, 8, ),
         array(21, 34, ),
         array(16, 49, ),
         array(22, 45, ),
         array(35, 47, ),
         array(35, 47, ),
         array(35, 47, ),
         array(34, 36, ),
         array(34, 36, ),
         array(34, 52, ),
         array(44, 52, ),
         array(34, 36, ),
         array(34, 36, ),
         array(15, 44, ),
         array(7, ),
         array(13, ),
         array(13, ),
         array(16, ),
         array(16, ),
         array(16, ),
         array(16, ),
         array(16, ),
         array(14, ),
         array(16, ),
         array(44, ),
         array(33, ),
         array(33, ),
         array(35, ),
         array(40, ),
         array(16, ),
         array(35, ),
         array(16, ),
         array(16, ),
         array(50, ),
         array(50, ),
         array(16, ),
         array(52, ),
         array(52, ),
         array(16, ),
         array(15, ),
         array(36, ),
         array(23, ),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
);
    public static $yy_default = array(
    356,  540,  540,  540,  525,  525,  540,  502,  502,  540,
    502,  540,  540,  540,  540,  540,  540,  540,  540,  540,
    540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
    540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
    540,  540,  540,  540,  540,  540,  540,  540,  398,  377,
    398,  540,  540,  436,  540,  540,  398,  398,  540,  540,
    403,  540,  540,  540,  540,  540,  540,  369,  540,  540,
    540,  540,  540,  382,  501,  420,  424,  500,  526,  528,
    527,  425,  405,  409,  410,  400,  403,  369,  398,  398,
    515,  452,  398,  398,  398,  540,  540,  389,  346,  451,
    462,  540,  540,  412,  412,  412,  452,  452,  462,  462,
    462,  398,  540,  398,  398,  392,  540,  540,  412,  452,
    412,  512,  379,  394,  412,  418,  427,  428,  429,  419,
    423,  427,  417,  354,  509,  451,  451,  451,  451,  451,
    540,  464,  462,  478,  366,  378,  540,  381,  540,  386,
    540,  387,  459,  460,  484,  493,  462,  492,  495,  494,
    370,  372,  373,  374,  375,  376,  488,  462,  487,  490,
    489,  455,  456,  457,  458,  516,  513,  388,  384,  385,
    380,  390,  503,  393,  395,  504,  445,  462,  354,  508,
    508,  508,  462,  462,  462,  462,  436,  432,  436,  426,
    426,  463,  436,  436,  426,  426,  352,  540,  540,  540,
    426,  436,  446,  540,  540,  540,  540,  432,  540,  540,
    432,  540,  540,  540,  540,  540,  540,  540,  540,  540,
    540,  432,  434,  540,  514,  438,  540,  478,  540,  540,
    540,  540,  540,  540,  441,  540,  540,  540,  406,  347,
    348,  349,  350,  351,  353,  355,  357,  358,  359,  360,
    361,  362,  363,  365,  396,  397,  480,  481,  482,  507,
    391,  505,  506,  430,  439,  440,  449,  450,  461,  465,
    466,  467,  413,  414,  415,  416,  431,  433,  435,  437,
    441,  442,  443,  421,  422,  444,  447,  448,  475,  473,
    476,  517,  518,  519,  520,  453,  454,  486,  479,  499,
    364,  485,  496,  536,  537,  529,  530,  531,  534,  533,
    535,  538,  539,  532,  522,  524,  523,  521,  491,  474,
    472,  469,  470,  471,  477,  497,  498,  438,  468,  511,
    483,  478,  399,  383,  407,  411,
);
    const YYNOCODE = 109;
    const YYSTACKDEPTH = 500;
    const YYNSTATE = 346;
    const YYNRULE = 194;
    const YYERRORSYMBOL = 61;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    public static $yyFallback = array(
    );
    public function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        $this->yyTraceFILE = $TraceFILE;
        $this->yyTracePrompt = $zTracePrompt;
    }

    public function PrintTrace()
    {
        $this->yyTraceFILE = fopen('php://output', 'w');
        $this->yyTracePrompt = '<br>';
    }

    public $yyTraceFILE;
    public $yyTracePrompt;
    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array(
  '$',             'VERT',          'COLON',         'TEXT',        
  'STRIPON',       'STRIPOFF',      'LITERALSTART',  'LITERALEND',  
  'LITERAL',       'SIMPELOUTPUT',  'SIMPLETAG',     'SMARTYBLOCKCHILDPARENT',
  'LDEL',          'RDEL',          'DOLLARID',      'EQUAL',       
  'ID',            'PTR',           'NSPTR',         'LDELIF',      
  'LDELFOR',       'SEMICOLON',     'INCDEC',        'TO',          
  'STEP',          'LDELFOREACH',   'SPACE',         'AS',          
  'APTR',          'LDELSETFILTER',  'CLOSETAG',      'LDELSLASH',   
  'ATTR',          'INTEGER',       'COMMA',         'OPENP',       
  'CLOSEP',        'MATH',          'UNIMATH',       'ISIN',        
  'QMARK',         'NOT',           'TYPECAST',      'HEX',         
  'DOT',           'INSTANCEOF',    'SINGLEQUOTESTRING',  'DOUBLECOLON', 
  'NAMESPACE',     'AT',            'HATCH',         'OPENB',       
  'CLOSEB',        'DOLLAR',        'LOGOP',         'SLOGOP',      
  'TLOGOP',        'SINGLECOND',    'ARRAYOPEN',     'QUOTE',       
  'BACKTICK',      'error',         'start',         'template',    
  'literal_e2',    'literal_e1',    'smartytag',     'tagbody',     
  'tag',           'outattr',       'eqoutattr',     'varindexed',  
  'output',        'attributes',    'variable',      'value',       
  'expr',          'modifierlist',  'statement',     'statements',  
  'foraction',     'varvar',        'modparameters',  'attribute',   
  'ternary',       'tlop',          'lop',           'scond',       
  'array',         'function',      'ns1',           'doublequoted_with_quotes',
  'static_class_access',  'arraydef',      'object',        'arrayindex',  
  'indexdef',      'varvarele',     'objectchain',   'objectelement',
  'method',        'params',        'modifier',      'modparameter',
  'arrayelements',  'arrayelement',  'doublequoted',  'doublequotedcontent',
    );

    public static $yyRuleName = array(
  'start ::= template',
  'template ::= template TEXT',
  'template ::= template STRIPON',
  'template ::= template STRIPOFF',
  'template ::= template LITERALSTART literal_e2 LITERALEND',
  'literal_e2 ::= literal_e1 LITERALSTART literal_e1 LITERALEND',
  'literal_e2 ::= literal_e1',
  'literal_e1 ::= literal_e1 LITERAL',
  'literal_e1 ::=',
  'template ::= template smartytag',
  'template ::=',
  'smartytag ::= SIMPELOUTPUT',
  'smartytag ::= SIMPLETAG',
  'smartytag ::= SMARTYBLOCKCHILDPARENT',
  'smartytag ::= LDEL tagbody RDEL',
  'smartytag ::= tag RDEL',
  'tagbody ::= outattr',
  'tagbody ::= DOLLARID eqoutattr',
  'tagbody ::= varindexed eqoutattr',
  'eqoutattr ::= EQUAL outattr',
  'outattr ::= output attributes',
  'output ::= variable',
  'output ::= value',
  'output ::= expr',
  'tag ::= LDEL ID attributes',
  'tag ::= LDEL ID',
  'tag ::= LDEL ID modifierlist attributes',
  'tag ::= LDEL ID PTR ID attributes',
  'tag ::= LDEL ID PTR ID modifierlist attributes',
  'tag ::= LDEL ID NSPTR ID attributes',
  'tag ::= LDEL ID NSPTR ID modifierlist attributes',
  'tag ::= LDELIF expr',
  'tag ::= LDELIF expr attributes',
  'tag ::= LDELIF statement',
  'tag ::= LDELIF statement attributes',
  'tag ::= LDELFOR statements SEMICOLON expr SEMICOLON varindexed foraction attributes',
  'foraction ::= EQUAL expr',
  'foraction ::= INCDEC',
  'tag ::= LDELFOR statement TO expr attributes',
  'tag ::= LDELFOR statement TO expr STEP expr attributes',
  'tag ::= LDELFOREACH SPACE expr AS varvar attributes',
  'tag ::= LDELFOREACH SPACE expr AS varvar APTR varvar attributes',
  'tag ::= LDELFOREACH attributes',
  'tag ::= LDELSETFILTER ID modparameters',
  'tag ::= LDELSETFILTER ID modparameters modifierlist',
  'smartytag ::= CLOSETAG',
  'tag ::= LDELSLASH ID',
  'tag ::= LDELSLASH ID modifierlist',
  'tag ::= LDELSLASH ID PTR ID',
  'tag ::= LDELSLASH ID PTR ID modifierlist',
  'attributes ::= attributes attribute',
  'attributes ::= attribute',
  'attributes ::=',
  'attribute ::= SPACE ID EQUAL ID',
  'attribute ::= ATTR expr',
  'attribute ::= ATTR value',
  'attribute ::= SPACE ID',
  'attribute ::= SPACE expr',
  'attribute ::= SPACE value',
  'attribute ::= SPACE INTEGER EQUAL expr',
  'statements ::= statement',
  'statements ::= statements COMMA statement',
  'statement ::= DOLLARID EQUAL INTEGER',
  'statement ::= DOLLARID EQUAL expr',
  'statement ::= varindexed EQUAL expr',
  'statement ::= OPENP statement CLOSEP',
  'expr ::= value',
  'expr ::= ternary',
  'expr ::= INCDEC DOLLARID',
  'expr ::= DOLLARID INCDEC',
  'expr ::= DOLLARID COLON ID',
  'expr ::= expr MATH value',
  'expr ::= expr UNIMATH value',
  'expr ::= expr tlop value',
  'expr ::= expr lop expr',
  'expr ::= expr scond',
  'expr ::= expr ISIN array',
  'expr ::= expr ISIN value',
  'ternary ::= OPENP expr CLOSEP QMARK DOLLARID COLON expr',
  'ternary ::= OPENP expr CLOSEP QMARK expr COLON expr',
  'value ::= variable',
  'value ::= UNIMATH value',
  'value ::= NOT value',
  'value ::= TYPECAST value',
  'value ::= variable INCDEC',
  'value ::= HEX',
  'value ::= INTEGER',
  'value ::= INTEGER DOT INTEGER',
  'value ::= INTEGER DOT',
  'value ::= DOT INTEGER',
  'value ::= ID',
  'value ::= function',
  'value ::= OPENP expr CLOSEP',
  'value ::= variable INSTANCEOF ns1',
  'value ::= variable INSTANCEOF variable',
  'value ::= SINGLEQUOTESTRING',
  'value ::= doublequoted_with_quotes',
  'value ::= varindexed DOUBLECOLON static_class_access',
  'value ::= smartytag',
  'value ::= value modifierlist',
  'value ::= NAMESPACE',
  'value ::= arraydef',
  'value ::= ns1 DOUBLECOLON static_class_access',
  'ns1 ::= ID',
  'ns1 ::= NAMESPACE',
  'variable ::= DOLLARID',
  'variable ::= varindexed',
  'variable ::= varvar AT ID',
  'variable ::= object',
  'variable ::= HATCH ID HATCH',
  'variable ::= HATCH ID HATCH arrayindex',
  'variable ::= HATCH variable HATCH',
  'variable ::= HATCH variable HATCH arrayindex',
  'varindexed ::= DOLLARID arrayindex',
  'varindexed ::= varvar arrayindex',
  'arrayindex ::= arrayindex indexdef',
  'arrayindex ::=',
  'indexdef ::= DOT DOLLARID',
  'indexdef ::= DOT varvar',
  'indexdef ::= DOT varvar AT ID',
  'indexdef ::= DOT ID',
  'indexdef ::= DOT INTEGER',
  'indexdef ::= DOT LDEL expr RDEL',
  'indexdef ::= OPENB ID CLOSEB',
  'indexdef ::= OPENB ID DOT ID CLOSEB',
  'indexdef ::= OPENB SINGLEQUOTESTRING CLOSEB',
  'indexdef ::= OPENB INTEGER CLOSEB',
  'indexdef ::= OPENB DOLLARID CLOSEB',
  'indexdef ::= OPENB variable CLOSEB',
  'indexdef ::= OPENB value CLOSEB',
  'indexdef ::= OPENB expr CLOSEB',
  'indexdef ::= OPENB CLOSEB',
  'varvar ::= DOLLARID',
  'varvar ::= DOLLAR',
  'varvar ::= varvar varvarele',
  'varvarele ::= ID',
  'varvarele ::= SIMPELOUTPUT',
  'varvarele ::= LDEL expr RDEL',
  'object ::= varindexed objectchain',
  'objectchain ::= objectelement',
  'objectchain ::= objectchain objectelement',
  'objectelement ::= PTR ID arrayindex',
  'objectelement ::= PTR varvar arrayindex',
  'objectelement ::= PTR LDEL expr RDEL arrayindex',
  'objectelement ::= PTR ID LDEL expr RDEL arrayindex',
  'objectelement ::= PTR method',
  'objectelement ::= NSPTR ID arrayindex',
  'objectelement ::= NSPTR varvar arrayindex',
  'objectelement ::= NSPTR LDEL expr RDEL arrayindex',
  'objectelement ::= NSPTR ID LDEL expr RDEL arrayindex',
  'objectelement ::= NSPTR method',
  'function ::= ns1 OPENP params CLOSEP',
  'method ::= ID OPENP params CLOSEP',
  'method ::= DOLLARID OPENP params CLOSEP',
  'params ::= params COMMA expr',
  'params ::= expr',
  'params ::=',
  'modifierlist ::= modifierlist modifier modparameters',
  'modifierlist ::= modifier modparameters',
  'modifier ::= VERT AT ID',
  'modifier ::= VERT ID',
  'modparameters ::= modparameters modparameter',
  'modparameters ::=',
  'modparameter ::= COLON value',
  'modparameter ::= COLON UNIMATH value',
  'modparameter ::= COLON array',
  'static_class_access ::= method',
  'static_class_access ::= method objectchain',
  'static_class_access ::= ID',
  'static_class_access ::= DOLLARID arrayindex',
  'static_class_access ::= DOLLARID arrayindex objectchain',
  'lop ::= LOGOP',
  'lop ::= SLOGOP',
  'tlop ::= TLOGOP',
  'scond ::= SINGLECOND',
  'arraydef ::= OPENB arrayelements CLOSEB',
  'arraydef ::= ARRAYOPEN arrayelements CLOSEP',
  'arrayelements ::= arrayelement',
  'arrayelements ::= arrayelements COMMA arrayelement',
  'arrayelements ::=',
  'arrayelement ::= value APTR expr',
  'arrayelement ::= ID APTR expr',
  'arrayelement ::= expr',
  'doublequoted_with_quotes ::= QUOTE QUOTE',
  'doublequoted_with_quotes ::= QUOTE doublequoted QUOTE',
  'doublequoted ::= doublequoted doublequotedcontent',
  'doublequoted ::= doublequotedcontent',
  'doublequotedcontent ::= BACKTICK variable BACKTICK',
  'doublequotedcontent ::= BACKTICK expr BACKTICK',
  'doublequotedcontent ::= DOLLARID',
  'doublequotedcontent ::= LDEL variable RDEL',
  'doublequotedcontent ::= LDEL expr RDEL',
  'doublequotedcontent ::= smartytag',
  'doublequotedcontent ::= TEXT',
    );

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return 'Unknown';
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (empty($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if ($this->yyTraceFILE && $this->yyidx >= 0) {
            fwrite($this->yyTraceFILE,
                $this->yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource($this->yyTraceFILE)) {
            fclose($this->yyTraceFILE);
        }
    }

    public function yy_get_expected_tokens($token)
    {
        static $res3 = array();
        static $res4 = array();
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (isset($res3[$state][$token])) {
            if ($res3[$state][$token]) {
                return $expected;
            }
        } else {
            if ($res3[$state][$token] = in_array($token, self::$yyExpectedTokens[$state], true)) {
                return $expected;
            }
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ === 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno][1];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno][0]);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                        if (isset($res4[$nextstate][$token])) {
                            if ($res4[$nextstate][$token]) {
                                $this->yyidx = $yyidx;
                                $this->yystack = $stack;
                                return array_unique($expected);
                            }
                        } else {
                            if ($res4[$nextstate][$token] = in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                                $this->yyidx = $yyidx;
                                $this->yystack = $stack;
                                return array_unique($expected);
                            }
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = (object) ['stateno' => null, 'major' => null, 'minor' => null];
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno][0];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate === self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        static $res = array();
        static $res2 = array();
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (isset($res[$state][$token])) {
            if ($res[$state][$token]) {
                return true;
            }
        } else {
            if ($res[$state][$token] = in_array($token, self::$yyExpectedTokens[$state], true)) {
                return true;
            }
       }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ === 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno][1];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno][0]);
                    if (isset($res2[$nextstate][$token])) {
                        if ($res2[$nextstate][$token]) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return true;
                        }
                    } else {
                        if ($res2[$nextstate][$token] = (isset(self::$yyExpectedTokens[$nextstate]) && in_array($token, self::$yyExpectedTokens[$nextstate], true))) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return true;
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = (object) ['stateno' => null, 'major' => null, 'minor' => null];
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno][0];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate === self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

   public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead === self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if ($this->yyTraceFILE) {
                    fwrite($this->yyTraceFILE, $this->yyTracePrompt . 'FALLBACK ' .
                        $this->yyTokenName[$iLookAhead] . ' => ' .
                        $this->yyTokenName[$iFallback] . "\n");
                }

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i === self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead === self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if ($this->yyTraceFILE) {
                fprintf($this->yyTraceFILE, "%sStack Overflow!\n", $this->yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
// line 232 "src/Parser/TemplateParser.y"

    $this->internalError = true;
    $this->compiler->trigger_template_error('Stack overflow in template parser');

            return;
        }
        $yytos = (object) ['stateno' => null, 'major' => null, 'minor' => null];
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        $this->yystack[] = $yytos;
        if ($this->yyTraceFILE && $this->yyidx > 0) {
            fprintf($this->yyTraceFILE, "%sShift %d\n", $this->yyTracePrompt,
                $yyNewState);
            fprintf($this->yyTraceFILE, "%sStack:", $this->yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf($this->yyTraceFILE, " %s",
                    $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite($this->yyTraceFILE,"\n");
        }
    }

    public static $yyRuleInfo = array(
  array( 0 => 62, 1 => 1 ),
  array( 0 => 63, 1 => 2 ),
  array( 0 => 63, 1 => 2 ),
  array( 0 => 63, 1 => 2 ),
  array( 0 => 63, 1 => 4 ),
  array( 0 => 64, 1 => 4 ),
  array( 0 => 64, 1 => 1 ),
  array( 0 => 65, 1 => 2 ),
  array( 0 => 65, 1 => 0 ),
  array( 0 => 63, 1 => 2 ),
  array( 0 => 63, 1 => 0 ),
  array( 0 => 66, 1 => 1 ),
  array( 0 => 66, 1 => 1 ),
  array( 0 => 66, 1 => 1 ),
  array( 0 => 66, 1 => 3 ),
  array( 0 => 66, 1 => 2 ),
  array( 0 => 67, 1 => 1 ),
  array( 0 => 67, 1 => 2 ),
  array( 0 => 67, 1 => 2 ),
  array( 0 => 70, 1 => 2 ),
  array( 0 => 69, 1 => 2 ),
  array( 0 => 72, 1 => 1 ),
  array( 0 => 72, 1 => 1 ),
  array( 0 => 72, 1 => 1 ),
  array( 0 => 68, 1 => 3 ),
  array( 0 => 68, 1 => 2 ),
  array( 0 => 68, 1 => 4 ),
  array( 0 => 68, 1 => 5 ),
  array( 0 => 68, 1 => 6 ),
  array( 0 => 68, 1 => 5 ),
  array( 0 => 68, 1 => 6 ),
  array( 0 => 68, 1 => 2 ),
  array( 0 => 68, 1 => 3 ),
  array( 0 => 68, 1 => 2 ),
  array( 0 => 68, 1 => 3 ),
  array( 0 => 68, 1 => 8 ),
  array( 0 => 80, 1 => 2 ),
  array( 0 => 80, 1 => 1 ),
  array( 0 => 68, 1 => 5 ),
  array( 0 => 68, 1 => 7 ),
  array( 0 => 68, 1 => 6 ),
  array( 0 => 68, 1 => 8 ),
  array( 0 => 68, 1 => 2 ),
  array( 0 => 68, 1 => 3 ),
  array( 0 => 68, 1 => 4 ),
  array( 0 => 66, 1 => 1 ),
  array( 0 => 68, 1 => 2 ),
  array( 0 => 68, 1 => 3 ),
  array( 0 => 68, 1 => 4 ),
  array( 0 => 68, 1 => 5 ),
  array( 0 => 73, 1 => 2 ),
  array( 0 => 73, 1 => 1 ),
  array( 0 => 73, 1 => 0 ),
  array( 0 => 83, 1 => 4 ),
  array( 0 => 83, 1 => 2 ),
  array( 0 => 83, 1 => 2 ),
  array( 0 => 83, 1 => 2 ),
  array( 0 => 83, 1 => 2 ),
  array( 0 => 83, 1 => 2 ),
  array( 0 => 83, 1 => 4 ),
  array( 0 => 79, 1 => 1 ),
  array( 0 => 79, 1 => 3 ),
  array( 0 => 78, 1 => 3 ),
  array( 0 => 78, 1 => 3 ),
  array( 0 => 78, 1 => 3 ),
  array( 0 => 78, 1 => 3 ),
  array( 0 => 76, 1 => 1 ),
  array( 0 => 76, 1 => 1 ),
  array( 0 => 76, 1 => 2 ),
  array( 0 => 76, 1 => 2 ),
  array( 0 => 76, 1 => 3 ),
  array( 0 => 76, 1 => 3 ),
  array( 0 => 76, 1 => 3 ),
  array( 0 => 76, 1 => 3 ),
  array( 0 => 76, 1 => 3 ),
  array( 0 => 76, 1 => 2 ),
  array( 0 => 76, 1 => 3 ),
  array( 0 => 76, 1 => 3 ),
  array( 0 => 84, 1 => 7 ),
  array( 0 => 84, 1 => 7 ),
  array( 0 => 75, 1 => 1 ),
  array( 0 => 75, 1 => 2 ),
  array( 0 => 75, 1 => 2 ),
  array( 0 => 75, 1 => 2 ),
  array( 0 => 75, 1 => 2 ),
  array( 0 => 75, 1 => 1 ),
  array( 0 => 75, 1 => 1 ),
  array( 0 => 75, 1 => 3 ),
  array( 0 => 75, 1 => 2 ),
  array( 0 => 75, 1 => 2 ),
  array( 0 => 75, 1 => 1 ),
  array( 0 => 75, 1 => 1 ),
  array( 0 => 75, 1 => 3 ),
  array( 0 => 75, 1 => 3 ),
  array( 0 => 75, 1 => 3 ),
  array( 0 => 75, 1 => 1 ),
  array( 0 => 75, 1 => 1 ),
  array( 0 => 75, 1 => 3 ),
  array( 0 => 75, 1 => 1 ),
  array( 0 => 75, 1 => 2 ),
  array( 0 => 75, 1 => 1 ),
  array( 0 => 75, 1 => 1 ),
  array( 0 => 75, 1 => 3 ),
  array( 0 => 90, 1 => 1 ),
  array( 0 => 90, 1 => 1 ),
  array( 0 => 74, 1 => 1 ),
  array( 0 => 74, 1 => 1 ),
  array( 0 => 74, 1 => 3 ),
  array( 0 => 74, 1 => 1 ),
  array( 0 => 74, 1 => 3 ),
  array( 0 => 74, 1 => 4 ),
  array( 0 => 74, 1 => 3 ),
  array( 0 => 74, 1 => 4 ),
  array( 0 => 71, 1 => 2 ),
  array( 0 => 71, 1 => 2 ),
  array( 0 => 95, 1 => 2 ),
  array( 0 => 95, 1 => 0 ),
  array( 0 => 96, 1 => 2 ),
  array( 0 => 96, 1 => 2 ),
  array( 0 => 96, 1 => 4 ),
  array( 0 => 96, 1 => 2 ),
  array( 0 => 96, 1 => 2 ),
  array( 0 => 96, 1 => 4 ),
  array( 0 => 96, 1 => 3 ),
  array( 0 => 96, 1 => 5 ),
  array( 0 => 96, 1 => 3 ),
  array( 0 => 96, 1 => 3 ),
  array( 0 => 96, 1 => 3 ),
  array( 0 => 96, 1 => 3 ),
  array( 0 => 96, 1 => 3 ),
  array( 0 => 96, 1 => 3 ),
  array( 0 => 96, 1 => 2 ),
  array( 0 => 81, 1 => 1 ),
  array( 0 => 81, 1 => 1 ),
  array( 0 => 81, 1 => 2 ),
  array( 0 => 97, 1 => 1 ),
  array( 0 => 97, 1 => 1 ),
  array( 0 => 97, 1 => 3 ),
  array( 0 => 94, 1 => 2 ),
  array( 0 => 98, 1 => 1 ),
  array( 0 => 98, 1 => 2 ),
  array( 0 => 99, 1 => 3 ),
  array( 0 => 99, 1 => 3 ),
  array( 0 => 99, 1 => 5 ),
  array( 0 => 99, 1 => 6 ),
  array( 0 => 99, 1 => 2 ),
  array( 0 => 99, 1 => 3 ),
  array( 0 => 99, 1 => 3 ),
  array( 0 => 99, 1 => 5 ),
  array( 0 => 99, 1 => 6 ),
  array( 0 => 99, 1 => 2 ),
  array( 0 => 89, 1 => 4 ),
  array( 0 => 100, 1 => 4 ),
  array( 0 => 100, 1 => 4 ),
  array( 0 => 101, 1 => 3 ),
  array( 0 => 101, 1 => 1 ),
  array( 0 => 101, 1 => 0 ),
  array( 0 => 77, 1 => 3 ),
  array( 0 => 77, 1 => 2 ),
  array( 0 => 102, 1 => 3 ),
  array( 0 => 102, 1 => 2 ),
  array( 0 => 82, 1 => 2 ),
  array( 0 => 82, 1 => 0 ),
  array( 0 => 103, 1 => 2 ),
  array( 0 => 103, 1 => 3 ),
  array( 0 => 103, 1 => 2 ),
  array( 0 => 92, 1 => 1 ),
  array( 0 => 92, 1 => 2 ),
  array( 0 => 92, 1 => 1 ),
  array( 0 => 92, 1 => 2 ),
  array( 0 => 92, 1 => 3 ),
  array( 0 => 86, 1 => 1 ),
  array( 0 => 86, 1 => 1 ),
  array( 0 => 85, 1 => 1 ),
  array( 0 => 87, 1 => 1 ),
  array( 0 => 93, 1 => 3 ),
  array( 0 => 93, 1 => 3 ),
  array( 0 => 104, 1 => 1 ),
  array( 0 => 104, 1 => 3 ),
  array( 0 => 104, 1 => 0 ),
  array( 0 => 105, 1 => 3 ),
  array( 0 => 105, 1 => 3 ),
  array( 0 => 105, 1 => 1 ),
  array( 0 => 91, 1 => 2 ),
  array( 0 => 91, 1 => 3 ),
  array( 0 => 106, 1 => 2 ),
  array( 0 => 106, 1 => 1 ),
  array( 0 => 107, 1 => 3 ),
  array( 0 => 107, 1 => 3 ),
  array( 0 => 107, 1 => 1 ),
  array( 0 => 107, 1 => 3 ),
  array( 0 => 107, 1 => 3 ),
  array( 0 => 107, 1 => 1 ),
  array( 0 => 107, 1 => 1 ),
    );

    public static $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        21 => 6,
        22 => 6,
        23 => 6,
        37 => 6,
        57 => 6,
        58 => 6,
        66 => 6,
        67 => 6,
        80 => 6,
        85 => 6,
        86 => 6,
        91 => 6,
        95 => 6,
        96 => 6,
        100 => 6,
        101 => 6,
        103 => 6,
        108 => 6,
        177 => 6,
        182 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        11 => 11,
        12 => 12,
        13 => 13,
        14 => 14,
        15 => 15,
        16 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 20,
        24 => 24,
        25 => 25,
        26 => 26,
        27 => 27,
        29 => 27,
        28 => 28,
        30 => 28,
        31 => 31,
        32 => 32,
        34 => 32,
        33 => 33,
        35 => 35,
        36 => 36,
        38 => 38,
        39 => 39,
        40 => 40,
        41 => 41,
        42 => 42,
        43 => 43,
        44 => 44,
        45 => 45,
        46 => 46,
        47 => 47,
        48 => 48,
        49 => 49,
        50 => 50,
        51 => 51,
        60 => 51,
        155 => 51,
        159 => 51,
        163 => 51,
        165 => 51,
        52 => 52,
        156 => 52,
        162 => 52,
        53 => 53,
        54 => 54,
        55 => 54,
        56 => 56,
        135 => 56,
        59 => 59,
        61 => 61,
        62 => 62,
        63 => 62,
        64 => 64,
        65 => 65,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 71,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        81 => 81,
        83 => 81,
        84 => 81,
        115 => 81,
        82 => 82,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        92 => 92,
        93 => 93,
        94 => 93,
        97 => 97,
        98 => 98,
        99 => 99,
        102 => 102,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        116 => 116,
        179 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        130 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 125,
        128 => 125,
        129 => 125,
        127 => 127,
        131 => 131,
        132 => 132,
        133 => 133,
        183 => 133,
        134 => 134,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        154 => 154,
        157 => 157,
        158 => 158,
        160 => 160,
        161 => 161,
        164 => 164,
        166 => 166,
        167 => 167,
        168 => 168,
        169 => 169,
        170 => 170,
        171 => 171,
        172 => 172,
        173 => 173,
        174 => 174,
        175 => 175,
        176 => 175,
        178 => 178,
        180 => 180,
        181 => 181,
        184 => 184,
        185 => 185,
        186 => 186,
        187 => 187,
        190 => 187,
        188 => 188,
        191 => 188,
        189 => 189,
        192 => 192,
        193 => 193,
    );
// line 245 "src/Parser/TemplateParser.y"
    public function yy_r0(){
    $this->root_buffer->prepend_array($this, $this->template_prefix);
    $this->root_buffer->append_array($this, $this->template_postfix);
    $this->_retvalue = $this->root_buffer->to_smarty_php($this);
    }
// line 252 "src/Parser/TemplateParser.y"
    public function yy_r1(){
         $text = $this->yystack[ $this->yyidx + 0 ]->minor;

         if ((string)$text == '') {
            $this->current_buffer->append_subtree($this, null);
         }

         $this->current_buffer->append_subtree($this, new \Smarty\ParseTree\Text($text, $this->strip));
    }
// line 262 "src/Parser/TemplateParser.y"
    public function yy_r2(){
    $this->strip = true;
    }
// line 266 "src/Parser/TemplateParser.y"
    public function yy_r3(){
    $this->strip = false;
    }
// line 271 "src/Parser/TemplateParser.y"
    public function yy_r4(){
       $this->current_buffer->append_subtree($this, new \Smarty\ParseTree\Text($this->yystack[$this->yyidx + -1]->minor));
    }
// line 276 "src/Parser/TemplateParser.y"
    public function yy_r5(){
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor.$this->yystack[$this->yyidx + -1]->minor;
    }
// line 279 "src/Parser/TemplateParser.y"
    public function yy_r6(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
// line 283 "src/Parser/TemplateParser.y"
    public function yy_r7(){
        $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;

    }
// line 288 "src/Parser/TemplateParser.y"
    public function yy_r8(){
    $this->_retvalue = '';
    }
// line 292 "src/Parser/TemplateParser.y"
    public function yy_r9(){
      if ($this->compiler->has_code) {
          $this->current_buffer->append_subtree($this, $this->mergePrefixCode($this->yystack[$this->yyidx + 0]->minor));
      }
     $this->compiler->has_variable_string = false;
     $this->block_nesting_level = $this->compiler->getTagStackCount();
    }
// line 304 "src/Parser/TemplateParser.y"
    public function yy_r11(){
    $var = trim(substr($this->yystack[$this->yyidx + 0]->minor, $this->compiler->getLdelLength(), -$this->compiler->getRdelLength()), ' $');
    $attributes = [];
    if (preg_match('/^(.*)(\s+nocache)$/', $var, $match)) {
        $attributes[] = 'nocache';
        $var = $match[1];
    }
    $this->_retvalue = $this->compiler->compilePrintExpression($this->compiler->compileVariable('\''.$var.'\''), $attributes);
    }
// line 315 "src/Parser/TemplateParser.y"
    public function yy_r12(){
    $tag = trim(substr($this->yystack[$this->yyidx + 0]->minor, $this->compiler->getLdelLength(), -$this->compiler->getRdelLength()));
    if ($tag == 'strip') {
        $this->strip = true;
        $this->_retvalue = null;
    } else {
        if (defined($tag)) {
            if ($this->security) {
               $this->security->isTrustedConstant($tag, $this->compiler);
            }
            $this->_retvalue = $this->compiler->compilePrintExpression($tag);
        } else {
            if (preg_match('/^(.*)(\s+nocache)$/', $tag, $match)) {
                $this->_retvalue = $this->compiler->compileTag($match[1],array('\'nocache\''));
            } else {
                $this->_retvalue = $this->compiler->compileTag($tag,array());
            }
        }
    }
    }
// line 336 "src/Parser/TemplateParser.y"
    public function yy_r13(){
    $j = strrpos($this->yystack[$this->yyidx + 0]->minor,'.');
    if ($this->yystack[$this->yyidx + 0]->minor[$j+1] == 'c') {
        // {$smarty.block.child}
        $this->_retvalue = $this->compiler->compileChildBlock();
    } else {
        // {$smarty.block.parent}
       $this->_retvalue = $this->compiler->compileParentBlock();
     }
    }
// line 347 "src/Parser/TemplateParser.y"
    public function yy_r14(){
    $this->_retvalue  = $this->yystack[$this->yyidx + -1]->minor;
    }
// line 351 "src/Parser/TemplateParser.y"
    public function yy_r15(){
     $this->_retvalue  = $this->yystack[$this->yyidx + -1]->minor;
     }
// line 355 "src/Parser/TemplateParser.y"
    public function yy_r16(){
    $this->_retvalue = $this->compiler->compilePrintExpression($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);
    }
// line 364 "src/Parser/TemplateParser.y"
    public function yy_r17(){
    $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array(array('value'=>$this->yystack[$this->yyidx + 0]->minor[0]),array('var'=>'\''.substr($this->yystack[$this->yyidx + -1]->minor,1).'\'')),$this->yystack[$this->yyidx + 0]->minor[1]));
    }
// line 368 "src/Parser/TemplateParser.y"
    public function yy_r18(){
    $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array(array('value'=>$this->yystack[$this->yyidx + 0]->minor[0]),array('var'=>$this->yystack[$this->yyidx + -1]->minor['var'])),$this->yystack[$this->yyidx + 0]->minor[1]),array('smarty_internal_index'=>$this->yystack[$this->yyidx + -1]->minor['smarty_internal_index']));
    }
// line 372 "src/Parser/TemplateParser.y"
    public function yy_r19(){
       $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
// line 376 "src/Parser/TemplateParser.y"
    public function yy_r20(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
// line 391 "src/Parser/TemplateParser.y"
    public function yy_r24(){
        if (defined($this->yystack[$this->yyidx + -1]->minor)) {
            if ($this->security) {
                $this->security->isTrustedConstant($this->yystack[$this->yyidx + -1]->minor, $this->compiler);
            }
            $this->_retvalue = $this->compiler->compilePrintExpression($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
        } else {
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
        }
    }
// line 401 "src/Parser/TemplateParser.y"
    public function yy_r25(){
        if (defined($this->yystack[$this->yyidx + 0]->minor)) {
            if ($this->security) {
                $this->security->isTrustedConstant($this->yystack[$this->yyidx + 0]->minor, $this->compiler);
            }
            $this->_retvalue = $this->compiler->compilePrintExpression($this->yystack[$this->yyidx + 0]->minor);
        } else {
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor,array());
        }
    }
// line 414 "src/Parser/TemplateParser.y"
    public function yy_r26(){
        if (defined($this->yystack[$this->yyidx + -2]->minor)) {
            if ($this->security) {
                $this->security->isTrustedConstant($this->yystack[$this->yyidx + -2]->minor, $this->compiler);
            }
            $this->_retvalue = $this->compiler->compilePrintExpression($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -1]->minor);
        } else {
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor, array('modifierlist'=>$this->yystack[$this->yyidx + -1]->minor));
        }
    }
// line 426 "src/Parser/TemplateParser.y"
    public function yy_r27(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + 0]->minor,array('object_method'=>$this->yystack[$this->yyidx + -1]->minor));
    }
// line 431 "src/Parser/TemplateParser.y"
    public function yy_r28(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + 0]->minor,array('modifierlist'=>$this->yystack[$this->yyidx + -1]->minor, 'object_method'=>$this->yystack[$this->yyidx + -2]->minor));
    }
// line 446 "src/Parser/TemplateParser.y"
    public function yy_r31(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor,$this->compiler->getLdelLength())); 
    $this->_retvalue = $this->compiler->compileTag(($tag === 'else if')? 'elseif' : $tag,array(),array('if condition'=>$this->yystack[$this->yyidx + 0]->minor));
    }
// line 451 "src/Parser/TemplateParser.y"
    public function yy_r32(){
    $tag = trim(substr($this->yystack[$this->yyidx + -2]->minor,$this->compiler->getLdelLength()));
    $this->_retvalue = $this->compiler->compileTag(($tag === 'else if')? 'elseif' : $tag,$this->yystack[$this->yyidx + 0]->minor,array('if condition'=>$this->yystack[$this->yyidx + -1]->minor));
    }
// line 456 "src/Parser/TemplateParser.y"
    public function yy_r33(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor,$this->compiler->getLdelLength()));
    $this->_retvalue = $this->compiler->compileTag(($tag === 'else if')? 'elseif' : $tag,array(),array('if condition'=>$this->yystack[$this->yyidx + 0]->minor));
    }
// line 467 "src/Parser/TemplateParser.y"
    public function yy_r35(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -6]->minor),array('ifexp'=>$this->yystack[$this->yyidx + -4]->minor),array('var'=>$this->yystack[$this->yyidx + -2]->minor),array('step'=>$this->yystack[$this->yyidx + -1]->minor))),1);
    }
// line 471 "src/Parser/TemplateParser.y"
    public function yy_r36(){
    $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 479 "src/Parser/TemplateParser.y"
    public function yy_r38(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -3]->minor),array('to'=>$this->yystack[$this->yyidx + -1]->minor))),0);
    }
// line 483 "src/Parser/TemplateParser.y"
    public function yy_r39(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -5]->minor),array('to'=>$this->yystack[$this->yyidx + -3]->minor),array('step'=>$this->yystack[$this->yyidx + -1]->minor))),0);
    }
// line 488 "src/Parser/TemplateParser.y"
    public function yy_r40(){
    $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('from'=>$this->yystack[$this->yyidx + -3]->minor),array('item'=>$this->yystack[$this->yyidx + -1]->minor))));
    }
// line 492 "src/Parser/TemplateParser.y"
    public function yy_r41(){
    $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('from'=>$this->yystack[$this->yyidx + -5]->minor),array('item'=>$this->yystack[$this->yyidx + -1]->minor),array('key'=>$this->yystack[$this->yyidx + -3]->minor))));
    }
// line 495 "src/Parser/TemplateParser.y"
    public function yy_r42(){
    $this->_retvalue = $this->compiler->compileTag('foreach',$this->yystack[$this->yyidx + 0]->minor);
    }
// line 500 "src/Parser/TemplateParser.y"
    public function yy_r43(){
    $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array(array_merge(array($this->yystack[$this->yyidx + -1]->minor),$this->yystack[$this->yyidx + 0]->minor))));
    }
// line 504 "src/Parser/TemplateParser.y"
    public function yy_r44(){
    $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array_merge(array(array_merge(array($this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor)),$this->yystack[$this->yyidx + 0]->minor)));
    }
// line 510 "src/Parser/TemplateParser.y"
    public function yy_r45(){
    $tag = trim(substr($this->yystack[$this->yyidx + 0]->minor, $this->compiler->getLdelLength(), -$this->compiler->getRdelLength()), ' /');
    if ($tag === 'strip') {
        $this->strip = false;
        $this->_retvalue = null;
    } else {
       $this->_retvalue = $this->compiler->compileTag($tag.'close',array());
    }
     }
// line 519 "src/Parser/TemplateParser.y"
    public function yy_r46(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor.'close',array());
    }
// line 523 "src/Parser/TemplateParser.y"
    public function yy_r47(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor.'close',array(),array('modifier_list'=>$this->yystack[$this->yyidx + 0]->minor));
    }
// line 528 "src/Parser/TemplateParser.y"
    public function yy_r48(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor.'close',array(),array('object_method'=>$this->yystack[$this->yyidx + 0]->minor));
    }
// line 532 "src/Parser/TemplateParser.y"
    public function yy_r49(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor.'close',array(),array('object_method'=>$this->yystack[$this->yyidx + -1]->minor, 'modifier_list'=>$this->yystack[$this->yyidx + 0]->minor));
    }
// line 540 "src/Parser/TemplateParser.y"
    public function yy_r50(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
// line 546 "src/Parser/TemplateParser.y"
    public function yy_r51(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
// line 551 "src/Parser/TemplateParser.y"
    public function yy_r52(){
    $this->_retvalue = array();
    }
// line 556 "src/Parser/TemplateParser.y"
    public function yy_r53(){
    if (defined($this->yystack[$this->yyidx + 0]->minor)) {
        if ($this->security) {
            $this->security->isTrustedConstant($this->yystack[$this->yyidx + 0]->minor, $this->compiler);
        }
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);
    } else {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'\''.$this->yystack[$this->yyidx + 0]->minor.'\'');
    }
    }
// line 567 "src/Parser/TemplateParser.y"
    public function yy_r54(){
    $this->_retvalue = array(trim($this->yystack[$this->yyidx + -1]->minor," =\n\r\t")=>$this->yystack[$this->yyidx + 0]->minor);
    }
// line 575 "src/Parser/TemplateParser.y"
    public function yy_r56(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';
    }
// line 587 "src/Parser/TemplateParser.y"
    public function yy_r59(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);
    }
// line 600 "src/Parser/TemplateParser.y"
    public function yy_r61(){
    $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    }
// line 605 "src/Parser/TemplateParser.y"
    public function yy_r62(){
    $this->_retvalue = array('var' => '\''.substr($this->yystack[$this->yyidx + -2]->minor,1).'\'', 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
// line 612 "src/Parser/TemplateParser.y"
    public function yy_r64(){
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
// line 616 "src/Parser/TemplateParser.y"
    public function yy_r65(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
// line 636 "src/Parser/TemplateParser.y"
    public function yy_r68(){
	$this->_retvalue = '$_smarty_tpl->getVariable(\''. substr($this->yystack[$this->yyidx + 0]->minor,1) .'\')->preIncDec(\'' . $this->yystack[$this->yyidx + -1]->minor . '\')';
    }
// line 641 "src/Parser/TemplateParser.y"
    public function yy_r69(){
	$this->_retvalue = '$_smarty_tpl->getVariable(\''. substr($this->yystack[$this->yyidx + -1]->minor,1) .'\')->postIncDec(\'' . $this->yystack[$this->yyidx + 0]->minor . '\')';
    }
// line 646 "src/Parser/TemplateParser.y"
    public function yy_r70(){
    $this->_retvalue = '$_smarty_tpl->getStreamVariable(\''.substr($this->yystack[$this->yyidx + -2]->minor,1).'://' . $this->yystack[$this->yyidx + 0]->minor . '\')';
    }
// line 651 "src/Parser/TemplateParser.y"
    public function yy_r71(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor;
    }
// line 661 "src/Parser/TemplateParser.y"
    public function yy_r73(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor['pre']. $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor['op'].$this->yystack[$this->yyidx + 0]->minor .')';
    }
// line 665 "src/Parser/TemplateParser.y"
    public function yy_r74(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 669 "src/Parser/TemplateParser.y"
    public function yy_r75(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor . $this->yystack[$this->yyidx + -1]->minor . ')';
    }
// line 673 "src/Parser/TemplateParser.y"
    public function yy_r76(){
    $this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')';
    }
// line 677 "src/Parser/TemplateParser.y"
    public function yy_r77(){
    $this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')';
    }
// line 685 "src/Parser/TemplateParser.y"
    public function yy_r78(){
    $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '. $this->compiler->compileVariable('\''.substr($this->yystack[$this->yyidx + -2]->minor,1).'\'') . ' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 689 "src/Parser/TemplateParser.y"
    public function yy_r79(){
    $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 699 "src/Parser/TemplateParser.y"
    public function yy_r81(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 704 "src/Parser/TemplateParser.y"
    public function yy_r82(){
    $this->_retvalue = '!'.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 725 "src/Parser/TemplateParser.y"
    public function yy_r87(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 729 "src/Parser/TemplateParser.y"
    public function yy_r88(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.';
    }
// line 733 "src/Parser/TemplateParser.y"
    public function yy_r89(){
    $this->_retvalue = '.'.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 738 "src/Parser/TemplateParser.y"
    public function yy_r90(){
    if (defined($this->yystack[$this->yyidx + 0]->minor)) {
        if ($this->security) {
             $this->security->isTrustedConstant($this->yystack[$this->yyidx + 0]->minor, $this->compiler);
        }
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    } else {
        $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';
    }
    }
// line 755 "src/Parser/TemplateParser.y"
    public function yy_r92(){
    $this->_retvalue = '('. $this->yystack[$this->yyidx + -1]->minor .')';
    }
// line 759 "src/Parser/TemplateParser.y"
    public function yy_r93(){
      $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 777 "src/Parser/TemplateParser.y"
    public function yy_r97(){
    if ($this->security && $this->security->static_classes !== array()) {
        $this->compiler->trigger_template_error('dynamic static class not allowed by security setting');
    }
    $prefixVar = $this->compiler->getNewPrefixVariable();
    if ($this->yystack[$this->yyidx + -2]->minor['var'] === '\'smarty\'') {
        $this->compiler->appendPrefixCode("<?php {$prefixVar} = ". (new \Smarty\Compile\SpecialVariableCompiler())->compile(array(),$this->compiler,$this->yystack[$this->yyidx + -2]->minor['smarty_internal_index']).';?>');
     } else {
        $this->compiler->appendPrefixCode("<?php  {$prefixVar} = ". $this->compiler->compileVariable($this->yystack[$this->yyidx + -2]->minor['var']).$this->yystack[$this->yyidx + -2]->minor['smarty_internal_index'].';?>');
    }
    $this->_retvalue = $prefixVar .'::'.$this->yystack[$this->yyidx + 0]->minor[0].$this->yystack[$this->yyidx + 0]->minor[1];
    }
// line 791 "src/Parser/TemplateParser.y"
    public function yy_r98(){
    $prefixVar = $this->compiler->getNewPrefixVariable();
    $tmp = $this->compiler->appendCode('<?php ob_start();?>', $this->yystack[$this->yyidx + 0]->minor);
    $this->compiler->appendPrefixCode($this->compiler->appendCode($tmp, "<?php {$prefixVar} = ob_get_clean();?>"));
    $this->_retvalue = $prefixVar;
    }
// line 798 "src/Parser/TemplateParser.y"
    public function yy_r99(){
    $this->_retvalue = $this->compiler->compileModifier($this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -1]->minor);
    }
// line 811 "src/Parser/TemplateParser.y"
    public function yy_r102(){
    if (!in_array(strtolower($this->yystack[$this->yyidx + -2]->minor), array('self', 'parent')) && (!$this->security || $this->security->isTrustedStaticClassAccess($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, $this->compiler))) {
        if (isset($this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor])) {
            $this->_retvalue = $this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor].'::'.$this->yystack[$this->yyidx + 0]->minor[0].$this->yystack[$this->yyidx + 0]->minor[1];
        } else {
            $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'::'.$this->yystack[$this->yyidx + 0]->minor[0].$this->yystack[$this->yyidx + 0]->minor[1];
        } 
    } else {
        $this->compiler->trigger_template_error ('static class \''.$this->yystack[$this->yyidx + -2]->minor.'\' is undefined or not allowed by security setting');
    }
    }
// line 830 "src/Parser/TemplateParser.y"
    public function yy_r104(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
        }
// line 841 "src/Parser/TemplateParser.y"
    public function yy_r105(){
   $this->_retvalue = $this->compiler->compileVariable('\''.substr($this->yystack[$this->yyidx + 0]->minor,1).'\'');
    }
// line 844 "src/Parser/TemplateParser.y"
    public function yy_r106(){
    if ($this->yystack[$this->yyidx + 0]->minor['var'] === '\'smarty\'') {
        $smarty_var = (new \Smarty\Compile\SpecialVariableCompiler())->compile(array(),$this->compiler,$this->yystack[$this->yyidx + 0]->minor['smarty_internal_index']);
        $this->_retvalue = $smarty_var;
    } else {
        // used for array reset,next,prev,end,current 
        $this->last_variable = $this->yystack[$this->yyidx + 0]->minor['var'];
        $this->last_index = $this->yystack[$this->yyidx + 0]->minor['smarty_internal_index'];
        $this->_retvalue = $this->compiler->compileVariable($this->yystack[$this->yyidx + 0]->minor['var']).$this->yystack[$this->yyidx + 0]->minor['smarty_internal_index'];
    }
    }
// line 857 "src/Parser/TemplateParser.y"
    public function yy_r107(){
    $this->_retvalue = '$_smarty_tpl->getVariable('. $this->yystack[$this->yyidx + -2]->minor .')->'.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 867 "src/Parser/TemplateParser.y"
    public function yy_r109(){
    $this->_retvalue = $this->compiler->compileConfigVariable('\'' . $this->yystack[$this->yyidx + -1]->minor . '\'');
    }
// line 871 "src/Parser/TemplateParser.y"
    public function yy_r110(){
    $this->_retvalue = '(is_array($tmp = ' . $this->compiler->compileConfigVariable('\'' . $this->yystack[$this->yyidx + -2]->minor . '\'') . ') ? $tmp'.$this->yystack[$this->yyidx + 0]->minor.' :null)';
    }
// line 875 "src/Parser/TemplateParser.y"
    public function yy_r111(){
    $this->_retvalue = $this->compiler->compileConfigVariable($this->yystack[$this->yyidx + -1]->minor);
    }
// line 879 "src/Parser/TemplateParser.y"
    public function yy_r112(){
    $this->_retvalue = '(is_array($tmp = ' . $this->compiler->compileConfigVariable($this->yystack[$this->yyidx + -2]->minor) . ') ? $tmp'.$this->yystack[$this->yyidx + 0]->minor.' : null)';
    }
// line 883 "src/Parser/TemplateParser.y"
    public function yy_r113(){
    $this->_retvalue = array('var'=>'\''.substr($this->yystack[$this->yyidx + -1]->minor,1).'\'', 'smarty_internal_index'=>$this->yystack[$this->yyidx + 0]->minor);
    }
// line 886 "src/Parser/TemplateParser.y"
    public function yy_r114(){
    $this->_retvalue = array('var'=>$this->yystack[$this->yyidx + -1]->minor, 'smarty_internal_index'=>$this->yystack[$this->yyidx + 0]->minor);
    }
// line 899 "src/Parser/TemplateParser.y"
    public function yy_r116(){
    return;
    }
// line 905 "src/Parser/TemplateParser.y"
    public function yy_r117(){
    $this->_retvalue = '['.$this->compiler->compileVariable('\''.substr($this->yystack[$this->yyidx + 0]->minor,1).'\'').']';
    }
// line 908 "src/Parser/TemplateParser.y"
    public function yy_r118(){
    $this->_retvalue = '['.$this->compiler->compileVariable($this->yystack[$this->yyidx + 0]->minor).']';
    }
// line 912 "src/Parser/TemplateParser.y"
    public function yy_r119(){
    $this->_retvalue = '['.$this->compiler->compileVariable($this->yystack[$this->yyidx + -2]->minor).'->'.$this->yystack[$this->yyidx + 0]->minor.']';
    }
// line 916 "src/Parser/TemplateParser.y"
    public function yy_r120(){
    $this->_retvalue = '[\''. $this->yystack[$this->yyidx + 0]->minor .'\']';
    }
// line 920 "src/Parser/TemplateParser.y"
    public function yy_r121(){
    $this->_retvalue = '['. $this->yystack[$this->yyidx + 0]->minor .']';
    }
// line 925 "src/Parser/TemplateParser.y"
    public function yy_r122(){
    $this->_retvalue = '['. $this->yystack[$this->yyidx + -1]->minor .']';
    }
// line 930 "src/Parser/TemplateParser.y"
    public function yy_r123(){
    $this->_retvalue = '['.(new \Smarty\Compile\SpecialVariableCompiler())->compile(array(),$this->compiler,'[\'section\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\'][\'index\']').']';
    }
// line 934 "src/Parser/TemplateParser.y"
    public function yy_r124(){
    $this->_retvalue = '['.(new \Smarty\Compile\SpecialVariableCompiler())->compile(array(),$this->compiler,'[\'section\'][\''.$this->yystack[$this->yyidx + -3]->minor.'\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\']').']';
    }
// line 937 "src/Parser/TemplateParser.y"
    public function yy_r125(){
    $this->_retvalue = '['.$this->yystack[$this->yyidx + -1]->minor.']';
    }
// line 943 "src/Parser/TemplateParser.y"
    public function yy_r127(){
    $this->_retvalue = '['.$this->compiler->compileVariable('\''.substr($this->yystack[$this->yyidx + -1]->minor,1).'\'').']';
    }
// line 959 "src/Parser/TemplateParser.y"
    public function yy_r131(){
    $this->_retvalue = '[]';
    }
// line 969 "src/Parser/TemplateParser.y"
    public function yy_r132(){
    $this->_retvalue = '\''.substr($this->yystack[$this->yyidx + 0]->minor,1).'\'';
    }
// line 973 "src/Parser/TemplateParser.y"
    public function yy_r133(){
    $this->_retvalue = '\'\'';
    }
// line 978 "src/Parser/TemplateParser.y"
    public function yy_r134(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 986 "src/Parser/TemplateParser.y"
    public function yy_r136(){
    $var = trim(substr($this->yystack[$this->yyidx + 0]->minor, $this->compiler->getLdelLength(), -$this->compiler->getRdelLength()), ' $');
    $this->_retvalue = $this->compiler->compileVariable('\''.$var.'\'');
    }
// line 992 "src/Parser/TemplateParser.y"
    public function yy_r137(){
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
// line 999 "src/Parser/TemplateParser.y"
    public function yy_r138(){
    if ($this->yystack[$this->yyidx + -1]->minor['var'] === '\'smarty\'') {
        $this->_retvalue = (new \Smarty\Compile\SpecialVariableCompiler())->compile(array(),$this->compiler,$this->yystack[$this->yyidx + -1]->minor['smarty_internal_index']).$this->yystack[$this->yyidx + 0]->minor;
    } else {
        $this->_retvalue = $this->compiler->compileVariable($this->yystack[$this->yyidx + -1]->minor['var']).$this->yystack[$this->yyidx + -1]->minor['smarty_internal_index'].$this->yystack[$this->yyidx + 0]->minor;
    }
    }
// line 1008 "src/Parser/TemplateParser.y"
    public function yy_r139(){
    $this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
// line 1013 "src/Parser/TemplateParser.y"
    public function yy_r140(){
    $this->_retvalue  = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 1018 "src/Parser/TemplateParser.y"
    public function yy_r141(){
    if ($this->security && substr($this->yystack[$this->yyidx + -1]->minor,0,1) === '_') {
        $this->compiler->trigger_template_error (self::ERR1);
    }
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 1025 "src/Parser/TemplateParser.y"
    public function yy_r142(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::ERR2);
    }
    $this->_retvalue = '->{'.$this->compiler->compileVariable($this->yystack[$this->yyidx + -1]->minor).$this->yystack[$this->yyidx + 0]->minor.'}';
    }
// line 1032 "src/Parser/TemplateParser.y"
    public function yy_r143(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::ERR2);
    }
    $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';
    }
// line 1039 "src/Parser/TemplateParser.y"
    public function yy_r144(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::ERR2);
    }
    $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -4]->minor.'\'.'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';
    }
// line 1047 "src/Parser/TemplateParser.y"
    public function yy_r145(){
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 1052 "src/Parser/TemplateParser.y"
    public function yy_r146(){
    if ($this->security && substr($this->yystack[$this->yyidx + -1]->minor,0,1) === '_') {
        $this->compiler->trigger_template_error (self::ERR1);
    }
    $this->_retvalue = '?->'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 1059 "src/Parser/TemplateParser.y"
    public function yy_r147(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::ERR2);
    }
    $this->_retvalue = '?->{'.$this->compiler->compileVariable($this->yystack[$this->yyidx + -1]->minor).$this->yystack[$this->yyidx + 0]->minor.'}';
    }
// line 1066 "src/Parser/TemplateParser.y"
    public function yy_r148(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::ERR2);
    }
    $this->_retvalue = '?->{'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';
    }
// line 1073 "src/Parser/TemplateParser.y"
    public function yy_r149(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::ERR2);
    }
    $this->_retvalue = '?->{\''.$this->yystack[$this->yyidx + -4]->minor.'\'.'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';
    }
// line 1081 "src/Parser/TemplateParser.y"
    public function yy_r150(){
    $this->_retvalue = '?->'.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 1088 "src/Parser/TemplateParser.y"
    public function yy_r151(){
    $this->_retvalue = $this->compiler->compileFunctionCall($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor);
    }
// line 1096 "src/Parser/TemplateParser.y"
    public function yy_r152(){
    if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor,0,1) === '_') {
        $this->compiler->trigger_template_error (self::ERR1);
    }
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . '('. implode(',',$this->yystack[$this->yyidx + -1]->minor) .')';
    }
// line 1103 "src/Parser/TemplateParser.y"
    public function yy_r153(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::ERR2);
    }
    $prefixVar = $this->compiler->getNewPrefixVariable();
    $this->compiler->appendPrefixCode("<?php {$prefixVar} = ".$this->compiler->compileVariable('\''.substr($this->yystack[$this->yyidx + -3]->minor,1).'\'').';?>');
    $this->_retvalue = $prefixVar .'('. implode(',',$this->yystack[$this->yyidx + -1]->minor) .')';
    }
// line 1114 "src/Parser/TemplateParser.y"
    public function yy_r154(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor));
    }
// line 1131 "src/Parser/TemplateParser.y"
    public function yy_r157(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)));
    }
// line 1135 "src/Parser/TemplateParser.y"
    public function yy_r158(){
    $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor));
    }
// line 1143 "src/Parser/TemplateParser.y"
    public function yy_r160(){
    $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor);
    }
// line 1151 "src/Parser/TemplateParser.y"
    public function yy_r161(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
// line 1164 "src/Parser/TemplateParser.y"
    public function yy_r164(){
    $this->_retvalue = array(trim($this->yystack[$this->yyidx + -1]->minor).$this->yystack[$this->yyidx + 0]->minor);
    }
// line 1173 "src/Parser/TemplateParser.y"
    public function yy_r166(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor, '', 'method');
    }
// line 1178 "src/Parser/TemplateParser.y"
    public function yy_r167(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, 'method');
    }
// line 1183 "src/Parser/TemplateParser.y"
    public function yy_r168(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor, '');
    }
// line 1188 "src/Parser/TemplateParser.y"
    public function yy_r169(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, 'property');
    }
// line 1193 "src/Parser/TemplateParser.y"
    public function yy_r170(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor, 'property');
    }
// line 1199 "src/Parser/TemplateParser.y"
    public function yy_r171(){
    $this->_retvalue = ' '. trim($this->yystack[$this->yyidx + 0]->minor) . ' ';
    }
// line 1203 "src/Parser/TemplateParser.y"
    public function yy_r172(){
    static $lops = array(
        'eq' => ' == ',
        'ne' => ' != ',
        'neq' => ' != ',
        'gt' => ' > ',
        'ge' => ' >= ',
        'gte' => ' >= ',
        'lt' =>  ' < ',
        'le' =>  ' <= ',
        'lte' => ' <= ',
        'mod' =>  ' % ',
        'and' => ' && ',
        'or' => ' || ',
        'xor' => ' xor ',
         );
    $op = strtolower(preg_replace('/\s*/', '', $this->yystack[$this->yyidx + 0]->minor));
    $this->_retvalue = $lops[$op];
    }
// line 1222 "src/Parser/TemplateParser.y"
    public function yy_r173(){
     static $tlops = array(
         'isdivby' => array('op' => ' % ', 'pre' => '!('),
         'isnotdivby' => array('op' => ' % ', 'pre' => '('),
         'isevenby' => array('op' => ' / ', 'pre' => '!(1 & '),
         'isnotevenby' => array('op' => ' / ', 'pre' => '(1 & '),
         'isoddby' => array('op' => ' / ', 'pre' => '(1 & '),
         'isnotoddby' => array('op' => ' / ', 'pre' => '!(1 & '),
         );
     $op = strtolower(preg_replace('/\s*/', '', $this->yystack[$this->yyidx + 0]->minor));
     $this->_retvalue = $tlops[$op];
     }
// line 1235 "src/Parser/TemplateParser.y"
    public function yy_r174(){
        static $scond = array (
            'iseven' => '!(1 & ',
            'isnoteven' => '(1 & ',
            'isodd' => '(1 & ',
            'isnotodd' => '!(1 & ',
        );
   $op = strtolower(str_replace(' ', '', $this->yystack[$this->yyidx + 0]->minor));
   $this->_retvalue = $scond[$op];
    }
// line 1249 "src/Parser/TemplateParser.y"
    public function yy_r175(){
    $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
// line 1260 "src/Parser/TemplateParser.y"
    public function yy_r178(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 1268 "src/Parser/TemplateParser.y"
    public function yy_r180(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 1272 "src/Parser/TemplateParser.y"
    public function yy_r181(){ 
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
// line 1288 "src/Parser/TemplateParser.y"
    public function yy_r184(){
    $this->compiler->leaveDoubleQuote();
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php($this);
    }
// line 1294 "src/Parser/TemplateParser.y"
    public function yy_r185(){
    $this->yystack[$this->yyidx + -1]->minor->append_subtree($this, $this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
// line 1299 "src/Parser/TemplateParser.y"
    public function yy_r186(){
    $this->_retvalue = new Dq($this, $this->yystack[$this->yyidx + 0]->minor);
    }
// line 1303 "src/Parser/TemplateParser.y"
    public function yy_r187(){
    $this->_retvalue = new Code('(string)'.$this->yystack[$this->yyidx + -1]->minor);
    }
// line 1307 "src/Parser/TemplateParser.y"
    public function yy_r188(){
    $this->_retvalue = new Code('(string)('.$this->yystack[$this->yyidx + -1]->minor.')');
    }
// line 1311 "src/Parser/TemplateParser.y"
    public function yy_r189(){
    $this->_retvalue = new Code('(string)$_smarty_tpl->getValue(\''. substr($this->yystack[$this->yyidx + 0]->minor,1) .'\')');
    }
// line 1323 "src/Parser/TemplateParser.y"
    public function yy_r192(){
    $this->_retvalue = new Tag($this, $this->yystack[$this->yyidx + 0]->minor);
    }
// line 1327 "src/Parser/TemplateParser.y"
    public function yy_r193(){
    $this->_retvalue = new DqContent($this->yystack[$this->yyidx + 0]->minor);
    }

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        if ($this->yyTraceFILE && $yyruleno >= 0
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf($this->yyTraceFILE, "%sReduce (%d) [%s].\n",
                $this->yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (isset(self::$yyReduceMap[$yyruleno])) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno][0];
        $yysize = self::$yyRuleInfo[$yyruleno][1];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if (!$this->yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = (object) ['stateno' => null, 'major' => null, 'minor' => null];
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact === self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sFail!\n", $this->yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
// line 225 "src/Parser/TemplateParser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
    }

    public function yy_accept()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sAccept!\n", $this->yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
// line 218 "src/Parser/TemplateParser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = (object) ['stateno' => null, 'major' => null, 'minor' => null];
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            $this->yystack[] = $x;
        }
        $yyendofinput = ($yymajor==0);

        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sInput %s\n",
                $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
        }

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact === self::YY_ERROR_ACTION) {
                if ($this->yyTraceFILE) {
                    fprintf($this->yyTraceFILE, "%sSyntax Error!\n",
                        $this->yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx === self::YYERRORSYMBOL || $yyerrorhit) {
                        if ($this->yyTraceFILE) {
                            fprintf($this->yyTraceFILE, "%sDiscard input token %s\n",
                                $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx !== self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx !== self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor !== self::YYNOCODE && $this->yyidx >= 0);
    }
}

