{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Smarty Documentation","text":"<p>Smarty is a template engine for PHP, facilitating the separation of presentation (HTML/CSS) from application logic. </p> <p>It allows you to write templates, using variables, modifiers, functions and comments, like this: <pre><code>&lt;h1&gt;{$title|escape}&lt;/h1&gt;\n\n&lt;p&gt;\n    The number of pixels is: {math equation=\"x * y\" x=$height y=$width}.\n&lt;/p&gt;\n</code></pre></p> <p>When this template is rendered, with the value \"Hello world\" for the variable $title, 640 for $width,  and 480 for $height, the result is: <pre><code>&lt;h1&gt;Hello world&lt;/h1&gt;\n\n&lt;p&gt;\n    The number of pixels is: 307200.\n&lt;/p&gt;\n</code></pre></p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Getting Started</li> <li>Philosophy - or \"Why do I need a template engine?\"</li> <li>Features - or \"Why do I want Smarty?\"</li> </ul>"},{"location":"#help","title":"Help","text":"<ul> <li>Search or create an issue</li> <li>Upgrading from an older version</li> <li>Some random tips &amp; tricks</li> <li>Troubleshooting</li> </ul>"},{"location":"#source-code","title":"Source code","text":"<ul> <li>Smarty repository at GitHub</li> </ul>"},{"location":"#sponsors","title":"Sponsors","text":""},{"location":"#_1","title":"Home","text":"<p>iWink, fullservice digital agency</p>"},{"location":"#_2","title":"Home","text":"<p>Temma, the MVC framework based on Smarty</p>"},{"location":"features/","title":"Features","text":"<p>Some of Smarty's features:</p> <ul> <li>It is extremely fast.</li> <li>It is efficient since the PHP parser does the dirty work.</li> <li>No template parsing overhead, only compiles once.</li> <li>It is smart about recompiling only the     template files that have changed.</li> <li>You can easily create your own custom     tags and modifiers, so the template language is     extremely extensible.</li> <li>Configurable template {delimiter} tag     syntax, so you can use <code>{$foo}</code>, <code>{{$foo}}</code>, <code>&lt;!--{$foo}--&gt;</code>, etc.</li> <li>The <code>{if}..{elseif}..{else}..{/if}</code>     constructs are passed to the PHP parser, so the <code>{if...}</code> expression     syntax can be as simple or as complex an evaluation as you like.</li> <li>Allows unlimited nesting of     <code>sections</code>, <code>if's</code> etc.</li> <li>Built-in caching support</li> <li>Arbitrary template sources</li> <li>Template Inheritance for     easy management of template content.</li> <li>Plugin architecture</li> </ul>"},{"location":"features/#separation-of-presentation-from-application-code","title":"Separation of presentation from application code","text":"<ul> <li>This means templates can certainly contain logic under the condition     that it is for presentation only. Things such as     including other templates,     alternating table row colors,     upper-casing a variable,     looping over an array of data and     rendering it are examples of presentation logic.</li> <li>This does not mean however that Smarty forces a separation of     business and presentation logic. Smarty has no knowledge of which is     which, so placing business logic in the template is your own doing.</li> <li>Also, if you desire no logic in your templates you certainly can     do so by boiling the content down to text and variables only.</li> </ul>"},{"location":"features/#how-does-it-work","title":"How does it work?","text":"<p>Under the hood, Smarty \"compiles\" (basically copies and converts) the templates into PHP scripts. This happens once when each template is first invoked, and then the compiled versions are used from that point forward. Smarty takes care of this for you, so the template designer just edits the Smarty templates and never has to manage the compiled versions. This approach keeps the templates easy to maintain, and yet keeps execution times extremely fast since the compiled code is just PHP. And of course, all PHP scripts take advantage of PHP op-code caches such as APC.</p>"},{"location":"features/#template-inheritance","title":"Template Inheritance","text":"<p>Template inheritance was introduced in Smarty 3. Before template inheritance, we managed our templates in pieces such as header and footer templates. This organization lends itself to many problems that require some hoop-jumping, such as managing content within the header/footer on a per-page basis. With template inheritance, instead of including other templates we maintain our templates as single pages. We can then manipulate blocks of content within by inheriting them. This makes templates intuitive, efficient and easy to manage. See Template Inheritance for more info.</p>"},{"location":"features/#why-not-use-xmlxslt-syntax","title":"Why not use XML/XSLT syntax?","text":"<p>There are a couple of good reasons. First, Smarty can be used for more than just XML/HTML based templates, such as generating emails, javascript, CSV, and PDF documents. Second, XML/XSLT syntax is even more verbose and fragile than PHP code! It is perfect for computers, but horrible for humans. Smarty is about being easy to read, understand and maintain.</p>"},{"location":"features/#template-security","title":"Template Security","text":"<p>Although Smarty insulates you from PHP, you still have the option to use it in certain ways if you wish. Template security forces the restriction of PHP (and select Smarty functions.) This is useful if you have third parties editing templates, and you don't want to unleash the full power of PHP or Smarty to them.</p>"},{"location":"features/#integration","title":"Integration","text":"<p>Sometimes Smarty gets compared to Model-View-Controller (MVC) frameworks. Smarty is not an MVC, it is just the presentation layer, much like the View (V) part of an MVC. As a matter of fact, Smarty can easily be integrated as the view layer of an MVC. Many of the more popular ones have integration instructions for Smarty, or you may find some help here in the forums and documentation.</p>"},{"location":"features/#other-template-engines","title":"Other Template Engines","text":"<p>Smarty is not the only engine following the \"Separate Programming Code from Presentation\" philosophy. For instance, Python has template engines built around the same principles such as Django Templates and CheetahTemplate. Note: Languages such as Python do not mix with HTML natively, which give them the advantage of proper programming code separation from the outset. There are libraries available to mix Python with HTML, but they are typically avoided.</p>"},{"location":"features/#what-smarty-is-not","title":"What Smarty is Not","text":"<p>Smarty is not an application development framework. Smarty is not an MVC. Smarty is not an alternative to Laravel, Symfony, CodeIgniter, or any of the other application development frameworks for PHP.</p> <p>Smarty is a template engine, and works as the (V)iew component of your application. Smarty can easily be coupled to any of the engines listed above as the view component. No different than any other software, Smarty has a learning curve. Smarty does not guarantee good application design or proper separation of presentation, this still needs to be addressed by a competent developer and web designer.</p>"},{"location":"features/#is-smarty-right-for-me","title":"Is Smarty Right for Me?","text":"<p>Smarty is not meant to be a tool for every job. The important thing is to identify if Smarty fits your needs. There are some important questions to ask yourself:</p>"},{"location":"features/#template-syntax","title":"Template Syntax","text":"<p>Are you content with PHP tags mixed with HTML? Are your web designers comfortable with PHP? Would your web designers prefer a tag-based syntax designed for presentation? Some experience working with both Smarty and PHP helps answer these questions.</p>"},{"location":"features/#the-business-case","title":"The Business Case","text":"<p>Is there a requirement to insulate the templates from PHP? Do you have untrusted parties editing templates that you do not wish to unleash the power of PHP to? Do you need to programmatically control what is and is not available within the templates? Smarty supplies these capabilities by design.</p>"},{"location":"features/#feature-set","title":"Feature set","text":"<p>Does Smarty's features such as caching, template inheritance and plugin architecture save development cycles writing code that would be needed otherwise? Does the codebase or framework you plan on using have the features you need for the presentation component?</p>"},{"location":"features/#sites-using-smarty","title":"Sites using Smarty","text":"<p>Many well-known PHP projects make use of Smarty such as XOOPS CMS, CMS Made Simple,  Tiki Wiki CMS Groupware and X-Cart to name a few.</p>"},{"location":"features/#summary","title":"Summary","text":"<p>Whether you are using Smarty for a small website or massive enterprise solution, it can accommodate your needs. There are numerous features that make Smarty a great choice:</p> <ul> <li>separation of PHP from HTML/CSS just makes sense</li> <li>readability for organization and management</li> <li>security for 3rd party template access</li> <li>feature completeness, and easily extendable to your own needs</li> <li>massive user base, Smarty is here to stay</li> <li>LGPL license for commercial use</li> <li>100% free to use, open source project</li> </ul>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#requirements","title":"Requirements","text":"<p>Smarty can be run with PHP 7.2 to PHP 8.4.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Smarty can be installed with Composer.</p> <p>To get the latest stable version of Smarty use: <pre><code>composer require smarty/smarty\n</code></pre></p> <p>To get the latest, unreleased version, use: <pre><code>composer require smarty/smarty:dev-master\n</code></pre></p> <p>To get the previous stable version of Smarty, Smarty 4, use: <pre><code>composer require smarty/smarty:^4\n</code></pre></p> <p>Here's how you create an instance of Smarty in your PHP scripts: <pre><code>&lt;?php\n\n// Instantiated via composer\nrequire 'vendor/autoload.php';\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n// or ...\n\n// Instantiated directly\nrequire(\"/path/to/smarty/libs/Smarty.class.php\");\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n</code></pre></p> <p>Now that the library files are in place, it's time to set up the Smarty directories for your application.</p> <p>Smarty requires four directories which are by default named <code>templates</code>, <code>configs</code>, <code>templates_c</code> and <code>cache</code>  relative to the current working directory.</p> <p>The defaults can be changed as follows:</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n$smarty-&gt;setTemplateDir('/some/template/dir');\n$smarty-&gt;setConfigDir('/some/config/dir');\n$smarty-&gt;setCompileDir('/some/compile/dir');\n$smarty-&gt;setCacheDir('/some/cache/dir');\n</code></pre> <p>The compile dir and cache dir need to be writable for the user running the PHP script.</p> <p>Note</p> <p>This is usually user \"nobody\" and group \"nobody\". For OS X users, the default is user \"www\" and group \"www\". If you are using Apache, you can look in your <code>httpd.conf</code> file to see what user and group are being used.</p> <pre><code>chown nobody:nobody /web/www.example.com/guestbook/templates_c/\nchmod 770 /web/www.example.com/guestbook/templates_c/\n\nchown nobody:nobody /web/www.example.com/guestbook/cache/\nchmod 770 /web/www.example.com/guestbook/cache/\n</code></pre> <p>You can verify if your system has the correct access rights for     these directories with <code>testInstall()</code>:</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n$smarty-&gt;setTemplateDir('/some/template/dir');\n$smarty-&gt;setConfigDir('/some/config/dir');\n$smarty-&gt;setCompileDir('/some/compile/dir');\n$smarty-&gt;setCacheDir('/some/cache/dir');\n$smarty-&gt;testInstall();\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic usage","text":"<p>Now, let's create the <code>index.tpl</code> file that Smarty will display. This needs to be located in the <code>$template_dir</code>.</p> <pre><code>{* Smarty *}\n&lt;h1&gt;Hello {$name|escape}, welcome to Smarty!&lt;/h1&gt;\n</code></pre> <p>Note</p> <p><code>{* Smarty *}</code> is a template comment. It is not required, but it is good practice to start all your template files with this comment. It makes the file easy to recognize regardless of the file extension. For example, text editors could recognize the file and turn on special syntax highlighting.</p> <p>Now lets edit our php file. We'll create an instance of Smarty, <code>assign()</code> a template variable and <code>display()</code> the <code>index.tpl</code> file.</p> <pre><code>&lt;?php\n\nrequire 'vendor/autoload.php';\n\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n$smarty-&gt;setTemplateDir('/web/www.example.com/guestbook/templates/');\n$smarty-&gt;setCompileDir('/web/www.example.com/guestbook/templates_c/');\n$smarty-&gt;setConfigDir('/web/www.example.com/guestbook/configs/');\n$smarty-&gt;setCacheDir('/web/www.example.com/guestbook/cache/');\n\n$smarty-&gt;assign('name', 'Ned');\n$smarty-&gt;display('index.tpl');\n</code></pre> <p>Note</p> <p>In our example, we are setting absolute paths to all the Smarty directories. If <code>/web/www.example.com/guestbook/</code> is within your PHP include_path, then these settings are not necessary. However, it is more efficient and (from experience) less error-prone to set them to absolute paths. This ensures that Smarty is getting files from the directories you intended.</p> <p>Now, run your PHP file. You should see \"Hello Ned, welcome to Smarty!\"</p> <p>You have completed the basic setup for Smarty!</p>"},{"location":"getting-started/#escaping","title":"Escaping","text":"<p>You may have noticed that the example template above renders the <code>$name</code> variable using the escape modifier.  This  modifier makes string 'safe' to use in the context of an HTML page.</p> <p>If you are primarily using Smarty for HTML-pages, it is recommended to enable automatic escaping. This way, you don't have to add <code>|escape</code> to every variable you use on a web page.  Smarty will handle it automatically for you!</p> <p>Enable auto-escaping for HTML as follows: <pre><code>$smarty-&gt;setEscapeHtml(true);\n</code></pre></p>"},{"location":"getting-started/#extended-setup","title":"Extended Setup","text":"<p>This is a continuation of the basic installation, please read that first!</p> <p>A slightly more flexible way to set up Smarty is to extend the Smarty class and initialize your Smarty environment. So instead of repeatedly setting directory paths, assigning the same vars, etc., we can do that in one place.</p> <pre><code>&lt;?php\n\nuse Smarty\\Smarty;\n\nclass My_GuestBook extends Smarty {\n\n   public function __construct()\n   {\n        parent::__construct();\n\n        $this-&gt;setTemplateDir('/web/www.example.com/guestbook/templates/');\n        $this-&gt;setCompileDir('/web/www.example.com/guestbook/templates_c/');\n        $this-&gt;setConfigDir('/web/www.example.com/guestbook/configs/');\n        $this-&gt;setCacheDir('/web/www.example.com/guestbook/cache/');\n\n        $this-&gt;setEscapeHtml(true);\n\n        $this-&gt;caching = Smarty::CACHING_LIFETIME_CURRENT;\n        $this-&gt;assign('app_name', 'Guest Book');\n   }\n\n}\n</code></pre> <p>Now, we can use <code>My_GuestBook</code> instead of <code>Smarty</code> in our scripts: <pre><code>&lt;?php\n$smarty = new My_GuestBook();\n$smarty-&gt;assign('name', 'Ned');\n$smarty-&gt;display('index.tpl');\n</code></pre></p>"},{"location":"philosophy/","title":"Philosophy","text":""},{"location":"philosophy/#what-is-smarty","title":"What is Smarty?","text":"<p>Smarty is a template engine for PHP. More specifically, it facilitates a manageable way to separate application logic and content from its presentation. This is best described in a situation where the application programmer and the template designer play different roles, or in most cases are not the same person.</p> <p>For example, let's say you are creating a web page that is displaying a newspaper article.</p> <ul> <li> <p>The article <code>$headline</code>, <code>$tagline</code>, <code>$author</code> and <code>$body</code> are     content elements, they contain no information about how they will be     presented. They are passed into Smarty by the     application.</p> </li> <li> <p>Then the template designer edits the templates and uses a     combination of HTML tags and template tags     to format the presentation of these     variables with elements such as     tables, div\\'s, background colors, font sizes, style sheets, svg     etc.</p> </li> <li> <p>One day the programmer needs to change the way the article content     is retrieved, ie a change in application logic. This change does not     affect the template designer, the content will still arrive in the     template exactly the same.</p> </li> <li> <p>Likewise, if the template designer wants to completely redesign the     templates, this would require no change to the application logic.</p> </li> <li> <p>Therefore, the programmer can make changes to the application logic     without the need to restructure templates, and the template designer     can make changes to templates without breaking application logic.</p> </li> </ul>"},{"location":"philosophy/#goals","title":"Goals","text":"<p>The Smarty design was largely driven by these goals: -   clean separation of presentation from application code -   PHP backend, Smarty template frontend -   complement PHP, not replace it -   fast development/deployment for programmers and designers -   quick and easy to maintain -   syntax easy to understand, no PHP knowledge necessary -   flexibility for custom development -   security: insulation from PHP -   free, open source</p>"},{"location":"philosophy/#two-camps-of-thought","title":"Two camps of thought","text":"<p>When it comes to templating in PHP, there are basically two camps of thought. The first camp exclaims that \\\"PHP is a template engine\\\". This approach simply mixes PHP code with HTML. Although this approach is fastest from a pure script-execution point of view, many would argue that the PHP syntax is messy and complicated when mixed with tagged markup such as HTML.</p> <p>The second camp exclaims that presentation should be void of all programming code, and instead use simple tags to indicate where application content is revealed. This approach is common with other template engines (even in other programming languages), and is also the approach that Smarty takes. The idea is to keep the templates focused squarely on presentation, void of application code, and with as little overhead as possible.</p>"},{"location":"philosophy/#why-is-separating-php-from-templates-important","title":"Why is separating PHP from templates important?","text":"<p>Two major benefits:</p> <ul> <li> <p>SYNTAX: Templates typically consist of semantic markup such as HTML.     PHP syntax works well for application code, but quickly degenerates     when mixed with HTML. Smarty\\'s simple {tag} syntax is designed     specifically to express presentation. Smarty focuses your templates     on presentation and less on \\\"code\\\". This lends to quicker template     deployment and easier maintenance. Smarty syntax requires no working     knowledge of PHP, and is intuitive for programmers and     non-programmers alike.</p> </li> <li> <p>INSULATION: When PHP is mixed with templates, there are no     restrictions on what type of logic can be injected into a template.     Smarty insulates the templates from PHP, creating a controlled     separation of presentation from business logic. Smarty also has     security features that can further enforce restrictions on     templates.</p> </li> </ul>"},{"location":"philosophy/#web-designers-and-php","title":"Web designers and PHP","text":"<p>A common question: \"Web designers have to learn a syntax anyway, why not PHP?\" Of course web designers can learn PHP, and they may already be familiar with it. The issue isn't their ability to learn PHP, it is about the consequences of mixing PHP with HTML. If designers use PHP, it is too easy to add code into templates that doesn't belong there (you just handed them a swiss-army knife when they just needed a knife.) You can teach them the rules of application design, but this is probably something they don't really need to learn (now they are developers!) The PHP manual is also an overwhelming pile of information to sift through. It is like handing the owner of a car the factory assembly manual when all they need is the owners manual. Smarty gives web designers exactly the tools they need, and gives developers fine-grained control over those tools. The simplicity of the tag-based syntax is also a huge welcome for designers, it helps them streamline the organization and management of templates.</p>"},{"location":"upgrading/","title":"Upgrading from an older version","text":""},{"location":"upgrading/#upgrading-from-v4-to-v5","title":"Upgrading from v4 to v5","text":"<p>Smarty 5 adds support for PHP8.2 and drops support for PHP7.1. Smarty also adds support for new features such as the ternary operator (<code>{$test ? $a : $b}</code> and <code>{$var ?: $value_if_falsy}</code>), the null coalescing operator (<code>{$var ?? $value_if_null}</code>)  and positional parameters for custom tags. Smarty 5 also has a brand-new extension architecture that allows you to write neat extension packs.</p>"},{"location":"upgrading/#namespaces","title":"Namespaces","text":"<p>All Smarty code has been moved into the <code>\\Smarty</code> namespace. This reduces the chance of conflicts with other (your) code.</p> <p>For simple use-cases, you only need to add <code>use Smarty\\Smarty;</code> to your script and everything will work. </p> <p><pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n$smarty-&gt;display('homepage.tpl');\n</code></pre> For more information, see getting started.</p> <p>If you extend Smarty or use Smarty plug-ins, please review your code to see if they assume specific class or method names. E.g.: <code>Smarty_Internal_Template</code> is now <code>\\Smarty\\Template\\</code>, <code>SmartyException</code> is now <code>\\Smarty\\Exception</code>.</p>"},{"location":"upgrading/#variable-scope-bubbling","title":"Variable scope bubbling","text":"<p>Template variable scope bubbling has been simplified and made more consistent. The global scope now equals the Smarty  scope in order to avoid global state side effects. Please read the documentation on language variable scope for more details.</p> <p>Also, <code>{config_load}</code> no longer has a <code>scope</code> parameter, which means you can no longer load config from inside your template into the global scope (again, to avoid global state side effects). If you  need to set global config, use the configLoad API method from your PHP code.</p>"},{"location":"upgrading/#using-native-php-functions-or-userland-functions-in-your-templates","title":"Using native PHP-functions or userland functions in your templates","text":"<p>You can no longer use native PHP-functions or userland functions in your templates without registering them.  If you need a function in your templates, register it first.</p> <p>The easiest way to do so is as follows: <pre><code>// native PHP functions used as modifiers need to be registered\n$smarty-&gt;registerPlugin('modifier', 'substr', 'substr');\n\n// userland PHP functions used as modifiers need to be registered\n$smarty-&gt;registerPlugin('modifier', 'my_special_func', 'my_special_func');\n</code></pre></p> <p>But you may want to consider writing a proper extension.</p>"},{"location":"upgrading/#passing-parameters-by-reference","title":"Passing parameters by reference","text":"<p>You cannot use plugins that expect a parameter by reference anymore. PHP-function such as <code>reset()</code>, <code>prev()</code>,  <code>next()</code> and <code>end()</code> can be registered as plugin, but they won't work because they expect a parameter by  reference and Smarty will try to pass it by value.</p>"},{"location":"upgrading/#removed-undocumented-tags","title":"Removed undocumented tags","text":"<p>Smarty 4 still supported some tags that have been carried over from previous version, but have never been documented.</p> <ul> <li><code>{block_parent}</code> should be replaced with <code>{$smarty.block.parent}</code></li> <li><code>{parent}</code> should be replaced with <code>{$smarty.block.parent}</code></li> <li><code>{block_child}</code> should be replaced with <code>{$smarty.block.child}</code></li> <li> <p><code>{child}</code> should be replaced with <code>{$smarty.block.child}</code></p> </li> <li> <p><code>{make_nocache}</code> is no longer supported</p> </li> <li><code>{insert}</code> is no longer supported</li> </ul>"},{"location":"upgrading/#removed-smarty-api-properties","title":"Removed Smarty API properties","text":"<p>In Smarty 4, you could make many configuration changes by directly accessing public properties on the Smarty object in PHP. In many cases, these properties have been made private, and you should now use the appropriate setter method:</p> <ul> <li><code>$smarty-&gt;left_delimiter</code> should be replaced with <code>$smarty-&gt;getLeftDelimiter()</code>/<code>$smarty-&gt;setLeftDelimiter()</code></li> <li><code>$smarty-&gt;right_delimiter</code> should be replaced with <code>$smarty-&gt;getRightDelimiter()</code>/<code>$smarty-&gt;setRightDelimiter()</code></li> <li><code>$smarty-&gt;autoload_filters</code> should be replaced with <code>$smarty-&gt;registerFilter()</code></li> <li><code>$smarty-&gt;template_dir</code> should be replaced with <code>$smarty-&gt;setTemplateDir()</code></li> <li><code>$smarty-&gt;cache_dir</code> should be replaced with <code>$smarty-&gt;setCacheDir()</code></li> <li><code>$smarty-&gt;compile_dir</code> should be replaced with <code>$smarty-&gt;setCompileDir()</code></li> </ul> <p>Other public properties have been removed altogether, and you should no longer access them:</p> <ul> <li><code>$smarty-&gt;_current_file</code></li> <li><code>$smarty-&gt;allow_ambiguous_resources</code> (ambiguous resources handlers should still work)</li> <li><code>$smarty-&gt;registered_filters</code></li> <li><code>$smarty-&gt;direct_access_security</code></li> <li><code>$smarty-&gt;trusted_dir</code></li> <li><code>$smarty-&gt;allow_php_templates</code></li> <li><code>$smarty-&gt;php_functions</code></li> <li><code>$smarty-&gt;php_modifiers</code></li> </ul>"},{"location":"upgrading/#backwards-incompatible-changes-to-custom-plugins","title":"Backwards incompatible changes to custom plugins","text":"<p>We have dropped support for <code>$smarty-&gt;plugins_dir</code> and <code>$smarty-&gt;use_include_path</code>. Use <code>$smarty-&gt;addPluginsDir()</code> or consider writing a proper extension.</p> <p>The 'insert' plugin type is no longer supported.</p> <p>The <code>$cache_attrs</code> parameter for registered plugins is no longer supported.</p>"},{"location":"upgrading/#removed-smarty-api-methods","title":"Removed Smarty API methods","text":"<p>Search your code for the following changes:</p> <ul> <li><code>$smarty-&gt;getTags()</code> is no longer supported</li> <li><code>$smarty-&gt;appendByRef()</code> should be replaced with <code>$smarty-&gt;append()</code></li> <li><code>$smarty-&gt;assignByRef()</code> should be replaced with <code>$smarty-&gt;assign()</code></li> <li><code>$smarty-&gt;loadPlugin()</code> should be replaced with <code>$smarty-&gt;registerPlugin()</code></li> </ul>"},{"location":"upgrading/#removed-undocumented-magic-api-methods","title":"Removed undocumented magic API methods","text":"<p>Smarty v4 allowed setting (internal) properties for which no setter existed by using magic methods  that start with either <code>set</code> or <code>get</code>. This has been removed in Smarty 5.</p> <p>For example, <code>$smarty-&gt;setErrorUnassigned(true);</code> would set the <code>error_unassigned</code> property.</p> <p>Every setter of getter that was ever documented or unit tested has been kept.</p>"},{"location":"upgrading/#removed-php-constants","title":"Removed PHP constants","text":"<p>The following constants have been removed to prevent global side effects.</p> <ul> <li><code>SMARTY_DIR</code></li> <li><code>SMARTY_SYSPLUGINS_DIR</code></li> <li><code>SMARTY_PLUGINS_DIR</code></li> <li><code>SMARTY_MBSTRING</code></li> <li><code>SMARTY_HELPER_FUNCTIONS_LOADED</code></li> </ul>"},{"location":"upgrading/#other-changes","title":"Other changes","text":"<ul> <li>Smarty now always runs in multibyte mode. Make sure you use the PHP multibyte extension in production for optimal performance.</li> <li>Generated <code>&lt;script&gt;</code> tags lo longer have deprecated <code>type=\"text/javascript\"</code> or <code>language=\"Javascript\"</code> attributes</li> <li>Smarty will throw a compiler exception instead of silently ignoring a modifier on a function call, like this: <code>{include|dot:\"x-template-id\" file=\"included.dot.tpl\"}</code></li> <li>The ::getFile() method of a CompilerException will now return the full path of the template being compiled, if possible. This used to be 'file:relative_dir/filename.tpl'.</li> </ul>"},{"location":"upgrading/#upgrading-from-v3-to-v4","title":"Upgrading from v3 to v4","text":"<p>Smarty 4 is mostly identical to Smarty 3. Most notably, it adds support for PHP8 and drops support for PHP7.0 and below. Additionally, some deprecated features that have long been discouraged have been dropped from the language.</p>"},{"location":"upgrading/#muting-php8-warnings","title":"Muting PHP8 warnings","text":"<p>If you simultaneously upgrade Smarty to v4 van PHP to v8, you may notice your error logs filling up with warnings about undefined or null template vars  due to a change in how PHP handles these. This may be helpful to spot errors, but if you find this annoying, you can use <code>$smarty-&gt;muteUndefinedOrNullWarnings()</code> to make Smarty convert these warnings into notices.</p>"},{"location":"upgrading/#asp-tags","title":"ASP tags","text":"<p>You can no longer user ASP-style tags like <code>&lt;% %&gt;</code> and <code>&lt;%= %&gt;</code> in your templates. Replace them with <code>{...}</code> tags.</p>"},{"location":"upgrading/#smartybc","title":"SmartyBC","text":"<p>Check your codebase for <code>SmartyBC</code>. We have dropped deprecated API calls that where only accessible through the SmartyBC class.</p>"},{"location":"upgrading/#no-more-embedded-php","title":"No more embedded PHP","text":"<p>We have completely dropped support for <code>{php}</code> and <code>{include_php}</code> tags and embedded PHP in templates. Check your templates for this, and rewrite any embedded PHP blocks, by moving logic to your PHP files or by creating a custom tag. </p>"},{"location":"upgrading/#other-changes_1","title":"Other changes","text":"<p>Search your code for the following changes: </p> <ul> <li><code>SMARTY_RESOURCE_CHAR_SET</code> and <code>SMARTY_RESOURCE_DATE_FORMAT</code> constants have been removed</li> <li><code>Smarty::muteExpectedErrors</code> and <code>Smarty::unmuteExpectedErrors</code> API methods have been removed</li> <li><code>Smarty::getVariable</code> method has been removed. Use Smarty::getTemplateVars instead.</li> <li>Smarty::registerResource no longer accepts an array of callback functions</li> </ul>"},{"location":"api/basics/","title":"Basics","text":""},{"location":"api/basics/#installation","title":"Installation","text":"<p>For installation instructies, please see the getting started section.</p>"},{"location":"api/basics/#rendering-a-template","title":"Rendering a template","text":"<p>Here's how you create an instance of Smarty in your PHP scripts: <pre><code>&lt;?php\n\nrequire 'vendor/autoload.php';\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n</code></pre></p> <p>You now have a Smarty object that you can use to render templates.</p> <pre><code>&lt;?php\n\nrequire 'vendor/autoload.php';\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n$smarty-&gt;display('string:The current smarty version is: {$smarty.version}.');\n// or \necho $smarty-&gt;fetch('string:The current smarty version is: {$smarty.version}.');\n</code></pre>"},{"location":"api/basics/#using-file-based-templates","title":"Using file-based templates","text":"<p>You probably want to manage your templates as files. Create a subdirectory called 'templates' and then configure Smarty to use that:</p> <pre><code>&lt;?php\n\nrequire 'vendor/autoload.php';\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n$smarty-&gt;setTemplateDir(__DIR__ . '/templates');\n</code></pre> <p>Say you have a template file called 'version.tpl', stored in the 'templates' directory like this: <pre><code>&lt;h1&gt;Hi&lt;/h1&gt;\nThe current smarty version is: {$smarty.version|escape}.\n</code></pre></p> <p>You can now render this, using: <pre><code>&lt;?php\n\nrequire 'vendor/autoload.php';\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n$smarty-&gt;setTemplateDir(__DIR__ . '/templates');\n$smarty-&gt;display('version.tpl');\n</code></pre></p>"},{"location":"api/basics/#assigning-variables","title":"Assigning variables","text":"<p>Templates start to become really useful once you add variables to the mix.</p> <p>Create a template called 'footer.tpl' in the 'templates' directory like this: <pre><code>&lt;small&gt;Copyright {$companyName|escape}&lt;/small&gt;\n</code></pre></p> <p>Now assign a value to the 'companyName' variable and render your template like this:</p> <pre><code>&lt;?php\n\nrequire 'vendor/autoload.php';\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n$smarty-&gt;setTemplateDir(__DIR__ . '/templates');\n$smarty-&gt;assign('companyName', 'AC &amp; ME Corp.');\n$smarty-&gt;display('footer.tpl');\n</code></pre> <p>Run this, and you will see:</p> <pre><code>&lt;small&gt;Copyright AC &amp;amp; ME Corp.&lt;/small&gt;\n</code></pre> <p>Note how the escape modifier  translated the <code>&amp;</code> character into the proper HTML syntax <code>&amp;amp;</code>. Read more about auto-escaping in the next section.</p>"},{"location":"api/configuring/","title":"Configuring Smarty","text":""},{"location":"api/configuring/#setting-the-template-path","title":"Setting the template path","text":"<p>By default, Smarty looks for templates to render in <code>./templates</code>.</p> <p>You can change this, or even use multiple paths to use when looking for templates.</p> <p>If you need to change this, you can use <code>setTemplateDir()</code> or <code>addTemplateDir()</code>. Use <code>getTemplateDir()</code> to retrieve the configured paths.</p> <pre><code>&lt;?php\n\n // set a single directory where the config files are stored\n$smarty-&gt;setTemplateDir('./templates');\n\n// set multiple directories where templates are stored\n$smarty-&gt;setTemplateDir(['./templates', './templates_2', './templates_3']);\n\n// add directory where templates files are stored to the current list of dirs\n$smarty-&gt;addTemplateDir('./templates_1');\n\n// add multiple directories to the current list of dirs\n$smarty-&gt;addTemplateDir([\n    './templates_2',\n    './templates_3',\n]);\n\n// chaining of method calls\n$smarty-&gt;setTemplateDir('./templates')\n       -&gt;addTemplateDir('./templates_1')\n       -&gt;addTemplateDir('./templates_2');\n\n// insert a template dir before exising template dirs\n$smarty-&gt;prependTemplateDir('./more_important_templates')\n\n// get all directories where config files are stored\n$template_dirs = $smarty-&gt;getTemplateDir();\nvar_dump($template_dirs); // array\n\n// get directory identified by key\n$template_dir = $smarty-&gt;getTemplateDir(0);\nvar_dump($template_dir); // string\n</code></pre>"},{"location":"api/configuring/#setting-the-path-for-compiled-templates","title":"Setting the path for compiled templates","text":"<p>Smarty compiles templates to native PHP to be as fast as possible. The default path where these PHP-files are stored is <code>./templates_c</code>.</p> <p>If you need to change this, you can use <code>setCompileDir()</code>. Use <code>getCompileDir()</code> to retrieve the configured path.</p> <pre><code>&lt;?php\n\n// set another path to store compiled templates\n$smarty-&gt;setCompileDir('/data/compiled_templates');\n\n// get directory where compiled templates are stored\n$compileDir = $smarty-&gt;getCompileDir();\n</code></pre>"},{"location":"api/configuring/#setting-the-config-path","title":"Setting the config path","text":"<p>Smarty can load data from config files. By default, Smarty loads the config files from <code>./configs</code>.</p> <p>You can change this, or even use multiple paths to use when looking for config files.</p> <p>If you need to change this, you can use <code>setConfigDir()</code> or <code>addConfigDir()</code>. Use <code>getConfigDir()</code> to retrieve the configured paths.</p> <pre><code>&lt;?php\n\n // set a single directory where the config files are stored\n$smarty-&gt;setConfigDir('./config');\n\n// set multiple directories where config files are stored\n$smarty-&gt;setConfigDir(['./config', './config_2', './config_3']);\n\n// add directory where config files are stored to the current list of dirs\n$smarty-&gt;addConfigDir('./config_1');\n\n// add multiple directories to the current list of dirs\n$smarty-&gt;addConfigDir([\n    './config_2',\n    './config_3',\n]);\n\n// chaining of method calls\n$smarty-&gt;setConfigDir('./config')\n       -&gt;addConfigDir('./config_1', 'one')\n       -&gt;addConfigDir('./config_2', 'two');\n\n// get all directories where config files are stored\n$config_dirs = $smarty-&gt;getConfigDir();\nvar_dump($config_dirs); // array\n\n// get directory identified by key\n$config_dir = $smarty-&gt;getConfigDir(0);\nvar_dump($config_dir); // string\n</code></pre>"},{"location":"api/configuring/#setting-the-path-for-caches","title":"Setting the path for caches","text":"<p>Even though Smarty runs templates as native PHP for maximum speed, it still needs to  execute the PHP code on each call. If your data doesn't change all that often, you may be able to speed up your application even more by using output caching.</p> <p>Output caching can be a tricky subject, so we devoted an entire section to caching. Be sure to read that if you want to use caching.</p> <p>By default, Smarty stores caches to PHP-files in a subdirectory named <code>./cache</code>.</p> <p>If you need to change this, you can use <code>setCacheDir()</code>. Use <code>getCacheDir()</code> to retrieve the configured path.</p> <pre><code>&lt;?php\n\n// set another path to store caches\n$smarty-&gt;setCacheDir('/data/caches');\n\n// get directory where cached templates are stored\n$cacheDir = $smarty-&gt;getCacheDir();\n</code></pre>"},{"location":"api/configuring/#enabling-auto-escaping","title":"Enabling auto-escaping","text":"<p>By default, Smarty does not escape anything you render in your templates. If you use Smarty to render a HTML-page, this means that you will have to make sure that you do not render any characters that have a special meaning in HTML, such as <code>&amp;</code>, <code>&lt;</code> and <code>&gt;</code>, or apply the escape modifier  to anything you want to render.</p> <p>If you forget to do so, you may break your HTML page, or even create a vulnerability for  attacks known as XSS or Cross Site Scripting.</p> <p>Luckily, you can tell Smarty to automatically apply the escape modifier to any dynamic part of your template. It's like Smarty magically adds <code>|escape</code> to every variable you use on a web page.</p> <p>Enable auto-escaping for HTML as follows: <pre><code>$smarty-&gt;setEscapeHtml(true);\n</code></pre></p> <p>When auto-escaping is enabled, the <code>|escape</code> modifier's default mode (<code>html</code>) has no effect, to avoid double-escaping. It is possible to force it with the <code>force</code> mode. Other modes (<code>htmlall</code>, <code>url</code>, <code>urlpathinfo</code>, <code>quotes</code>, <code>javascript</code>) may be used with the result you might expect, without double-escaping.</p> <p>Even when auto-escaping is enabled, you might want to display the content of a variable without escaping it. To do so, use the <code>|raw</code> modifier.</p> <p>Examples (with auto-escaping enabled): <pre><code>{* these three statements are identical *}\n{$myVar}\n{$myVar|escape}\n{$myVar|escape:'html'}\n\n{* no double-escaping on these statements *}\n{$var|escape:'htmlall'}\n{$myVar|escape:'url'}\n{$myVar|escape:'urlpathinfo'}\n{$myVar|escape:'quotes'}\n{$myVar|escape:'javascript'}\n\n{* no escaping at all *}\n{$myVar|raw}\n\n{* force double-escaping *}\n{$myVar|escape:'force'}\n</code></pre></p>"},{"location":"api/configuring/#disabling-compile-check","title":"Disabling compile check","text":"<p>By default, Smarty tests to see if the current template has changed since the last time it was compiled. If it has changed, it recompiles that template. </p> <p>Once an application is put into production, this compile-check step  is usually no longer needed and the extra checks can significantly hurt performance.  Be sure to disable compile checking on production for maximum performance.  <pre><code>&lt;?php\n$smarty-&gt;setCompileCheck(\\Smarty\\Smarty::COMPILECHECK_OFF);\n</code></pre></p> <p>If <code>caching</code> is enabled and compile-check is enabled, then the cache files will get regenerated if an involved template file or config file was updated.</p>"},{"location":"api/configuring/#charset-encoding","title":"Charset encoding","text":"<p>There are a variety of encodings for textual data, ISO-8859-1 (Latin1) and UTF-8 being the most popular. Unless you change <code>\\Smarty\\Smarty::$_CHARSET</code>, Smarty recognizes <code>UTF-8</code> as the internal charset.</p> <p>Note</p> <p><code>ISO-8859-1</code> has been PHP\\'s default internal charset since the beginning. Unicode has been evolving since 1991. Since then, it has become the one charset to conquer them all, as it is capable of encoding most of the known characters even across different character systems (latin, cyrillic, japanese, ...). <code>UTF-8</code> is unicode\\'s most used encoding, as it allows referencing the thousands of character with the smallest size overhead possible.</p> <p>Since unicode and UTF-8 are very widespread nowadays, their use is strongly encouraged.</p> <p>Note</p> <p>Smarty\\'s internals and core plugins are truly UTF-8 compatible since Smarty 3.1.</p> <pre><code>&lt;?php\n\n// use japanese character encoding\nmb_internal_charset('EUC-JP');\n\n\\Smarty\\Smarty::$_CHARSET = 'EUC-JP';\n$smarty = new \\Smarty\\Smarty();\n</code></pre>"},{"location":"api/inheritance/","title":"Template Inheritance","text":"<p>Inheritance allows you to define base templates that can be extended by child templates. Extending means that the child template can override all or some of the named block areas in the base template.</p> <p>When you render the child template, the result will as if you rendered the base template, with only the block(s) that you have overridden in the  child templates differing.</p> <ul> <li> <p>The inheritance tree can be as deep as you want, meaning you can     extend a file that extends another one that extends another one and     so on.</p> </li> <li> <p>The child templates can not define any content besides what's     inside <code>{block}</code> tags they override.     Anything outside of <code>{block}</code> tags will     be removed.</p> </li> <li> <p>Template inheritance is a compile time process which creates a     single compiled template file. Compared to corresponding solutions     based on subtemplates included with the     <code>{include}</code> tag it does have much     better performance when rendering.</p> </li> </ul>"},{"location":"api/inheritance/#basic-inheritance","title":"Basic inheritance","text":"<p>First, create a base template with one or more blocks.  Then, create a child template. The child template  must have an {extends} tag on its first line.</p> <p>The child template can redefine one or more blocks defined in the base template.</p> <p>See below for a simple example.</p> <p>layout.tpl (base)</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;{block name=title}Default Page Title{/block}&lt;/title&gt;\n      {block name=head}{/block}\n    &lt;/head&gt;\n    &lt;body&gt;\n        {block name=body}{/block}\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>myproject.tpl (child)</p> <pre><code>{extends file='layout.tpl'}\n{block name=head}\n  &lt;link href=\"/css/mypage.css\" rel=\"stylesheet\" type=\"text/css\"/&gt;\n  &lt;script src=\"/js/mypage.js\"&gt;&lt;/script&gt;\n{/block}\n</code></pre> <p>mypage.tpl (grandchild)</p> <pre><code>{extends file='myproject.tpl'}\n{block name=title}My Page Title{/block}\n{block name=head}\n  &lt;link href=\"/css/mypage.css\" rel=\"stylesheet\" type=\"text/css\"/&gt;\n  &lt;script src=\"/js/mypage.js\"&gt;&lt;/script&gt;\n{/block}\n{block name=body}My HTML Page Body goes here{/block}\n</code></pre> <p>To render the above, you would use:</p> <pre><code>&lt;?php\n$smarty-&gt;display('mypage.tpl');\n</code></pre> <p>The resulting output is:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;My Page Title&lt;/title&gt;\n      &lt;link href=\"/css/mypage.css\" rel=\"stylesheet\" type=\"text/css\"/&gt;\n      &lt;script src=\"/js/mypage.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n     My HTML Page Body goes here\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Note</p> <p>When compile-check is enabled, all files  in the inheritance tree are checked for modifications upon each invocation. You may want to disable compile-check on production servers for this reason.</p> <p>Note</p> <p>If you have a subtemplate which is included with <code>{include}</code> and it contains <code>{block}</code> areas it works only if the <code>{include}</code> itself is called from within a surrounding <code>{block}</code>. In the final parent template you may need a dummy <code>{block}</code> for it.</p>"},{"location":"api/inheritance/#using-append-and-prepend","title":"Using append and prepend","text":"<p>The content of <code>{block}</code> tags from child and parent templates can be merged by the <code>append</code> or <code>prepend</code> <code>{block}</code> tag option flags and <code>{$smarty.block.parent}</code> or <code>{$smarty.block.child}</code> placeholders.</p>"},{"location":"api/inheritance/#extends-resource-type","title":"Extends resource type","text":"<p>Instead of using <code>{extends}</code> tags in the template files you can define the inheritance tree in your PHP script by using the <code>extends:</code> resource type.</p> <p>The code below will return same result as the example above.</p> <pre><code>&lt;?php\n$smarty-&gt;display('extends:layout.tpl|myproject.tpl|mypage.tpl'); \n</code></pre>"},{"location":"api/rendering/","title":"Rendering templates","text":""},{"location":"api/rendering/#fetching-or-rendering-templates-directly","title":"Fetching or rendering templates directly","text":"<p>As explained in basics, you can use <code>$smarty-&gt;fetch()</code> or <code>$smarty-&gt;display()</code> to render a template directly.</p> <pre><code>&lt;?php\n\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n$smarty-&gt;display('homepage.tpl');\n\n// or\n\n$output = $smarty-&gt;fetch('homepage.tpl');\n</code></pre> <p>When you use <code>display()</code>, Smarty renders the template to the standard output stream. <code>fetch()</code> returns the output instead of echoing it.</p> <p>The example above uses simple filenames to load the template. Smarty also supports loading templates from resources.</p>"},{"location":"api/rendering/#creating-a-template-object","title":"Creating a template object","text":"<p>You can also create a template object which later can be prepared first, and rendered later. This can be useful, for example if you plan to re-use several  templates.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n// create template object with its private variable scope\n$tpl = $smarty-&gt;createTemplate('index.tpl');\n\n// assign a variable (available only to this template)\n$tpl-&gt;assign('title', 'My Homepage!');\n\n// display the template\n$tpl-&gt;display();\n</code></pre> <p>More on assigning variables in using data in templates.</p>"},{"location":"api/rendering/#testing-if-a-template-exists","title":"Testing if a template exists","text":"<p>You can use <code>templateExists()</code> to check whether a template exists before you attempt to use it.</p> <p>It accepts either a path to the template on the filesystem or a resource string specifying the template.</p> <p>This example uses <code>$_GET['page']</code> to <code>{include}</code> a content template. If the template does not exist then an error page is displayed instead. First,  the <code>page_container.tpl</code></p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;{$title|escape}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        {* include middle content page *}\n        {include file=$content_template}\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>And the php script:</p> <pre><code>&lt;?php\n\n// set the filename eg index.inc.tpl\n$mid_template = $_GET['page'].'.inc.tpl';\n\nif (!$smarty-&gt;templateExists($mid_template)){\n    $mid_template = 'page_not_found.tpl';\n}\n$smarty-&gt;assign('content_template', $mid_template);\n\n$smarty-&gt;display('page_container.tpl');\n</code></pre>"},{"location":"api/resources/","title":"Template resources","text":""},{"location":"api/resources/#the-filesystem-resource","title":"The filesystem resource","text":"<p>So far in our examples, we have used simple filenames or paths when loading a template.</p> <p>For example, to load a template file called <code>homepage.tpl</code>, from the filesystem, you could write: <pre><code>&lt;?php\n\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n$smarty-&gt;display('homepage.tpl');\n</code></pre></p> <p>The filesystem is the default resource. Templates, however, may come  from a variety of sources. When you render a template, or when you include a template from within another template, you supply a resource type, followed by <code>:</code> and the appropriate path and template name.</p> <p>If a resource is not explicitly given, the default resource type is assumed. The resource type for the filesystem is <code>file</code>, which means that the previous example can be rewritten as follows: <pre><code>&lt;?php\n\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n$smarty-&gt;display('file:homepage.tpl');\n</code></pre></p> <p>The file resource pulls templates source files from the directories specified using <code>Smarty::setTemplateDir()</code> (see Configuring Smarty).</p> <p><code>setTemplateDir</code> accepts a single path, but can also ben called with an array of paths.  In that case, the list of directories is traversed in the order they appear in the array. The first template found is the one to process.</p>"},{"location":"api/resources/#templates-from-a-specific-directory","title":"Templates from a specific directory","text":"<p>Smarty 3.1 introduced the bracket-syntax for specifying an element from <code>Smarty::setTemplateDir()</code>. This allows websites employing multiple sets of templates better control over which template to access.</p> <p>The bracket-syntax can be used as follows: <pre><code>&lt;?php\n\n// setup template directories\n$smarty-&gt;setTemplateDir([\n    './templates',            // element: 0, index: 0\n    './templates_2',          // element: 1, index: 1\n    '10' =&gt; 'templates_10',   // element: 2, index: '10'\n    'foo' =&gt; 'templates_foo', // element: 3, index: 'foo'\n]);\n\n/*\n  assume the template structure\n  ./templates/foo.tpl\n  ./templates_2/foo.tpl\n  ./templates_2/bar.tpl\n  ./templates_10/foo.tpl\n  ./templates_10/bar.tpl\n  ./templates_foo/foo.tpl\n*/\n\n// regular access\n$smarty-&gt;display('file:foo.tpl'); \n// will load ./templates/foo.tpl\n\n// using numeric index\n$smarty-&gt;display('file:[1]foo.tpl'); \n// will load ./templates_2/foo.tpl\n\n// using numeric string index\n$smarty-&gt;display('file:[10]foo.tpl'); \n// will load ./templates_10/foo.tpl\n\n// using string index\n$smarty-&gt;display('file:[foo]foo.tpl'); \n// will load ./templates_foo/foo.tpl\n\n// using \"unknown\" numeric index (using element number)\n$smarty-&gt;display('file:[2]foo.tpl'); \n// will load ./templates_10/foo.tpl\n</code></pre></p> <p>And, from within a Smarty template:</p> <pre><code>{include file=\"file:foo.tpl\"}\n{* will load ./templates/foo.tpl *}\n\n{include file=\"file:[1]foo.tpl\"}\n{* will load ./templates_2/foo.tpl *}\n\n{include file=\"file:[foo]foo.tpl\"}\n{* will load ./templates_foo/foo.tpl *}\n</code></pre>"},{"location":"api/resources/#using-absolute-paths","title":"Using absolute paths","text":"<p>Templates outside the specified template directories  require the <code>file:</code> template resource type, followed by the absolute path to the template (with leading slash).</p> <pre><code>&lt;?php\n$smarty-&gt;display('file:/export/templates/index.tpl');\n$smarty-&gt;display('file:/path/to/my/templates/menu.tpl');\n````\n\nAnd from within a Smarty template:\n```smarty\n{include file='file:/usr/local/share/templates/navigation.tpl'}\n</code></pre> <p>Note</p> <p>With <code>Security</code> enabled, access to templates outside of the specified templates directories is not allowed unless you whitelist those directories.</p>"},{"location":"api/resources/#windows-file-paths","title":"Windows file paths","text":"<p>If you are running on Windows, file paths usually include a drive letter (such as <code>C:</code>) at the beginning of the pathname. Be sure to use <code>file:</code> in the path to avoid namespace conflicts and get the desired results. <pre><code>&lt;?php\n$smarty-&gt;display('file:C:/export/templates/index.tpl');\n$smarty-&gt;display('file:F:/path/to/my/templates/menu.tpl');\n</code></pre></p> <p>And from within Smarty template: <pre><code>{include file='file:D:/usr/local/share/templates/navigation.tpl'}\n</code></pre></p>"},{"location":"api/resources/#handling-missing-templates","title":"Handling missing templates","text":"<p>If the file resource cannot find the requested template, it will check if there is a default template handler to call. By default, there is none, and Smarty will return an error, but you can register a default template handler calling <code>Smarty::registerDefaultTemplateHandler</code> with any callable.</p> <pre><code>&lt;?php\n\n$smarty-&gt;registerDefaultTemplateHandler([$this, 'handleMissingTemplate']);\n\n// ...\n\npublic function handleMissingTemplate($type, $name, &amp;$content, &amp;$modified, Smarty $smarty) {\n    if (/* ... */) {\n        // return corrected filepath\n        return \"/tmp/some/foobar.tpl\";\n    } elseif (/* ... */) {\n        // return a template directly\n        $content = \"the template source\";\n        $modified = time();\n        return true;\n    } else {\n        // tell smarty that we failed\n        return false;\n    }\n}\n</code></pre>"},{"location":"api/resources/#the-string-and-eval-resources","title":"The string and eval resources","text":"<p>Smarty can render templates from a string by using the <code>string:</code> or <code>eval:</code> resource.</p> <ul> <li> <p>The <code>string:</code> resource behaves much the same as a template file. The     template source is compiled from a string and stores the compiled     template code for later reuse. Each unique template string will     create a new compiled template file. If your template strings are     accessed frequently, this is a good choice. If you have frequently     changing template strings (or strings with low reuse value), the     <code>eval:</code> resource may be a better choice, as it doesn\\'t save     compiled templates to disk.</p> </li> <li> <p>The <code>eval:</code> resource evaluates the template source every time a page     is rendered. This is a good choice for strings with low reuse value.     If the same string is accessed frequently, the <code>string:</code> resource     may be a better choice.</p> </li> </ul> <p>Note</p> <p>With a <code>string:</code> resource type, each unique string generates a compiled file. Smarty cannot detect a string that has changed, and therefore will generate a new compiled file for each unique string. It is important to choose the correct resource so that you do not fill your disk space with wasted compiled strings.</p> <p><pre><code>&lt;?php\n$smarty-&gt;assign('foo', 'value');\n$template_string = 'display {$foo} here';\n$smarty-&gt;display('string:' . $template_string); // compiles for later reuse\n$smarty-&gt;display('eval:' . $template_string); // compiles every time\n</code></pre> From within a Smarty template: <pre><code>{include file=\"string:$template_string\"} {* compiles for later reuse *}\n{include file=\"eval:$template_string\"} {* compiles every time *}\n</code></pre></p> <p>Both <code>string:</code> and <code>eval:</code> resources may be encoded with <code>urlencode()</code> or <code>base64_encode()</code>. This is not necessary for the usual use of <code>string:</code> and <code>eval:</code>, but is required when using either of them in conjunction with the <code>extends resource</code>.</p> <pre><code> &lt;?php\n $smarty-&gt;assign('foo','value');\n $template_string_urlencode = urlencode('display {$foo} here');\n $template_string_base64 = base64_encode('display {$foo} here');\n $smarty-&gt;display('eval:urlencode:' . $template_string_urlencode); // will decode string using urldecode()\n $smarty-&gt;display('eval:base64:' . $template_string_base64); // will decode string using base64_decode()\n</code></pre> <p>From within a Smarty template: <pre><code> {include file=\"string:urlencode:$template_string_urlencode\"} {* will decode string using urldecode() *}\n {include file=\"eval:base64:$template_string_base64\"} {* will decode string using base64_decode() *}\n</code></pre></p>"},{"location":"api/resources/#the-extends-resource","title":"The extends resource","text":"<p>The <code>extends:</code> resource is used to define child/parent relationships. For details see section of Template inheritance.</p> <p>Note</p> <p>Using the extends resource is usually not necessary. If you have a choice, it is normally more flexible and intuitive to handle inheritance chains from within the templates using the {extends} tag.</p> <p>When <code>string:</code> and <code>eval:</code> templates are used, make sure they are properly url or base64 encoded. </p> <p>The templates within an inheritance chain are not compiled separately. Only a single compiled template will be generated.  (If an <code>eval:</code> resource is found within an inheritance chain, its \"don't save a compile file\" property is superseded by  the <code>extends:</code> resource.)</p> <p>Example: <pre><code>&lt;?php\n$smarty-&gt;display('extends:parent.tpl|child.tpl|grandchild.tpl'); \n\n// inheritance from multiple template sources\n$smarty-&gt;display('extends:db:parent.tpl|file:child.tpl|grandchild.tpl|eval:{block name=\"fooBazVar_\"}hello world{/block}'); \n</code></pre></p>"},{"location":"api/resources/#the-stream-resource","title":"The stream resource","text":"<p>Smarty allow you to use PHP streams  as a template resource. Smarty will first look for a registered template resource. If nothing is found, it will check if a PHP stream is available.  If a stream is available, Smarty will use it  to fetch the template.</p> <p>For example,  <pre><code>&lt;?php\nstream_wrapper_register('myresource', MyResourceStream::class);\n$smarty-&gt;display('myresource:bar.tpl');\n</code></pre></p> <p>Or, from within a template: <pre><code> {include file=\"myresource:bar.tpl\"}\n</code></pre></p>"},{"location":"api/resources/#adding-your-own-resource-type","title":"Adding your own resource type","text":"<p>You can create a class that extends <code>Smarty\\Resource\\CustomPlugin</code> to add your own resource type,  for example to load template from a database.</p> <p>For example: <pre><code>&lt;?php\nclass HelloWorldResource extends Smarty\\Resource\\CustomPlugin {\n\n    protected function fetch($name, &amp;$source, &amp;$mtime) {\n        $source = '{$x=\"hello world\"}{$x}'; // load your template here based on $name\n        $mtime = time();\n    }\n\n}\n\n// ..\n\n$smarty-&gt;registerResource('helloworld', new HelloWorldResource());\n</code></pre></p> <p>If a Resource's templates should not be run through the Smarty compiler, the Custom Resource may extend <code>\\Smarty\\Resource\\UncompiledPlugin</code>. The Resource Handler must then implement the function <code>renderUncompiled(\\Smarty\\Template $_template)</code>. <code>$_template</code> is a reference to the current template and contains all assigned variables which the implementor can access via <code>$_template-&gt;getSmarty()-&gt;getTemplateVars()</code>. These Resources simply echo their rendered content to the output stream. The rendered output will be output-cached if the Smarty instance was configured accordingly. See <code>src/Resource/PhpPlugin.php</code> for an example.</p> <p>If the Resource's compiled templates should not be cached on disk, the Custom Resource may extend <code>\\Smarty\\Resource\\RecompiledPlugin</code>. These Resources are compiled every time they are accessed. This may be an expensive overhead. See <code>src/Resource/StringEval.php</code> for an example.</p>"},{"location":"api/resources/#changing-the-default-resource-type","title":"Changing the default resource type","text":"<p>The default resource type is <code>file</code>. If you want to change it, use <code>Smarty::setDefaultResourceType</code>.</p> <p>The following example will change the default resource type to <code>mysql</code>: <pre><code>&lt;?php\n$smarty-&gt;setDefaultResourceType('mysql');\n</code></pre></p>"},{"location":"api/security/","title":"Security","text":"<p>Security is good for situations when you have untrusted parties editing the templates, and you want to reduce the risk of system security compromises through the template language.</p> <p>The settings of the security policy are defined by overriding public properties of an instance of the \\Smarty\\Security class. These are the possible settings:</p> <ul> <li><code>$secure_dir</code> is an array of template directories that are     considered secure. A directory configured using <code>$smarty-&gt;setTemplateDir()</code> is     considered secure implicitly. The default is an empty array.</li> <li><code>$trusted_uri</code> is an array of regular expressions matching URIs that   are considered trusted. This security directive is used by   <code>{fetch}</code> and   <code>{html_image}</code>. URIs passed to   these functions are reduced to <code>{$PROTOCOL}://{$HOSTNAME}</code> to allow   simple regular expressions (without having to deal with edge cases   like authentication-tokens).</li> </ul> <p>The expression <code>'#https?://.*smarty.net$#i'</code> would allow accessing   the following URIs:</p> <pre><code>-   `http://smarty.net/foo`\n-   `http://smarty.net/foo`\n-   `http://www.smarty.net/foo`\n-   `http://smarty.net/foo`\n-   `https://foo.bar.www.smarty.net/foo/bla?blubb=1`\n</code></pre> <p>but deny access to these URIs:</p> <pre><code>-   `http://smarty.com/foo` (not matching top-level domain \\\"com\\\")\n-   `ftp://www.smarty.net/foo` (not matching protocol \\\"ftp\\\")\n-   `http://www.smarty.net.otherdomain.com/foo` (not matching end of\n    domain \\\"smarty.net\\\")\n</code></pre> <ul> <li> <p><code>$static_classes</code> is an array of classes that are considered     trusted. The default is an empty array which allows access to all     static classes. To disable access to all static classes set     $static_classes = null.</p> </li> <li> <p><code>$streams</code> is an array of streams that are considered trusted and     can be used from within template. To disable access to all streams     set $streams = null. An empty array ( $streams = [] ) will     allow all streams. The default is array('file').</p> </li> <li> <p><code>$allowed_modifiers</code> is an array of (registered / autoloaded)     modifiers that should be accessible to the template. If this array     is non-empty, only the herein listed modifiers may be used. This is     a whitelist.</p> </li> <li> <p><code>$disabled_modifiers</code> is an array of (registered / autoloaded)     modifiers that may not be accessible to the template.</p> </li> <li> <p><code>$allowed_tags</code> is a boolean flag which controls if constants can     function-, block and filter plugins that should be accessible to the     template. If this array is non-empty, only the herein listed     modifiers may be used. This is a whitelist.</p> </li> <li> <p><code>$disabled_tags</code> is an array of (registered / autoloaded) function-,     block and filter plugins that may not be accessible to the template.</p> </li> <li> <p><code>$allow_constants</code> is a boolean flag which controls if constants can     be accessed by the template. The default is \"true\".</p> </li> <li> <p><code>$allow_super_globals</code> is a boolean flag which controls if the PHP     super globals can be accessed by the template. The default is     \"true\".</p> </li> </ul> <p>If security is enabled, no private methods, functions or properties of static classes or assigned objects can be accessed (beginning with '_') by the template.</p> <p>To customize the security policy settings you can extend the \\Smarty\\Security class or create an instance of it.</p> <pre><code>&lt;?php\n\nuse Smarty\\Smarty;\n\nclass My_Security_Policy extends \\Smarty\\Security {\n  public $allow_constants = false;\n}\n\n$smarty = new Smarty();\n\n$smarty-&gt;enableSecurity('My_Security_Policy');\n</code></pre> <pre><code>&lt;?php\n\nuse Smarty\\Smarty;\n\n$smarty = new Smarty();\n\n$my_security_policy = new \\Smarty\\Security($smarty);\n$my_security_policy-&gt;allow_constants = false;\n\n$smarty-&gt;enableSecurity($my_security_policy);\n</code></pre> <pre><code>&lt;?php\n\nuse Smarty\\Smarty;\n\n$smarty = new Smarty();\n\n// enable default security\n$smarty-&gt;enableSecurity();\n</code></pre> <p>Note</p> <p>Most security policy settings are only checked when the template gets compiled. For that reason you should delete all cached and compiled template files when you change your security settings.</p>"},{"location":"api/caching/basics/","title":"Caching","text":"<p>Caching is used to speed up the rendering of a template by saving and re-using the output. </p> <p>If a cached version of the call is available, that is displayed instead of regenerating the output. Caching can speed things up tremendously, especially templates with longer computation times. </p> <p>Since templates can include or extend other templates, one cache file could conceivably be made up of several template files, config files, etc.</p> <p>** Note **</p> <p>Since templates are dynamic, it is important to be careful what you are caching and for how long. For instance, if you are displaying the front page of your website that does not change its content very often, it might work well to cache this page for an hour or more. On the other hand, if you are displaying a page with a timetable containing new information by the minute, it would not make sense to cache this page.</p>"},{"location":"api/caching/basics/#setting-up-caching","title":"Setting Up Caching","text":"<p>The first thing to do is enable caching by calling <code>Smarty::setCaching()</code> with either <code>\\Smarty\\Smarty::CACHING_LIFETIME_CURRENT</code> or <code>\\Smarty\\Smarty::CACHING_LIFETIME_SAVED</code>. Or with <code>\\Smarty\\Smarty::CACHING_OFF</code> to disable caching again.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n// enable caching, using the current lifetime (see below)\n$smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_CURRENT);\n\n// enable caching, using the lifetime set when the cache was saved (see below)\n$smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_SAVED);\n\n// disable caching\n$smarty-&gt;setCaching(Smarty::CACHING_OFF);\n\n$smarty-&gt;display('index.tpl');\n</code></pre> <p>With caching enabled, the function call to <code>$smarty-&gt;display('index.tpl')</code> will render the template as usual, but also saves a copy of its output. On the next call to <code>$smarty-&gt;display('index.tpl')</code>, the cached copy will be used instead of rendering the template again.</p> <p>Note</p> <p>By default, Smarty saved its caches as files in a dir called <code>cache</code> relative to the current  directory. The default directory can be changed using <code>$smarty-&gt;setCacheDir('/some/cache/dir');</code>  The files are named similar to the template name. Although they end in the <code>.php</code> extension, they are not intended to be directly executable. Do not edit these files!</p>"},{"location":"api/caching/basics/#cache-lifetime","title":"Cache lifetime","text":"<p>Each cached page has a limited lifetime. The default value is 3600 seconds, or one hour. After that time expires, the cache is regenerated.</p> <p>You can change the lifetime as follows: <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n$smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_CURRENT); \n// or $smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_SAVED);\n\n// set the cache_lifetime to 5 minutes\n$smarty-&gt;setCacheLifetime(5 * 60);\n</code></pre></p> <p>Setting caching to a value of <code>\\Smarty\\Smarty::CACHING_LIFETIME_CURRENT</code> tells Smarty to use the current lifetime to determine if the cache has expired.</p> <p>A value of <code>\\Smarty\\Smarty::CACHING\\_LIFETIME\\_SAVED</code> tells Smarty to use the lifetime value at the time the cache was generated. This way you can set the just before rendering a template to have granular control over when that particular cache expires.</p> <p>An example: <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n// retain current cache lifetime for each specific display call\n$smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_SAVED);\n\n// set the cache_lifetime for index.tpl to 5 minutes\n$smarty-&gt;setCacheLifetime(300);\n$smarty-&gt;display('index.tpl');\n\n// set the cache_lifetime for home.tpl to 1 hour\n$smarty-&gt;setCacheLifetime(3600);\n$smarty-&gt;display('home.tpl');\n\n// NOTE: the following $cache_lifetime setting will not work when $caching\n// is set to Smarty::CACHING_LIFETIME_SAVED.\n// The cache lifetime for home.tpl has already been set\n// to 1 hour, and will no longer respect the value of $cache_lifetime.\n// The home.tpl cache will still expire after 1 hour.\n$smarty-&gt;setCacheLifetime(30); // 30 seconds\n$smarty-&gt;display('home.tpl');\n</code></pre></p>"},{"location":"api/caching/basics/#compile-check","title":"Compile check","text":"<p>By default, every template file and config file that is involved with the cache file is checked for modification. If any of the files have been modified since the cache was generated, the cache is immediately regenerated.</p> <p>This is a computational overhead, so for optimum performance, disable this on a production environment:</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n$smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_CURRENT);\n$smarty-&gt;setCompileCheck(Smarty::COMPILECHECK_OFF);\n\n$smarty-&gt;display('index.tpl');\n</code></pre>"},{"location":"api/caching/basics/#checking-if-a-template-is-cached","title":"Checking if a template is cached","text":"<p>Smarty's `isCached() method can be used to test if a template has a valid cache or not. If you have a cached template that requires something like a database fetch, you can use this to skip that process.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n$smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_CURRENT);\n\nif (!$smarty-&gt;isCached('index.tpl')) {\n    // No cache available, do variable assignments here.\n    $smarty-&gt;assign('data', do_expensive_database_calls());\n}\n\n$smarty-&gt;display('index.tpl');\n</code></pre>"},{"location":"api/caching/basics/#nocache-blocks","title":"Nocache-blocks","text":"<p>You can keep parts of a page dynamic (disable caching) with the <code>{nocache}{/nocache}</code> block function,  or by using the <code>nocache</code> parameter for most template functions.</p> <p>Let's say the whole page can be cached except for a banner that is displayed down the side of the page. By using a <code>{nocache}{/nocache}</code> block for the banner, you can keep this element dynamic within the cached content.</p>"},{"location":"api/caching/basics/#clearing-the-cache","title":"Clearing the cache","text":"<p>You can clear all the cache files with Smarty's <code>clearAllCache()</code> method, or individual cache files with the <code>clearCache()</code> method.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n$smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_CURRENT);\n\n// clear only cache for index.tpl\n$smarty-&gt;clearCache('index.tpl');\n\n// clear out all cache files\n$smarty-&gt;clearAllCache();\n\n// clear out all cache files older than one hour\n$smarty-&gt;clearAllCache(3600);\n\n// or, clear all expired caches\n$smarty-&gt;clearAllCache(Smarty::CLEAR_EXPIRED);\n</code></pre>"},{"location":"api/caching/custom-storage-layers/","title":"Custom cache storage layers","text":"<p>As an alternative to using the default file-based caching mechanism, you can specify a custom cache implementation that will be used to read, write and clear cached files.</p> <p>With a custom cache implementation you could replace the slow filesystem by a faster storage engine, centralize the cache to be accessible to multiple servers.</p> <p>Smarty requires implementations to extend <code>\\Smarty\\Cacheresource\\Base</code>, but encourages you to either extend  <code>\\Smarty\\Cacheresource\\Custom</code> or <code>\\Smarty\\Cacheresource\\KeyValueStore</code>.</p> <ul> <li><code>\\Smarty\\Cacheresource\\Custom</code> is a simple API directing all read, write, clear calls to your implementation. This API allows you to store wherever and however you deem fit. </li> <li><code>\\Smarty\\Cacheresource\\KeyValueStore</code> allows you to turn any  KeyValue-Store (like APC or Memcache) into a full-featured CacheResource implementation. Everything around deep cache-groups like \"a|b|c\" is being handled for you in a way that guarantees clearing the cache-group \"a\" will clear all nested groups  as well - even though KeyValue-Stores don't allow this kind of hierarchy by nature.</li> </ul> <p>Custom CacheResources must be registered on runtime with <code>Smarty\\Smarty::setCacheResource()</code>:</p> <pre><code>&lt;?php\n\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n$smarty-&gt;setCacheResource(new My_CacheResource_Mysql());\n</code></pre>"},{"location":"api/caching/multiple-caches-per-template/","title":"Multiple caches per template","text":""},{"location":"api/caching/multiple-caches-per-template/#introduction","title":"Introduction","text":"<p>You can have multiple cache files for a single call to <code>display()</code> or <code>fetch()</code>. </p> <p>Let's say that a call to <code>$smarty-&gt;display('index.tpl')</code> may have several different output contents depending on some condition, and you want separate caches for each one. You can do this by passing a <code>$cache_id</code> as the second parameter to the function call:</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n$smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_CURRENT);\n\n$my_cache_id = (int) $_GET['article_id'];\n\n$smarty-&gt;display('index.tpl', $my_cache_id);\n</code></pre> <p>Above, we are passing the variable <code>$my_cache_id</code> to <code>display()</code> as the <code>$cache_id</code>. For each unique value of <code>$my_cache_id</code>, a separate cache will be generated for <code>index.tpl</code>. In this example, <code>article_id</code> was passed in the URL and is used as the <code>$cache_id</code>.</p> <p>Note</p> <p>Be very cautious when passing values from a client (web browser) into Smarty or any PHP application. Although the above example of using the article_id from the URL looks handy, it could have bad consequences. The <code>$cache_id</code> is used to create a directory on the file system, so if the user decided to write a script that sends random article_id's at a rapid pace, this could possibly cause problems at the server level. Be sure to sanitize any data passed in before using it. In this example, you might want to check if the article_id is a valid ID in the database.</p> <p>Be sure to pass the same <code>$cache_id</code> as the second parameter to <code>isCached()</code> and <code>clearCache()</code>.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n$smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_CURRENT);\n\n$my_cache_id = (int) $_GET['article_id'];\n\nif (!$smarty-&gt;isCached('index.tpl', $my_cache_id)) {\n    // ...\n}\n\n$smarty-&gt;display('index.tpl', $my_cache_id);\n</code></pre>"},{"location":"api/caching/multiple-caches-per-template/#clearing-specific-caches","title":"Clearing specific caches","text":"<p>You can clear all caches for a particular <code>$cache_id</code> by passing NULL as the first parameter to <code>clearCache()</code>.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n$smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_CURRENT);\n\n// clear all caches with \"sports\" as the $cache_id\n$smarty-&gt;clearCache(null, 'sports');\n\n$smarty-&gt;display('index.tpl', 'sports');\n</code></pre> <p>In this manner, you can \"group\" your caches together by giving them the same <code>$cache_id</code>.</p>"},{"location":"api/caching/multiple-caches-per-template/#advanced-cache-grouping","title":"Advanced cache grouping","text":"<p>You can do more elaborate grouping by setting up <code>$cache_id</code> groups. This is accomplished by separating each sub-group with a vertical bar <code>|</code> in the <code>$cache_id</code> value. You can have as many sub-groups as you like.</p> <ul> <li> <p>You can think of cache groups like a directory hierarchy. For     instance, a cache group of <code>'a|b|c'</code> could be thought of as the     directory structure <code>'/a/b/c/'</code>.</p> </li> <li> <p><code>clearCache(null, 'a|b|c')</code> would be like removing the files     <code>'/a/b/c/*'</code>. <code>clearCache(null, 'a|b')</code> would be like removing the     files <code>'/a/b/*'</code>.</p> </li> <li> <p>If you specify a template name such as     <code>clearCache('foo.tpl', 'a|b|c')</code> then Smarty will attempt to remove     <code>'/a/b/c/foo.tpl'</code>.</p> </li> <li> <p>You CANNOT remove a specified template name under multiple cache     groups such as <code>'/a/b/*/foo.tpl'</code>, the cache grouping works     left-to-right ONLY. You will need to group your templates under a     single cache group hierarchy to be able to clear them as a group.</p> </li> </ul> <p>Cache grouping should not be confused with your template directory hierarchy, the cache grouping has no knowledge of how your templates are structured. So for example, if you have a template structure like <code>themes/blue/index.tpl</code> and you want to be able to clear all the cache files for the \"blue\" theme, you will need to create a cache group structure that mimics your template file structure, such as <code>display('themes/blue/index.tpl', 'themes|blue')</code>, then clear them with <code>clearCache(null, 'themes|blue')</code>.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n$smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_CURRENT);\n\n// clear all caches with 'sports|basketball' as the first two cache_id groups\n$smarty-&gt;clearCache(null, 'sports|basketball');\n\n// clear all caches with \"sports\" as the first cache_id group. This would\n// include \"sports|basketball\", or \"sports|(anything)|(anything)|(anything)|...\"\n$smarty-&gt;clearCache(null, 'sports');\n\n// clear the foo.tpl cache file with \"sports|basketball\" as the cache_id\n$smarty-&gt;clearCache('foo.tpl', 'sports|basketball');\n\n$smarty-&gt;display('index.tpl', 'sports|basketball');\n</code></pre>"},{"location":"api/extending/block-tags/","title":"Custom block tags","text":"<p>Block tags are tags of the form: <code>{func} .. {/func}</code>. In other words, they enclose a template block and operate on the contents of this block. </p> <p>Block functions take precedence over normal tags of the same name, that is, you cannot have both custom tag <code>{func}</code> and block tag <code>{func}..{/func}</code>.</p> <ul> <li> <p>By default, your function implementation is called twice by Smarty:     once for the opening tag, and once for the closing tag. (See     <code>$repeat</code> below on how to change this.)</p> </li> <li> <p>Only the opening tag of the block has attributes. All attributes are contained in the <code>$params</code>     variable as an associative array. The opening tag attributes are     also accessible to your function when processing the closing tag.</p> </li> <li> <p>The value of the <code>$content</code> variable depends on whether your     function is called for the opening or closing tag. In case of the     opening tag, it will be NULL, and in case of the closing tag it will     be the contents of the template block. Note that the template block     will have already been processed by Smarty, so all you will receive     is the template output, not the template source.</p> </li> <li> <p>The parameter <code>$repeat</code> is passed by reference to the function     implementation and provides a possibility for it to control how many     times the block is displayed. By default <code>$repeat</code> is TRUE at the     first call of the block function (the opening tag) and FALSE on all     subsequent calls to the block function (the block's closing tag).     Each time the function implementation returns with <code>$repeat</code> being     TRUE, the contents between <code>{func}...{/func}</code> are evaluated and the     function implementation is called again with the new block contents     in the parameter <code>$content</code>.</p> </li> </ul> <p>Example: <pre><code>&lt;?php\n\nfunction smarty_block_translate($params, $content, \\Smarty\\Template $template, &amp;$repeat) {\n    // only output on the closing tag\n    if (!$repeat){\n        if (isset($content)) {\n            $lang = $params['lang'];\n            // do some intelligent translation thing here with $content\n            return $translation;\n        }\n    }\n}\n\n$smarty-&gt;registerPlugin(Smarty\\Smarty::PLUGIN_BLOCK, 'translate', 'smarty_block_translate');\n</code></pre></p> <p>This can now be used in your templates as follows:</p> <pre><code>{translate lang='nl'}\n    Quia omnis nulla omnis iusto est id et.\n{/translate}\n</code></pre>"},{"location":"api/extending/extensions/","title":"Creating an extension","text":""},{"location":"api/extending/extensions/#default-extensions","title":"Default extensions","text":"<p>In order to organize your custom tags and modifiers, you can create an Extension. In fact, most of Smarty itself is organized into two extensions:</p> <ul> <li>the core extension, which provides the basic language tags such as <code>{if}</code>, <code>{for}</code> and <code>{assign}</code>. </li> <li>the default extension, which provides all default modifiers such as <code>|escape</code>,  <code>|nl2br</code> and  <code>|number_format</code>    and tags such as <code>{html_image}</code>, <code>{mailto}</code> and <code>{textformat}</code> that are enabled by default, but not necessarily universal.</li> </ul> <p>** Note **</p> <p>There is also the 'BCPluginsAdapter' extension, which does not add any new functionality, but wraps calls to deprecated methods such as <code>Smarty\\Smarty::addPluginsDir()</code> and <code>Smarty\\Smarty::loadFilter()</code>.</p>"},{"location":"api/extending/extensions/#writing-your-own-extension","title":"Writing your own extension","text":"<p>In order to write your own custom extension, you must write a class that implements <code>Smarty\\Extension\\ExtensionInterface</code>. However, it is usually easier to extend <code>Smarty\\Extension\\Base</code> which provides empty implementation for each of the methods required by <code>Smarty\\Extension\\ExtensionInterface</code>. This allows you to only override the method(s) you need.</p> <p>Example: <pre><code>&lt;?php\n\nuse Smarty\\Extension\\Base;\n\nclass MyExtension extends Base {\n\n    public function getModifierCompiler(string $modifier): ?\\Smarty\\Compile\\Modifier\\ModifierCompilerInterface {\n\n        switch ($modifier) {\n            case 'array_escape': return new MyArrayEscapeModifierCompiler();\n            case 'array_unescape': return new MyArrayUnescapeModifierCompiler();\n        }\n\n        return null;\n    }\n}\n</code></pre> Another example, that would allow you to use any valid PHP callable as a modifier in your templates:</p> <pre><code>&lt;?php\n\nuse Smarty\\Extension\\Base;\n\nclass MyCallablePassThroughExtension extends Base {\n\n    public function getModifierCallback(string $modifierName) {\n\n        if (is_callable($modifierName)) {\n            return $modifierName;\n        }\n\n        return null;\n    }\n}\n</code></pre> <p>Writing an extension allows you to add a group of tags, block tags and modifiers to the Smarty language. It also allows you to register pre-, post- and output-filters in a structured way.  The files in <code>src/Extension/</code> in the <code>smarty/smarty</code> dir should give you all the information you need to start writing your own extension.</p>"},{"location":"api/extending/extensions/#registering-an-extension","title":"Registering an extension","text":"<p>When you have written your extension, add it to a Smarty instance as follows:</p> <pre><code>&lt;?php\n\nuse Smarty\\Smarty;\n\n$smarty = new Smarty();\n\n$smarty-&gt;addExtension(new MyCustomExtension());\n</code></pre> <p>This will add <code>MyCustomExtension</code> to the end of the extension list, meaning that you cannot override tags or modifiers from one of Smarty's default extensions.</p> <p>Should you wish to insert your extension at the top of the extension list, or create a very limited Smarty version that only contains the core extension, you can use <code>Smarty\\Smarty::setExtensions()</code> to override the list of extensions.</p> <pre><code>&lt;?php\n\nuse Smarty\\Smarty;\n\n$smarty = new Smarty();\n\n$smarty-&gt;setExtensions([\n    new Smarty\\Extension\\CoreExtension(),\n    new MyCustomExtension(),\n    new Smarty\\Extension\\DefaultExtension(),\n]);\n</code></pre>"},{"location":"api/extending/introduction/","title":"Extending Smarty","text":"<p>By default, Smarty is already very complete and powerful. However, you can unlock its real potential by  extending Smarty.</p> <p>There are various ways to extend Smarty for it to suit your needs. You can create custom tags, block tags and modifiers by registering a method as a plugin.</p> <p>If this becomes too messy, you can group your custom tags, modifiers, and more into an Extension. </p>"},{"location":"api/extending/modifiers/","title":"Custom modifiers","text":"<p>Modifiers are little functions that are applied to a variable in the template before it is displayed or used in some other context. Smarty comes with a bunch of modifiers, but you can  easily add your own.</p> <p>In order to do so, you must write a function that accepts as its first parameter the value on which the modifier is to operate. The rest of the parameters are optional, depending on what kind of operation is to be performed.</p> <p>The modifier has to return the result of its processing.</p> <p>For example: <pre><code>&lt;?php\n\nfunction smarty_modifier_substr($string, $offset, $length) {\n    return substr($string, $offset, $length);\n}\n\n$smarty-&gt;registerPlugin(Smarty\\Smarty::PLUGIN_MODIFIER, 'substr', 'smarty_modifier_substr');\n</code></pre></p> <p>You can now use this in your templates as follows: <pre><code>{$applicationName|substr:0:20}\n</code></pre></p>"},{"location":"api/extending/tags/","title":"Custom tags","text":"<p>You can add your own tags to the Smarty language. </p>"},{"location":"api/extending/tags/#runtime-tags","title":"Runtime tags","text":"<p>Usually, you'll add a runtime tag. Adding a runtime tag requires you to provide a callback function that accepts two parameters:</p> <ul> <li><code>$params</code>:  all attributes from the template as an associative array.</li> <li><code>$template</code>: a <code>Smarty\\Template</code> object representing the template where tag was used.</li> </ul> <p>The output (return value) of the function will be substituted in place of the tag in the template.</p> <p>If the function needs to assign some variables to the template or use some other Smarty-provided functionality, it can use the supplied <code>$template</code> object to do so.</p> <pre><code>&lt;?php\n\nfunction smarty_tag_eightball($params, \\Smarty\\Template $template): string {\n    $answers = [\n        'Yes',\n        'No',\n        'No way',\n        'Outlook not so good',\n        'Ask again soon',\n        'Maybe in your reality'\n    ];\n\n    $result = array_rand($answers);\n    return $answers[$result];\n}\n\n$smarty-&gt;registerPlugin(Smarty\\Smarty::PLUGIN_FUNCTION, 'eightball', 'smarty_tag_eightball');\n</code></pre> <p>Which can now be used in the template as:</p> <pre><code>Question: Will we ever have time travel?\nAnswer: {eightball}.\n</code></pre>"},{"location":"api/extending/tags/#compiler-tags","title":"Compiler tags","text":"<p>Compiler tags are called only during compilation of the template.</p> <p>They are useful for injecting PHP code or time-sensitive static content into the template. If there is both a compiler function and a runtime tag registered under the same name, the compiler function has precedence.</p> <p>The compiler function is passed two parameters: the params array which contains precompiled strings for the attribute values and the Smarty object. It's supposed to return the code to be injected into the compiled template including the surrounding PHP tags.</p> <p>Example: <pre><code>&lt;?php\n\nfunction smarty_compiler_tplheader($params, Smarty $smarty) {\n    return \"&lt;?php\\necho '\" . $smarty-&gt;_current_file . \" compiled at \" . date('Y-m-d H:M'). \"';\\n?&gt;\";\n}\n\n$smarty-&gt;registerPlugin(Smarty\\Smarty::PLUGIN_COMPILER, 'tplheader', 'smarty_compiler_tplheader');\n</code></pre></p> <p>This function can be called from the template as:</p> <pre><code>{* this function gets executed at compile time only *}\n{tplheader}\n</code></pre> <p>The resulting PHP code in the compiled template would be something like this:</p> <pre><code>&lt;?php\necho 'index.tpl compiled at 2023-02-20 20:02';\n</code></pre>"},{"location":"api/filters/output-filters/","title":"Output filters","text":"<p>When a template is rendered, its output can be sent through one or more output filters.</p> <p>Note This differs from <code>prefilters</code> and  <code>postfilters</code> because, pre- and postfilters operate on compiled templates before they are saved to the disk, whereas output filters operate on the template output when it is executed.</p> <p>Smarty will pass the template output as the first argument, and expect the function to return the result of the processing.</p> <p>Output filters can be either added as part of an Extension or  registered as shown below.</p> <p>This will provide a rudimentary protection against spambots: <pre><code>&lt;?php\n\nfunction protect_email($tpl_output, \\Smarty\\Template\\ $template)\n{\n    return preg_replace(\n        '!(\\S+)@([a-zA-Z0-9\\.\\-]+\\.([a-zA-Z]{2,3}|[0-9]{1,3}))!',\n        '$1%40$2', \n        $tpl_output\n    );\n}\n\n// register the outputfilter\n$smarty-&gt;registerFilter(\"output\", \"protect_email\");\n$smarty-&gt;display(\"index.tpl');\n</code></pre></p>"},{"location":"api/filters/postfilters/","title":"Postfilters","text":"<p>Template postfilters are PHP functions that your templates are ran through after they are compiled.</p> <p>Smarty will pass the compiled template code as the first argument, and expect the function to return the result of the processing, which must also be valid PHP code.</p> <p>Prefilters can be either added as part of an Extension or registered as shown below.</p> <pre><code>&lt;?php\n\nfunction add_header_comment($tpl_source, \\Smarty\\Template\\ $template)\n{\n    return \"&lt;?php echo \\\"&lt;!-- Created by Smarty! --&gt;\\n\\\"; ?&gt;\\n\".$tpl_source;\n}\n\n// register the postfilter\n$smarty-&gt;registerFilter('post', 'add_header_comment');\n$smarty-&gt;display('index.tpl');\n</code></pre> <p>The postfilter above will make the compiled Smarty template <code>index.tpl</code> look like:</p> <pre><code>&lt;!-- Created by Smarty! --&gt;\n{* rest of template content... *}\n</code></pre>"},{"location":"api/filters/prefilters/","title":"Prefilters","text":"<p>Template prefilters are PHP functions that your templates are ran through before they are compiled. This is good for preprocessing your templates to remove unwanted comments, keeping an eye on what people are putting in their templates, etc.</p> <p>Smarty will pass the template source code as the first argument, and expect the function to return the resulting template source code.</p> <p>Prefilters can be either added as part of an Extension or registered as shown below.</p> <p>This will remove all the html comments in the template source: <pre><code>&lt;?php\n\nfunction remove_dw_comments($tpl_source, \\Smarty\\Template\\ $template)\n{\n    return preg_replace(\"/&lt;!--#.*--&gt;/U\",'',$tpl_source);\n}\n\n// register the prefilter\n$smarty-&gt;registerFilter('pre', 'remove_dw_comments');\n$smarty-&gt;display('index.tpl');\n</code></pre></p>"},{"location":"api/variables/assigning/","title":"Assigning variables","text":"<p>Templates start to become really useful once you know how to use variables.</p>"},{"location":"api/variables/assigning/#basic-assigning","title":"Basic assigning","text":"<p>Let's revisit the example from the basics section. The following script assigns a value to  the 'companyName' variable and renders the template:</p> <pre><code>&lt;?php\n\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n$smarty-&gt;assign('companyName', 'AC &amp; ME Corp.');\n\n$smarty-&gt;display('footer.tpl');\n</code></pre> <p>footer.tpl: <pre><code>&lt;small&gt;Copyright {$companyName|escape}&lt;/small&gt;\n</code></pre></p> <p>Smarty will apply the escape modifier to the value assigned to the variable <code>companyName</code> and replace <code>{$companyName|escape}</code> with the result.</p> <pre><code>&lt;small&gt;Copyright AC &amp;amp; ME Corp.&lt;/small&gt;\n</code></pre> <p>Using <code>$smarty-&gt;assign()</code> is the most common way of assigning data to templates, but there are several other methods.</p>"},{"location":"api/variables/assigning/#appending-data-to-an-existing-variable","title":"Appending data to an existing variable","text":"<p>Using <code>append()</code>, you can add data to an existing variable, usually an array.</p> <p>If you append to a string value, it is converted to an array value and then appended to. You can explicitly pass name/value pairs, or associative arrays containing the name/value pairs. If you pass the optional third parameter of TRUE, the value will be merged with the current array instead of appended.</p> <p>Examples:</p> <pre><code>&lt;?php\n// This is effectively the same as assign()\n$smarty-&gt;append('foo', 'Fred');\n// After this line, foo will now be seen as an array in the template\n$smarty-&gt;append('foo', 'Albert');\n\n$array = [1 =&gt; 'one', 2 =&gt; 'two'];\n$smarty-&gt;append('X', $array);\n$array2 = [3 =&gt; 'three', 4 =&gt; 'four'];\n// The following line will add a second element to the X array\n$smarty-&gt;append('X', $array2);\n\n// passing an associative array\n$smarty-&gt;append(['city' =&gt; 'Lincoln', 'state' =&gt; 'Nebraska']);\n</code></pre>"},{"location":"api/variables/assigning/#assigning-to-template-objects","title":"Assigning to template objects","text":"<p>When you use a template objects, as explained in rendering a template, you can assign data to the template objects directly instead of assigning it to Smarty. This way, you can use different sets of data for different templates.</p> <p>For example: <pre><code>&lt;?php\n\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n$tplBlue = $smarty-&gt;createTemplate('blue.tpl');\n$tplBlue-&gt;assign('name', 'The one');\n$tplBlue-&gt;display();\n\n$tplRed = $smarty-&gt;createTemplate('red.tpl');\n$tplRed-&gt;assign('name', 'Neo');\n$tplRed-&gt;display();\n</code></pre></p>"},{"location":"api/variables/assigning/#using-data-objects","title":"Using data objects","text":"<p>For more complex use cases, Smarty supports the concept of data objects. Data objects are containers to hold data. Data objects can be attached to templates when creating them. This allows for fine-grained re-use of data.</p> <p>For example: <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n// create a data object\n$data = $smarty-&gt;createData();\n\n// assign variable to the data object\n$data-&gt;assign('name', 'Neo');\n\n// create template object which will use variables from the data object\n$tpl = $smarty-&gt;createTemplate('index.tpl', $data);\n\n// display the template\n$tpl-&gt;display();\n</code></pre></p>"},{"location":"api/variables/assigning/#clearing-assigned-data","title":"Clearing assigned data","text":"<p>When re-using templates, you may need to clear data assigned in a previous run. Use <code>clearAllAssign()</code> to  clear the values of all assigned variables on data objects, template objects or the Smarty object.</p> <p>Examples: <pre><code>&lt;?php\n// assigning data to the Smarty object\n$smarty-&gt;assign('Name', 'Fred');\n// ...\n$smarty-&gt;clearAllAssign();\n\n// using a data object\n$data = $smarty-&gt;createData();\n$data-&gt;assign('name', 'Neo');\n// ...\n$data-&gt;clearAllAssign();\n\n// using a template\n$tplBlue = $smarty-&gt;createTemplate('blue.tpl');\n$tplBlue-&gt;assign('name', 'The one');\n// ...\n$tplBlue-&gt;clearAllAssign();\n</code></pre></p> <p>Note that there it's only useful to clear assigned data if you:</p> <ol> <li>repeatedly re-use templates, and</li> <li>the variables used may change on each repetition</li> </ol> <p>If your script simply runs once and then ends, or you always assign the same variables, clearing assigned data  is of no use.</p>"},{"location":"api/variables/config-files/","title":"Loading data from config files","text":"<p>Instead of assigning data to templates from PHP, you can also use a config file.</p>"},{"location":"api/variables/config-files/#example-config-file","title":"Example config file","text":"<p>Config files are best suited to manage template settings from one file. One example is a multi-language application. Instead of writing multiple templates to support different languages,  you can write a single template file and load your language dependent strings from config files.</p> <p>Example <code>lang.en.ini</code>: <pre><code># global variables\npageTitle = \"Main Menu\"\n\n[Customer]\npageTitle = \"Customer Info\"\n\n[Login]\npageTitle = \"Login\"\nfocus = \"username\"\nIntro = \"\"\"This is a value that spans more\n           than one line. you must enclose\n           it in triple quotes.\"\"\"\n</code></pre></p> <p>Values of config file variables can be in quotes, but not necessary. You can use either single or double quotes. If you have a value that spans more than one line, enclose the entire value with triple quotes (\"\"\"). You can put comments into config files by any syntax that is not a valid config file syntax. We recommend using a <code>#</code> (hash) at the beginning of the line.</p> <p>The example config file above has two sections. Section names are enclosed in [brackets]. Section names can be arbitrary strings not containing <code>[</code> or <code>]</code> symbols. The variable at the top is a global variable. Global variables are always loaded from the config file. If a particular section is loaded, then the global variables and the variables from that section are also loaded. If a variable exists both as a global and in a section, the section variable is used.</p>"},{"location":"api/variables/config-files/#loading-a-config-file","title":"Loading a config file","text":"<p>Config files are loaded into templates with the built-in template function <code>{config_load}</code> or by calling <code>configLoad()</code> from PHP:</p> <pre><code>&lt;?php\n$smarty-&gt;configLoad('lang.en.ini');\n</code></pre> <p>Load a specific section with:</p> <pre><code>&lt;?php\n$smarty-&gt;configLoad('lang.en.ini', 'Customer');\n</code></pre> <p>Note that the global section will always be loaded.</p>"},{"location":"api/variables/config-files/#retrieving-config-variables-in-php","title":"Retrieving config variables in PHP","text":""},{"location":"api/variables/config-files/#loading-from-a-resource","title":"Loading from a resource","text":"<p>Config files (or resources) are loaded by the same resource facilities as templates. That means that a config file can also be loaded from a db. See resources for more information.</p>"},{"location":"api/variables/config-files/#config-overwrite","title":"Config overwrite","text":"<p>If you name two variables the same within a section, the last one will be used unless you call: <pre><code>&lt;?php\n$smarty-&gt;setConfigOverwrite(false);\n</code></pre> When config overwrite is disabled, Smarty will create arrays of config file variables when it encounters multiple entries with the same name.</p> <p>See also <code>{config_load}</code>, <code>$default_config_handler_func</code>, <code>getConfigVars()</code>, <code>clearConfig()</code> and <code>configLoad()</code></p>"},{"location":"api/variables/objects/","title":"Objects","text":"<p>Smarty allows access to PHP objects through the templates.</p> <p>Note</p> <p>When you assign/register objects to templates, be sure that all properties and methods accessed from the template are for presentation purposes only. It is very easy to inject application logic through objects, and this leads to poor designs that are difficult to manage. See the Best Practices section of the Smarty website.</p> <p>There are two ways to access them.</p>"},{"location":"api/variables/objects/#assign-the-object","title":"Assign the object","text":"<p>You can assign objects to a template and access them much like any other assigned variable.</p> <p>Example: <pre><code>&lt;?php\n// the object\n\nclass My_Object {\n    public function meth1($params, $smarty_obj) {\n        return 'this is my meth1';\n    }\n}\n\n// We can also assign objects. assign_by_ref when possible.\n$smarty-&gt;assign('myobj', new My_Object());\n\n$smarty-&gt;display('index.tpl');\n</code></pre></p> <p>And here's how to access your object in <code>index.tpl</code>:</p> <pre><code>{$myobj-&gt;meth1('foo',$bar)}\n</code></pre>"},{"location":"api/variables/objects/#register-the-object","title":"Register the object","text":"<p>Registerd objects use a different template syntax. Also, a registered object  can be restricted to certain methods or properties. However, a registered object cannot be looped over or assigned in arrays of objects, etc.</p> <p>If security is enabled, no private methods or functions can be accessed (beginning with '_'). If a method and property of the same name exist, the method will be used.</p> <p>You can restrict the methods and properties that can be accessed by listing them in an array as the third registration parameter.</p> <p>By default, parameters passed to objects through the templates are passed the same way custom tags get them. An associative array is passed as the first parameter, and the smarty object as the second. If you want the parameters passed one at a time for each argument like traditional object parameter passing, set the fourth registration parameter to FALSE.</p> <p>The optional fifth parameter has only effect with <code>format</code> being TRUE and contains a list of methods that should be treated as blocks. That means these methods have a closing tag in the template (<code>{foobar-&gt;meth2}...{/foobar-&gt;meth2}</code>) and the parameters to the methods have the same synopsis as the parameters for <code>block tags</code>: They get the four parameters <code>$params</code>, <code>$content</code>, <code>$smarty</code> and <code>&amp;$repeat</code> and they also behave like block tags.</p> <pre><code>&lt;?php\n// the object\n\nclass My_Object {\n    function meth1($params, $smarty_obj) {\n        return 'this is my meth1';\n    }\n}\n\n$myobj = new My_Object;\n\n// registering the object\n$smarty-&gt;registerObject('foobar', $myobj);\n\n// if we want to restrict access to certain methods or properties, list them\n$smarty-&gt;registerObject('foobar', $myobj, array('meth1','meth2','prop1'));\n\n// if you want to use the traditional object parameter format, pass a boolean of false\n$smarty-&gt;registerObject('foobar', $myobj, null, false);\n\n$smarty-&gt;display('index.tpl');\n</code></pre> <p>And here's how to access your objects in <code>index.tpl</code>:</p> <pre><code>{* access our registered object *}\n{foobar-&gt;meth1 p1='foo' p2=$bar}\n\n{* you can also assign the output *}\n{foobar-&gt;meth1 p1='foo' p2=$bar assign='output'}\nthe output was {$output}\n</code></pre>"},{"location":"api/variables/static-class-methods/","title":"Static Classes","text":"<p>You can directly access static classes. The syntax is roughly the same as in PHP.</p> <p>Note</p> <p>Direct access to PHP classes is not recommended. This ties the underlying application code structure directly to the presentation, and also complicates template syntax. It is recommended to register plugins which insulate templates from PHP classes/objects. Use at your own discretion.</p>"},{"location":"api/variables/static-class-methods/#examples","title":"Examples","text":"<p>class constant BAR <pre><code>{assign var=foo value=myclass::BAR}\n</code></pre></p> <p>method result <pre><code>{assign var=foo value=myclass::method()} \n</code></pre></p> <p>method chaining <pre><code>{assign var=foo value=myclass::method1()-&gt;method2}\n</code></pre></p> <p>property bar of class myclass <pre><code>{assign var=foo value=myclass::$bar} \n</code></pre></p> <p>using Smarty variable bar as class name <pre><code>{assign var=foo value=$bar::method}\n</code></pre></p>"},{"location":"api/variables/streams/","title":"Streams","text":"<p>You can also use streams to call variables. {$foo:bar} will use the foo://bar stream to get the template variable.</p> <p>Using a PHP stream for a template variable resource from within a template.</p> <pre><code>{$foo:bar}\n</code></pre> <p>NB. Support for using streams to call variables is deprecated since Smarty v5.1 and will be removed in a future version. </p> <p>See also <code>Template Resources</code></p>"},{"location":"appendixes/tips/","title":"Tips &amp; Tricks","text":""},{"location":"appendixes/tips/#blank-variable-handling","title":"Blank Variable Handling","text":"<p>There may be times when you want to print a default value for an empty variable instead of printing nothing, such as printing <code>&amp;nbsp;</code> so that html table backgrounds work properly. Many would use an <code>{if}</code> statement to handle this, but there is a shorthand way with Smarty, using the <code>default</code> variable modifier.</p> <p>Note</p> <p>\"Undefined variable\" errors will show an E_NOTICE if not disabled in PHP's <code>error_reporting()</code> level or Smarty's <code>$error_reporting</code> property and a variable had not been assigned to Smarty.</p> <pre><code>    {* the long way *}\n    {if $title eq ''}\n       &amp;nbsp;\n    {else}\n       {$title}\n    {/if}\n\n    {* the short way *}\n    {$title|default:'&amp;nbsp;'}\n</code></pre> <p>See also <code>default</code> modifier and default variable handling.</p>"},{"location":"appendixes/tips/#default-variable-handling","title":"Default Variable Handling","text":"<p>If a variable is used frequently throughout your templates, applying the <code>default</code> modifier every time it is mentioned can get a bit ugly. You can remedy this by assigning the variable its default value with the <code>{assign}</code> function.</p> <pre><code>{* do this somewhere at the top of your template *}\n{assign var='title' value=$title|default:'no title'}\n\n{* if $title was empty, it now contains the value \"no title\" when you use it *}\n{$title}\n</code></pre> <p>See also <code>default</code> modifier and blank variable handling.</p>"},{"location":"appendixes/tips/#passing-variable-title-to-header-template","title":"Passing variable title to header template","text":"<p>When the majority of your templates use the same headers and footers, it is common to split those out into their own templates and <code>{include}</code> them. But what if the header needs to have a different title, depending on what page you are coming from? You can pass the title to the header as an attribute when it is included.</p> <p><code>mainpage.tpl</code> - When the main page is drawn, the title of \"Main Page\" is passed to the <code>header.tpl</code>, and will subsequently be used as the title.</p> <pre><code>{include file='header.tpl' title='Main Page'}\n{* template body goes here *}\n{include file='footer.tpl'}\n</code></pre> <p><code>archives.tpl</code> - When the archives page is drawn, the title will be \"Archives\". Notice in the archive example, we are using a variable from the <code>archives_page.conf</code> file instead of a hard coded variable.</p> <pre><code>{config_load file='archive_page.conf'}\n\n{include file='header.tpl' title=#archivePageTitle#}\n{* template body goes here *}\n{include file='footer.tpl'}\n</code></pre> <p><code>header.tpl</code> - Notice that \"Smarty News\" is printed if the <code>$title</code> variable is not set, using the <code>default</code> variable modifier.</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;{$title|default:'Smarty News'}&lt;/title&gt;\n    &lt;/head&gt;\n&lt;body&gt;\n</code></pre> <p><code>footer.tpl</code></p> <pre><code>    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"appendixes/tips/#dates","title":"Dates","text":"<p>As a rule of thumb, always pass dates to Smarty as timestamps. This allows template designers to use the <code>date_format</code> modifier for full control over date formatting, and also makes it easy to compare dates if necessary.</p> <pre><code>{$startDate|date_format}\n</code></pre> <p>This will output:</p> <pre><code>Jan 4, 2009\n</code></pre> <pre><code>{$startDate|date_format:\"%Y/%m/%d\"}\n</code></pre> <p>This will output:</p> <pre><code>2009/01/04\n</code></pre> <p>Dates can be compared in the template by timestamps with:</p> <pre><code>{if $order_date &lt; $invoice_date}\n   ...do something..\n{/if}\n</code></pre> <p>When using <code>{html_select_date}</code> in a template, the programmer will most likely want to convert the output from the form back into timestamp format. Here is a function to help you with that.</p> <pre><code>&lt;?php\n\n// this assumes your form elements are named\n// startDate_Day, startDate_Month, startDate_Year\n\n$startDate = makeTimeStamp($startDate_Year, $startDate_Month, $startDate_Day);\n\nfunction makeTimeStamp($year='', $month='', $day='')\n{\n   if(empty($year)) {\n       $year = strftime('%Y');\n   }\n   if(empty($month)) {\n       $month = strftime('%m');\n   }\n   if(empty($day)) {\n       $day = strftime('%d');\n   }\n\n   return mktime(0, 0, 0, $month, $day, $year);\n}\n</code></pre> <p>See also <code>{html_select_date}</code>, <code>{html_select_time}</code>, <code>date_format</code> and <code>$smarty.now</code>,</p>"},{"location":"appendixes/tips/#componentized-templates","title":"Componentized Templates","text":"<p>Traditionally, programming templates into your applications goes as follows: First, you accumulate your variables within your PHP application, (maybe with database queries.) Then, you instantiate your Smarty object, <code>assign()</code> the variables and <code>display()</code> the template. So lets say for example we have a stock ticker on our template. We would collect the stock data in our application, then assign these variables in the template and display it. Now wouldn't it be nice if you could add this stock ticker to any application by merely including the template, and not worry about fetching the data up front?</p> <p>You can do this by writing a custom plugin for fetching the content and assigning it to a template variable.</p> <p><code>function.load_ticker.php</code></p> <pre><code>&lt;?php\n\n// setup our function for fetching stock data\nfunction fetch_ticker($symbol)\n{\n   // put logic here that fetches $ticker_info\n   // from some ticker resource\n   return $ticker_info;\n}\n\nfunction smarty_function_load_ticker($params, $smarty)\n{\n   // call the function\n   $ticker_info = fetch_ticker($params['symbol']);\n\n   // assign template variable\n   $smarty-&gt;assign($params['assign'], $ticker_info);\n}\n</code></pre> <p><code>index.tpl</code></p> <pre><code>{load_ticker symbol='SMARTY' assign='ticker'}\n\nStock Name: {$ticker.name} Stock Price: {$ticker.price}\n</code></pre> <p>See also: <code>{include}</code>.</p>"},{"location":"appendixes/tips/#obfuscating-e-mail-addresses","title":"Obfuscating E-mail Addresses","text":"<p>Do you ever wonder how your email address gets on so many spam mailing lists? One way spammers collect email addresses is from web pages. To help combat this problem, you can make your email address show up in scrambled javascript in the HTML source, yet it it will look and work correctly in the browser. This is done with the <code>{mailto}</code> plugin.</p> <pre><code>&lt;div id=\"contact\"&gt;Send inquiries to\n{mailto address=$EmailAddress encode='javascript' subject='Hello'}\n&lt;/div&gt;\n</code></pre> <p>Note</p> <p>This method isn\\'t 100% foolproof. A spammer could conceivably program his e-mail collector to decode these values, but not likely.... hopefully..yet ... wheres that quantum computer :-?.</p> <p>See also <code>escape</code> modifier and <code>{mailto}</code>.</p>"},{"location":"appendixes/troubleshooting/","title":"Troubleshooting","text":""},{"location":"appendixes/troubleshooting/#smartyphp-errors","title":"Smarty/PHP errors","text":"<p>Smarty can catch many errors such as missing tag attributes or malformed variable names. If this happens, you will see an error similar to the following:</p> <pre><code>Warning: Smarty: [in index.tpl line 4]: syntax error: unknown tag - '%blah'\n       in /path/to/smarty/Smarty.class.php on line 1041\n\nFatal error: Smarty: [in index.tpl line 28]: syntax error: missing section name\n       in /path/to/smarty/Smarty.class.php on line 1041\n</code></pre> <p>Smarty shows you the template name, the line number and the error. After that, the error consists of the actual line number in the Smarty class that the error occurred.</p> <p>There are certain errors that Smarty cannot catch, such as missing close tags. These types of errors usually end up in PHP compile-time parsing errors.</p> <p><code>Parse error: parse error in /path/to/smarty/templates_c/index.tpl.php on line 75</code></p> <p>When you encounter a PHP parsing error, the error line number will correspond to the compiled PHP script, NOT the template itself. Usually you can look at the template and spot the syntax error. Here are some common things to look for: missing close tags for <code>{if}{/if}</code> or <code>{section}{/section}</code>,  or syntax of logic within an <code>{if}</code> tag. If you can\\'t find the error, you might have to open the compiled PHP file and go to the line number to figure out where the corresponding error is in the template.</p> <p><pre><code>Warning: Smarty error: unable to read resource: \"index.tpl\" in...\n</code></pre> or <pre><code>Warning: Smarty error: unable to read resource: \"site.conf\" in...\n</code></pre></p> <ul> <li> <p>The <code>$template_dir</code> is incorrect, doesn't     exist or the file <code>index.tpl</code> is not in the <code>templates/</code> directory</p> </li> <li> <p>A <code>{config_load}</code> function is     within a template (or <code>configLoad()</code> has been     called) and either <code>$config_dir</code> is     incorrect, does not exist or <code>site.conf</code> is not in the directory.</p> </li> </ul> <pre><code>Fatal error: Smarty error: the $compile_dir 'templates_c' does not exist,\nor is not a directory...\n</code></pre> <ul> <li>Either the <code>$compile_dir</code>is incorrectly     set, the directory does not exist, or <code>templates_c</code> is a file and     not a directory.</li> </ul> <pre><code>Fatal error: Smarty error: unable to write to $compile_dir '....\n</code></pre> <ul> <li>The <code>$compile_dir</code> is not writable by the     web server. See the bottom of the installing     smarty page for more about permissions.</li> </ul> <pre><code>Fatal error: Smarty error: the $cache_dir 'cache' does not exist,\nor is not a directory. in /..\n</code></pre> <ul> <li>This means that <code>$caching</code> is enabled and     either; the <code>$cache_dir</code> is incorrectly set,     the directory does not exist, or <code>cache/</code> is a file and not a     directory.</li> </ul> <pre><code>Fatal error: Smarty error: unable to write to $cache_dir '/...\n</code></pre> <ul> <li>This means that <code>$caching</code> is enabled and the     <code>$cache_dir</code> is not writable by the web     server. See the bottom of the installing     smarty page for permissions.</li> </ul> <pre><code>Warning: filemtime(): stat failed for /path/to/smarty/cache/3ab50a623e65185c49bf17c63c90cc56070ea85c.one.tpl.php \nin /path/to/smarty/libs/sysplugins/smarty_resource.php\n</code></pre> <ul> <li>This means that your application registered a custom error handler     (using set_error_handler())     which is not respecting the given <code>$errno</code> as it should. If, for     whatever reason, this is the desired behaviour of your custom error     handler, please call     <code>muteExpectedErrors()</code> after you've     registered your custom error handler.</li> </ul> <p>See also debugging.</p>"},{"location":"designers/chapter-debugging-console/","title":"Debugging Console","text":"<p>There is a debugging console included with Smarty. The console informs you of all the included templates, assigned variables and config file variables for the current invocation of the template. A template file named <code>debug.tpl</code> is included with the distribution of Smarty which controls the formatting of the console.</p> <p>Set <code>$debugging</code> to TRUE in Smarty, and if needed set <code>$debug_tpl</code> to the template resource path to <code>debug.tpl</code>. When you load the page, a Javascript console window will pop up and give you the names of all the included templates and assigned variables for the current page.</p> <p>To see the available variables for a particular template, see the <code>{debug}</code> template function. To disable the debugging console, set <code>$debugging</code> to FALSE. You can also temporarily turn on the debugging console by putting <code>SMARTY_DEBUG</code> in the URL if you enable this option with <code>$debugging_ctrl</code>.</p> <p>Note</p> <p>The debugging console does not work when you use the <code>fetch()</code> API, only when using <code>display()</code>. It is a set of javascript statements added to the very bottom of the generated template. If you do not like javascript, you can edit the <code>debug.tpl</code> template to format the output however you like. Debug data is not cached and <code>debug.tpl</code> info is not included in the output of the debug console.</p> <p>Note</p> <p>The load times of each template and config file are in seconds, or fractions thereof.</p> <p>See also troubleshooting.</p>"},{"location":"designers/config-files/","title":"Config Files","text":"<p>Config files are handy for designers to manage global template variables from one file. One example is template colors. Normally if you wanted to change the color scheme of an application, you would have to go through each and every template file and change the colors. With a config file, the colors can be kept in one place, and only one file needs to be updated.</p> <pre><code># global variables\npageTitle = \"Main Menu\"\nbodyBgColor = #000000\ntableBgColor = #000000\nrowBgColor = #00ff00\n\n[Customer]\npageTitle = \"Customer Info\"\n\n[Login]\npageTitle = \"Login\"\nfocus = \"username\"\nIntro = \"\"\"This is a value that spans more\n           than one line. you must enclose\n           it in triple quotes.\"\"\"\n\n# hidden section\n[.Database]\nhost=my.example.com\ndb=ADDRESSBOOK\nuser=php-user\npass=foobar\n</code></pre> <p>Values of config file variables can be in quotes, but not necessary. You can use either single or double quotes. If you have a value that spans more than one line, enclose the entire value with triple quotes (\"\"\"). You can put comments into config files by any syntax that is not a valid config file syntax. We recommend using a <code>#</code> (hash) at the beginning of the line.</p> <p>The example config file above has two sections. Section names are enclosed in [brackets]. Section names can be arbitrary strings not containing <code>[</code> or <code>]</code> symbols. The four variables at the top are global variables, or variables not within a section. These variables are always loaded from the config file. If a particular section is loaded, then the global variables and the variables from that section are also loaded. If a variable exists both as a global and in a section, the section variable is used. If you name two variables the same within a section, the last one will be used unless <code>$config_overwrite</code> is disabled.</p> <p>Config files are loaded into templates with the built-in template function <code>{config_load}</code> or the API <code>configLoad()</code> function.</p> <p>You can hide variables or entire sections by prepending the variable name or section name with a period(.) eg <code>[.hidden]</code>. This is useful if your application reads the config files and gets sensitive data from them that the template engine does not need. If you have third parties doing template editing, you can be certain that they cannot read sensitive data from the config file by loading it into the template.</p> <p>Config files (or resources) are loaded by the same resource facilities as templates. That means that a config file can also be loaded from a db <code>$smarty-&gt;configLoad(\"db:my.conf\")</code>.</p> <p>See also <code>{config_load}</code>, <code>$config_overwrite</code>, <code>$default_config_handler_func</code>, <code>getConfigVars()</code>, <code>clearConfig()</code> and <code>configLoad()</code></p>"},{"location":"designers/language-combining-modifiers/","title":"Combining Modifiers","text":"<p>You can apply any number of modifiers to a variable. They will be applied in the order they are combined, from left to right. They must be separated with a <code>|</code> (pipe) character.</p> <pre><code>&lt;?php\n\n$smarty-&gt;assign('articleTitle', 'Smokers are Productive, but Death Cuts Efficiency.');\n</code></pre> <p>where template is:</p> <pre><code>{$articleTitle}\n{$articleTitle|upper|spacify}\n{$articleTitle|lower|spacify|truncate}\n{$articleTitle|lower|truncate:30|spacify}\n{$articleTitle|lower|spacify|truncate:30:\". . .\"}\n</code></pre> <p>The above example will output:</p> <pre><code>Smokers are Productive, but Death Cuts Efficiency.\nS M O K E R S   A R ....snip....  H   C U T S   E F F I C I E N C Y .\ns m o k e r s   a r ....snip....  b u t   d e a t h   c u t s...\ns m o k e r s   a r e   p r o d u c t i v e ,   b u t . . .\ns m o k e r s   a r e   p. . .\n</code></pre>"},{"location":"designers/language-basic-syntax/","title":"Basic Syntax","text":"<p>A simple Smarty template could look like this: <pre><code>&lt;h1&gt;{$title|escape}&lt;/h1&gt;\n&lt;ul&gt;\n    {foreach $cities as $city}\n        &lt;li&gt;{$city.name|escape} ({$city.population})&lt;/li&gt;\n    {foreachelse}\n        &lt;li&gt;no cities found&lt;/li&gt;        \n    {/foreach}\n&lt;/ul&gt;\n</code></pre></p> <p>All Smarty template tags are enclosed within delimiters. By default these are <code>{</code> and <code>}</code>, but they can be changed.</p> <p>For the examples in this manual, we will assume that you are using the default delimiters. In Smarty, all content outside of delimiters is displayed as static content, or unchanged. When Smarty encounters template tags, it attempts to interpret them, and displays the appropriate output in their place.</p> <p>The basic components of the Smarty syntax are:</p> <ul> <li>Comments</li> <li>Variables</li> <li>Operators</li> <li>Tags</li> <li>Attributes</li> <li>Quotes</li> <li>Escaping</li> </ul>"},{"location":"designers/language-basic-syntax/language-escaping/","title":"Escaping Smarty parsing","text":"<p>It is sometimes desirable or even necessary to have Smarty ignore sections it would otherwise parse. A classic example is embedding Javascript or CSS code in a template. The problem arises as those languages use the { and } characters which are also the default delimiters for Smarty.</p> <p>Note</p> <p>A good practice for avoiding escapement altogether is by separating your Javascript/CSS into their own files and use standard HTML methods to access them. This will also take advantage of browser script caching. When you need to embed Smarty variables/functions into your Javascript/CSS, then the following applies.</p> <p>In Smarty templates, the { and } braces will be ignored so long as they are surrounded by white space. This behavior can be disabled by setting the Smarty class variable <code>$auto_literal</code> to false.</p>"},{"location":"designers/language-basic-syntax/language-escaping/#examples","title":"Examples","text":"<pre><code>&lt;script&gt;\n   // the following braces are ignored by Smarty\n   // since they are surrounded by whitespace\n   function foobar {\n    alert('foobar!');\n   }\n   // this one will need literal escapement\n   {literal}\n    function bazzy {alert('foobar!');}\n   {/literal}\n&lt;/script&gt;\n</code></pre> <p><code>{literal}..{/literal}</code> blocks are used for escaping blocks of template logic. You can also escape the braces individually with <code>{ldelim}</code>, <code>{rdelim}</code> tags or <code>{$smarty.ldelim}</code>,<code>{$smarty.rdelim}</code> variables.</p> <p>Smarty's default delimiters { and } cleanly represent presentational content. However, if another set of delimiters suit your needs better, you can change them with Smarty's <code>setLeftDelimiter()</code> and <code>setRightDelimiter()</code> methods.</p> <p>Note</p> <p>Changing delimiters affects ALL template syntax and escapement. Be sure to clear out cache and compiled files if you decide to change them.</p> <pre><code>&lt;?php\n\n$smarty-&gt;setLeftDelimiter('&lt;!--{');\n$smarty-&gt;setRightDelimiter('}--&gt;');\n\n$smarty-&gt;assign('foo', 'bar');\n$smarty-&gt;assign('name', 'Albert');\n$smarty-&gt;display('example.tpl');\n</code></pre> <p>Where the template is:</p> <pre><code>Welcome &lt;!--{$name}--&gt; to Smarty\n    &lt;script&gt;\n  var foo = &lt;!--{$foo}--&gt;;\n  function dosomething() {\n    alert(\"foo is \" + foo);\n  }\n  dosomething();\n&lt;/script&gt;\n</code></pre>"},{"location":"designers/language-basic-syntax/language-syntax-attributes/","title":"Attributes","text":"<p>Most of the tags take attributes that specify or modify their behavior. Attributes to Smarty functions are much like HTML attributes. Static values don't have to be enclosed in quotes, but it is required for literal strings. Variables with or without modifiers may also be used, and should not be in quotes. You can even use PHP function results, plugin results and complex expressions.</p> <p>Some attributes require boolean values (TRUE or FALSE). These can be specified as <code>true</code> and <code>false</code>. If an attribute has no value assigned it gets the default boolean value of true.</p>"},{"location":"designers/language-basic-syntax/language-syntax-attributes/#examples","title":"Examples","text":"<pre><code>{include file=\"header.tpl\"}\n\n{include file=\"header.tpl\" nocache}  // is equivalent to nocache=true\n\n{include file=\"header.tpl\" attrib_name=\"attrib value\"}\n\n{include file=$includeFile}\n\n{include file=#includeFile# title=\"My Title\"}\n\n{assign var=foo value={counter}}  // plugin result\n\n{assign var=foo value=substr($bar,2,5)}  // PHP function result\n\n{assign var=foo value=$bar|strlen}  // using modifier\n\n{assign var=foo value=$buh+$bar|strlen}  // more complex expression\n\n{html_select_date display_days=true}\n\n{mailto address=\"smarty@example.com\"}\n\n&lt;select name=\"company_id\"&gt;\n  {html_options options=$companies selected=$company_id}\n&lt;/select&gt;\n</code></pre> <p>Note</p> <p>Although Smarty can handle some very complex expressions and syntax, it is a good rule of thumb to keep the template syntax minimal and focused on presentation. If you find your template syntax getting too complex, it may be a good idea to move the bits that do not deal explicitly with presentation to PHP by way of plugins or modifiers.</p>"},{"location":"designers/language-basic-syntax/language-syntax-comments/","title":"Comments","text":"<p>Template comments are surrounded by asterisks, and that is surrounded by the delimiter tags like so:</p>"},{"location":"designers/language-basic-syntax/language-syntax-comments/#examples","title":"Examples","text":"<pre><code>{* this is a comment *}\n</code></pre> <p>Smarty comments are NOT displayed in the final output of the template, unlike <code>&lt;!-- HTML comments --&gt;</code>. These are useful for making internal notes in the templates which no one will see ;-)</p> <pre><code>{* I am a Smarty comment, I don't exist in the compiled output  *}\n&lt;html&gt;\n    &lt;head&gt;\n     &lt;title&gt;{$title}&lt;/title&gt;\n    &lt;/head&gt;\n&lt;body&gt;\n\n    {* another single line smarty comment  *}\n    &lt;!-- HTML comment that is sent to the browser --&gt;\n\n    {* this multiline smarty\n       comment is\n       not sent to browser\n    *}\n\n    {*********************************************************\n    Multi line comment block with credits block\n      @ author:         bg@example.com\n      @ maintainer:     support@example.com\n      @ para:           var that sets block style\n      @ css:            the style output\n    **********************************************************}\n\n    {* The header file with the main logo and stuff  *}\n    {include file='header.tpl'}\n\n\n    {* Dev note:  the $includeFile var is assigned in foo.php script  *}\n    &lt;!-- Displays main content block --&gt;\n    {include file=$includeFile}\n\n    {* this &lt;select&gt; block is redundant *}\n    {*\n    &lt;select name=\"company\"&gt;\n      {html_options options=$vals selected=$selected_id}\n    &lt;/select&gt;\n    *}\n\n    &lt;!-- Show header from affiliate is disabled --&gt;\n    {* $affiliate|upper *}\n\n    {* you cannot nest comments *}\n    {*\n    &lt;select name=\"company\"&gt;\n      {* &lt;option value=\"0\"&gt;-- none -- &lt;/option&gt; *}\n      {html_options options=$vals selected=$selected_id}\n    &lt;/select&gt;\n    *}\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"designers/language-basic-syntax/language-syntax-operators/","title":"Operators","text":""},{"location":"designers/language-basic-syntax/language-syntax-operators/#basic","title":"Basic","text":"<p>Various basic operators can be applied directly to variable values.</p>"},{"location":"designers/language-basic-syntax/language-syntax-operators/#examples","title":"Examples","text":"<pre><code>{$foo + 1}\n\n{$foo * $bar}\n\n{$foo-&gt;bar - $bar[1] * $baz-&gt;foo-&gt;bar() -3 * 7}\n\n{if ($foo + $bar.test % $baz * 134232 + 10 + $b + 10)}\n    ...\n{/if}\n\n{$foo = $foo + $bar}\n</code></pre> <p>Note</p> <p>Although Smarty can handle some very complex expressions and syntax, it is a good rule of thumb to keep the template syntax minimal and focused on presentation. If you find your template syntax getting too complex, it may be a good idea to move the bits that do not deal explicitly with presentation to PHP by way of plugins or modifiers.</p>"},{"location":"designers/language-basic-syntax/language-syntax-operators/#list","title":"List","text":"<p>The following is a list of recognized operators, which must be separated from surrounding elements by spaces. Note that items listed in [brackets] are optional. PHP equivalents are shown where applicable.</p> Operator Alternates Syntax Example Meaning PHP Equivalent == eq $a eq $b equals == != ne, neq $a neq $b not equals != &gt; gt $a gt $b greater than &gt; &lt; lt $a lt $b less than &lt; &gt;= gte, ge $a ge $b greater than or equal &gt;= &lt;= lte, le $a le $b less than or equal &lt;= === $a === 0 check for identity === ! not not $a negation (unary) ! % mod $a mod $b modulo % is [not] div by $a is not div by 4 divisible by $a % $b == 0 is [not] even $a is not even [not] an even number (unary) $a % 2 == 0 is [not] even by $a is not even by $b grouping level [not] even ($a / $b) % 2 == 0 is [not] odd $a is not odd [not] an odd number (unary) $a % 2 != 0 is [not] odd by $a is not odd by $b [not] an odd grouping ($a / $b) % 2 != 0 is in $a is in $b exists in array in_array($a, $b) is [not] in $a is not in $b does not exist in array !in_array($a, $b)"},{"location":"designers/language-basic-syntax/language-syntax-operators/#ternary","title":"Ternary","text":"<p>You can use the <code>?:</code> (or ternary) operator to test one expression and present the value of the second or third expression, based on the result of the test.</p> <p>In other words: <pre><code>{$test ? \"OK\" : \"FAIL\"}\n</code></pre> will result in OK if <code>$test</code> is set to true, and in FAIL otherwise.</p> <p>There is also a shorthand <code>?:</code> operator: <pre><code>{$myVar ?: \"empty\"}\n</code></pre> will result in 'empty' if <code>$myVar</code> is not set or set to something that evaluates to false, such as an empty string. If <code>$myVar</code> is set to something that evaluates to true, the value of <code>$myVar</code> is returned. So, the following will  return 'hello': <pre><code>{$myVar=\"hello\"}\n{$myVar ?: \"empty\"}\n</code></pre></p>"},{"location":"designers/language-basic-syntax/language-syntax-operators/#testing-for-null","title":"Testing for null","text":"<p>If \"something that evaluates to false\" is to broad a test for you, you can use the <code>??</code> (or null coalescing) operator  to trigger only if the tested value is undefined or set to null. <pre><code>{$myVar ?? \"empty\"}\n</code></pre> will result in 'empty' if <code>$myVar</code> is not set or set to null. If <code>$myVar</code> is set to something that evaluates to anything else, the value of <code>$myVar</code> is returned. So, the following will return an empty string (''): <pre><code>{$myVar=\"\"}\n{$myVar ?: \"this is not shown\"}\n</code></pre></p>"},{"location":"designers/language-basic-syntax/language-syntax-quotes/","title":"Embedding Vars in Double Quotes","text":"<ul> <li> <p>Smarty will recognize assigned variables embedded in \"double     quotes\" so long as the variable name contains only numbers, letters     and under_scores. See naming     for more detail.</p> </li> <li> <p>With any other characters, for example a period(.) or     <code>$object-&gt;reference</code>, then the variable must be surrounded by <code>`backticks`</code>.</p> </li> <li> <p>In addition, Smarty does allow embedded Smarty tags in double-quoted     strings. This is useful if you want to include variables with     modifiers, plugin or PHP function results.</p> </li> </ul>"},{"location":"designers/language-basic-syntax/language-syntax-quotes/#examples","title":"Examples","text":"<pre><code>{func var=\"test $foo test\"}              // sees $foo\n{func var=\"test $foo_bar test\"}          // sees $foo_bar\n{func var=\"test `$foo[0]` test\"}         // sees $foo[0]\n{func var=\"test `$foo[bar]` test\"}       // sees $foo[bar]\n{func var=\"test $foo.bar test\"}          // sees $foo (not $foo.bar)\n{func var=\"test `$foo.bar` test\"}        // sees $foo.bar\n{func var=\"test `$foo.bar` test\"|escape} // modifiers outside quotes!\n{func var=\"test {$foo|escape} test\"}     // modifiers inside quotes!\n{func var=\"test {time()} test\"}          // PHP function result\n{func var=\"test {counter} test\"}         // plugin result\n{func var=\"variable foo is {if !$foo}not {/if} defined\"} // Smarty block function\n\n{* will replace $tpl_name with value *}\n{include file=\"subdir/$tpl_name.tpl\"}\n\n{* does NOT replace $tpl_name *}\n{include file='subdir/$tpl_name.tpl'} // vars require double quotes!\n\n{* must have backticks as it contains a dot \".\" *}\n{cycle values=\"one,two,`$smarty.config.myval`\"}\n\n{* must have backticks as it contains a dot \".\" *}\n{include file=\"`$module.contact`.tpl\"}\n\n{* can use variable with dot syntax *}\n{include file=\"`$module.$view`.tpl\"}\n</code></pre> <p>Note</p> <p>Although Smarty can handle some very complex expressions and syntax, it is a good rule of thumb to keep the template syntax minimal and focused on presentation. If you find your template syntax getting too complex, it may be a good idea to move the bits that do not deal explicitly with presentation to PHP by way of plugins or modifiers.</p> <p>See also <code>escape</code>.</p>"},{"location":"designers/language-basic-syntax/language-syntax-tags/","title":"Tags","text":"<p>Every Smarty tag either prints a variable or invokes some sort of function. These are processed and displayed by enclosing the function and its attributes within delimiters like so: <code>{funcname attr1=\"val1\" attr2=\"val2\"}</code>.</p>"},{"location":"designers/language-basic-syntax/language-syntax-tags/#examples","title":"Examples","text":"<pre><code>{config_load file=\"colors.conf\"}\n\n{include file=\"header.tpl\"}\n\n{if $logged_in}\n    Welcome, &lt;span style=\"color:{#fontColor#}\"&gt;{$name}!&lt;/span&gt;\n{else}\n    hi, {$name}\n{/if}\n\n{include file=\"footer.tpl\"}\n</code></pre> <ul> <li> <p>Both built-in functions and custom     functions have the same syntax within     templates.</p> </li> <li> <p>Built-in functions are the inner workings of Smarty, such as     <code>{if}</code>,     <code>{section}</code> and     <code>{strip}</code>. There should be no need to     change or modify them.</p> </li> <li> <p>Custom tags are additional tags implemented via     plugins. They can be modified to your liking, or you can     create new ones. <code>{html_options}</code>     is an example of a custom function.</p> </li> </ul> <p>See also <code>registerPlugin()</code></p>"},{"location":"designers/language-basic-syntax/language-syntax-variables/","title":"Variables","text":"<p>Template variables start with the $dollar sign. They can contain numbers, letters and underscores, much like a PHP variable. You can reference arrays by index numerically or non-numerically. Also reference object properties and methods.</p> <p>Config file variables are an exception to the \\$dollar syntax and are instead referenced with surrounding #hashmarks#, or via the <code>$smarty.config</code> variable.</p>"},{"location":"designers/language-basic-syntax/language-syntax-variables/#examples","title":"Examples","text":"<pre><code>{$foo}        &lt;-- displaying a simple variable (non array/object)\n{$foo[4]}     &lt;-- display the 5th element of a zero-indexed array\n{$foo.bar}    &lt;-- display the \"bar\" key value of an array, similar to PHP $foo['bar']\n{$foo.$bar}   &lt;-- display variable key value of an array, similar to PHP $foo[$bar]\n{$foo-&gt;bar}   &lt;-- display the object property \"bar\"\n{$foo-&gt;bar()} &lt;-- display the return value of object method \"bar\"\n{#foo#}       &lt;-- display the config file variable \"foo\"\n{$smarty.config.foo} &lt;-- synonym for {#foo#}\n{$foo[bar]}   &lt;-- syntax only valid in a section loop, see {section}\n{assign var=foo value='baa'}{$foo} &lt;--  displays \"baa\", see {assign}\n\nMany other combinations are allowed\n\n{$foo.bar.baz}\n{$foo.$bar.$baz}\n{$foo[4].baz}\n{$foo[4].$baz}\n{$foo.bar.baz[4]}\n{$foo-&gt;bar($baz,2,$bar)} &lt;-- passing parameters\n{\"foo\"}       &lt;-- static values are allowed\n\n{* display the server variable \"SERVER_NAME\" ($_SERVER['SERVER_NAME'])*}\n{$smarty.server.SERVER_NAME}\n\nMath and embedding tags:\n\n{$x+$y}                             // will output the sum of x and y.\n{assign var=foo value=$x+$y}        // in attributes \n{$foo[$x+3]}                        // as array index\n{$foo={counter}+3}                  // tags within tags\n{$foo=\"this is message {counter}\"}  // tags within double quoted strings\n\nDefining Arrays:\n\n{assign var=foo value=[1,2,3]}\n{assign var=foo value=['y'=&gt;'yellow','b'=&gt;'blue']}\n{assign var=foo value=[1,[9,8],3]}   // can be nested\n\nShort variable assignment:\n\n{$foo=$bar+2}\n{$foo = strlen($bar)}               // function in assignment\n{$foo = myfunct( ($x+$y)*3 )}       // as function parameter \n{$foo.bar=1}                        // assign to specific array element\n{$foo.bar.baz=1}                    \n{$foo[]=1}                          // appending to an array\n\nSmarty \"dot\" syntax (note: embedded {} are used to address ambiguities):\n\n{$foo.a.b.c}        =&gt;  $foo['a']['b']['c'] \n{$foo.a.$b.c}       =&gt;  $foo['a'][$b]['c']         // with variable index\n{$foo.a.{$b+4}.c}   =&gt;  $foo['a'][$b+4]['c']       // with expression as index\n{$foo.a.{$b.c}}     =&gt;  $foo['a'][$b['c']]         // with nested index\n\nPHP-like syntax, alternative to \"dot\" syntax:\n\n{$foo[1]}             // normal access\n{$foo['bar']}\n{$foo['bar'][1]}\n{$foo[$x+$x]}         // index may contain any expression\n{$foo[$bar[1]]}       // nested index\n{$foo[section_name]}  // smarty {section} access, not array access!\n\nVariable variables:\n\n$foo                     // normal variable\n$foo_{$bar}              // variable name containing other variable \n$foo_{$x+$y}             // variable name containing expressions \n$foo_{$bar}_buh_{$blar}  // variable name with multiple segments\n{$foo_{$x}}              // will output the variable $foo_1 if $x has a value of 1.\n\nObject chaining:\n\n{$object-&gt;method1($x)-&gt;method2($y)}\n</code></pre> <p>Note</p> <p>Although Smarty can handle some very complex expressions and syntax, it is a good rule of thumb to keep the template syntax minimal and focused on presentation. If you find your template syntax getting too complex, it may be a good idea to move the bits that do not deal explicitly with presentation to PHP by way of plugins or modifiers.</p> <p>Request variables such as <code>$_GET</code>, <code>$_SESSION</code>, etc are available via the reserved <code>$smarty</code> variable.</p> <p>See also <code>$smarty</code>, config variables <code>{assign}</code> and <code>assign()</code>.</p>"},{"location":"designers/language-builtin-functions/","title":"Built-in Functions","text":"<p>Smarty comes with several built-in functions. These built-in functions are the integral part of the smarty template engine. They are compiled into corresponding inline PHP code for maximum performance.</p> <p>You cannot create your own custom tags with the same name; and you should not need to modify the built-in functions.</p> <p>A few of these functions have an <code>assign</code> attribute which collects the result the function to a named template variable instead of being output; much like the <code>{assign}</code> function.</p> <ul> <li>{append}</li> <li>{assign} or {$var=...}</li> <li>{block}</li> <li>{call}</li> <li>{capture}</li> <li>{config_load}</li> <li>{debug}</li> <li>{extends}</li> <li>{for}</li> <li>{foreach}, {foreachelse}</li> <li>{function}</li> <li>{if}, {elseif}, {else}</li> <li>{include}</li> <li>{insert}</li> <li>{ldelim}, {rdelim}</li> <li>{literal}</li> <li>{nocache}</li> <li>{section}, {sectionelse}</li> <li>{setfilter}</li> <li>{strip}</li> <li>{while}</li> </ul>"},{"location":"designers/language-builtin-functions/language-function-append/","title":"{append}","text":"<p><code>{append}</code> is used for creating or appending template variable arrays during the execution of a template.</p>"},{"location":"designers/language-builtin-functions/language-function-append/#attributes","title":"Attributes","text":"Attribute Required Description var The name of the variable being assigned value The value being assigned index (optional) The index for the new array element. If not specified the value is append to the end of the array. scope (optional) The scope of the assigned variable: parent, root or global. Defaults to local if omitted."},{"location":"designers/language-builtin-functions/language-function-append/#option-flags","title":"Option Flags","text":"Name Description nocache Assigns the variable with the 'nocache' attribute <p>Note</p> <p>Assignment of variables in-template is essentially placing application logic into the presentation that may be better handled in PHP. Use at your own discretion.</p>"},{"location":"designers/language-builtin-functions/language-function-append/#examples","title":"Examples","text":"<pre><code>{append var='name' value='Bob' index='first'}\n{append var='name' value='Meyer' index='last'}\n// or \n{append 'name' 'Bob' index='first'} {* short-hand *}\n{append 'name' 'Meyer' index='last'} {* short-hand *}\n\nThe first name is {$name.first}.&lt;br&gt;\nThe last name is {$name.last}.\n</code></pre> <p>The above example will output:</p> <pre><code>The first name is Bob.\nThe last name is Meyer.\n</code></pre> <p>See also <code>append()</code> and <code>getTemplateVars()</code>.</p>"},{"location":"designers/language-builtin-functions/language-function-assign/","title":"{assign}, {$var=...}","text":"<p><code>{assign}</code> or <code>{$var=...}</code> is used for assigning template variables during the execution of a template.</p>"},{"location":"designers/language-builtin-functions/language-function-assign/#attributes-of-the-assign-syntax","title":"Attributes of the {assign} syntax","text":"Attribute Name Required Description var The name of the variable being assigned value The value being assigned scope (optional) The scope of the assigned variable: 'parent','root' or 'global'"},{"location":"designers/language-builtin-functions/language-function-assign/#attributes-of-the-var-syntax","title":"Attributes of the {$var=...} syntax","text":"Attribute Name Required Description scope (optional) The scope of the assigned variable: 'parent','root' or 'global'"},{"location":"designers/language-builtin-functions/language-function-assign/#option-flags","title":"Option Flags","text":"Name Description nocache Assigns the variable with the 'nocache' attribute <p>Note</p> <p>Assignment of variables in-template is essentially placing application logic into the presentation that may be better handled in PHP. Use at your own discretion.</p>"},{"location":"designers/language-builtin-functions/language-function-assign/#examples","title":"Examples","text":"<pre><code>{assign var=\"name\" value=\"Bob\"}  {* or *}\n{assign \"name\" \"Bob\"} {* short-hand, or *}\n{$name='Bob'}\n\nThe value of $name is {$name}.\n</code></pre> <p>The above example will output:</p> <pre><code>The value of $name is Bob.\n</code></pre> <p><pre><code>{assign var=\"name\" value=\"Bob\" nocache}  {* or *}\n{assign \"name\" \"Bob\" nocache} {* short-hand, or *}\n{$name='Bob' nocache}\n\nThe value of $name is {$name}.\n</code></pre> The above example will output: <pre><code>The value of $name is Bob.\n</code></pre></p> <pre><code>{assign var=running_total value=$running_total+$some_array[$row].some_value}  {* or *}\n{$running_total=$running_total+$some_array[row].some_value}\n</code></pre> <p>Variables assigned in the included template will be seen in the including template.</p> <pre><code>{include file=\"sub_template.tpl\"}\n\n{* display variable assigned in sub_template *}\n{$foo}&lt;br&gt;\n</code></pre> <p>The template above includes the example <code>sub_template.tpl</code> below:</p> <pre><code>{* foo will be known also in the including template *}\n{assign var=\"foo\" value=\"something\" scope=parent}\n{$foo=\"something\" scope=parent}\n\n{* bar is assigned only local in the including template *}\n{assign var=\"bar\" value=\"value\"} {* or *}\n{$var=\"value\"}\n</code></pre> <p>You can assign a variable to root of the current root tree. The variable is seen by all templates using the same root tree.</p> <pre><code>{assign var=foo value=\"bar\" scope=\"root\"}\n</code></pre> <p>A global variable is seen by all templates.</p> <pre><code>{assign var=foo value=\"bar\" scope=\"global\"} {* or *}\n{assign \"foo\" \"bar\" scope=\"global\"} {* short-hand, or *}\n{$foo=\"bar\" scope=\"global\"}\n</code></pre> <p>For more information on variable scope, please read the page on variable scopes.</p> <p>To access <code>{assign}</code> variables from a php script use <code>getTemplateVars()</code>.  Here's the template that creates the variable <code>$foo</code>.</p> <pre><code>{assign var=\"foo\" value=\"Smarty\"} {* or *}\n{$foo=\"Smarty\"}\n</code></pre> <p>The template variables are only available after/during template execution as in the following script.</p> <pre><code>&lt;?php\n\n// this will output nothing as the template has not been executed\necho $smarty-&gt;getTemplateVars('foo');\n\n// fetch the template to a variable\n$whole_page = $smarty-&gt;fetch('index.tpl');\n\n// this will output 'smarty' as the template has been executed\necho $smarty-&gt;getTemplateVars('foo');\n\n$smarty-&gt;assign('foo','Even smarter');\n\n// this will output 'Even smarter'\necho $smarty-&gt;getTemplateVars('foo');\n</code></pre> <p>The following functions can also optionally assign template variables: <code>{capture}</code>, <code>{include}</code>, <code>{counter}</code>, <code>{cycle}</code>, <code>{eval}</code>, <code>{fetch}</code>, <code>{math}</code> and <code>{textformat}</code>.</p> <p>See also <code>{append}</code>, <code>assign()</code> and <code>getTemplateVars()</code>.</p>"},{"location":"designers/language-builtin-functions/language-function-block/","title":"{block}","text":"<p><code>{block}</code> is used to define a named area of template source for template inheritance. For details see section of Template Inheritance.</p> <p>The <code>{block}</code> template source area of a child template will replace the corresponding areas in the parent template(s).</p> <p>Optionally <code>{block}</code> areas of child and parent templates can be merged into each other. You can append or prepend the parent <code>{block}</code> content by using the <code>append</code> or <code>prepend</code> option flag with the child's <code>{block}</code> definition. With <code>{$smarty.block.parent}</code> the <code>{block}</code> content of the parent template can be inserted at any location of the child <code>{block}</code> content. <code>{$smarty.block.child}</code> inserts the <code>{block}</code> content of the child template at any location of the parent <code>{block}</code>.</p> <p><code>{blocks}'s</code> can be nested.</p>"},{"location":"designers/language-builtin-functions/language-function-block/#attributes","title":"Attributes","text":"Attribute Name Required Description name yes The name of the template source block assign no The name of variable to assign the output of the block to. <p>Note </p> <p>The assign attribute only works on the block that actually gets executed, so you may need  to add it to each child block as well.</p>"},{"location":"designers/language-builtin-functions/language-function-block/#option-flags-in-child-templates-only","title":"Option Flags (in child templates only):","text":"Name Description append The <code>{block}</code> content will be appended to the content of the parent template <code>{block}</code> prepend The <code>{block}</code> content will be prepended to the content of the parent template <code>{block}</code> hide Ignore the block content if no child block of same name is existing. nocache Disables caching of the <code>{block}</code> content"},{"location":"designers/language-builtin-functions/language-function-block/#examples","title":"Examples","text":"<p>parent.tpl</p> <pre><code>    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;{block name=\"title\"}Default Title{/block}&lt;/title&gt;\n        &lt;title&gt;{block \"title\"}Default Title{/block}&lt;/title&gt;  {* short-hand  *}\n      &lt;/head&gt;\n    &lt;/html&gt;\n</code></pre> <p>child.tpl</p> <pre><code>    {extends file=\"parent.tpl\"} \n    {block name=\"title\"}\n    Page Title\n    {/block}\n</code></pre> <p>The result would look like</p> <pre><code>    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;Page Title&lt;/title&gt;\n      &lt;/head&gt;\n    &lt;/html&gt;\n</code></pre> <p>parent.tpl</p> <pre><code>    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;{block name=\"title\"}Title - {/block}&lt;/title&gt;\n      &lt;/head&gt;\n    &lt;/html&gt;\n</code></pre> <p>child.tpl</p> <pre><code>    {extends file=\"parent.tpl\"} \n    {block name=\"title\" append}\n        Page Title\n    {/block}\n</code></pre> <p>The result would look like</p> <pre><code>    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;Title - Page Title&lt;/title&gt;\n      &lt;/head&gt;\n    &lt;/html&gt;\n</code></pre> <p>parent.tpl</p> <pre><code>    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;{block name=\"title\"} is my title{/block}&lt;/title&gt;\n      &lt;/head&gt;\n    &lt;/html&gt;\n</code></pre> <p>child.tpl</p> <pre><code>    {extends file=\"parent.tpl\"} \n    {block name=\"title\" prepend}\n    Page Title\n    {/block}\n</code></pre> <p>The result would look like</p> <pre><code>    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;Page title is my titel&lt;/title&gt;\n      &lt;/head&gt;\n    &lt;/html&gt;\n</code></pre> <p>parent.tpl</p> <pre><code>    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;{block name=\"title\"}The {$smarty.block.child} was inserted here{/block}&lt;/title&gt;\n      &lt;/head&gt;\n    &lt;/html&gt;\n</code></pre> <p>child.tpl</p> <pre><code>    {extends file=\"parent.tpl\"} \n    {block name=\"title\"}\n        Child Title\n    {/block}\n</code></pre> <p>The result would look like</p> <pre><code>    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;The Child Title was inserted here&lt;/title&gt;\n      &lt;/head&gt;\n    &lt;/html&gt;\n</code></pre> <p>parent.tpl</p> <pre><code>    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;{block name=\"title\"}Parent Title{/block}&lt;/title&gt;\n      &lt;/head&gt;\n    &lt;/html&gt;\n</code></pre> <p>child.tpl</p> <pre><code>    {extends file=\"parent.tpl\"} \n    {block name=\"title\"}\n        You will see now - {$smarty.block.parent} - here\n    {/block}\n</code></pre> <p>The result would look like</p> <pre><code>    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;You will see now - Parent Title - here&lt;/title&gt;\n      &lt;/head&gt;\n    &lt;/html&gt;\n</code></pre> <p>See also Template Inheritance, <code>$smarty.block.parent</code>, <code>$smarty.block.child</code>, and <code>{extends}</code></p>"},{"location":"designers/language-builtin-functions/language-function-call/","title":"{call}","text":"<p><code>{call}</code> is used to call a template function defined by the <code>{function}</code> tag just like a plugin function.</p> <p>Note</p> <p>Template functions are defined global. Since the Smarty compiler is a single-pass compiler, The <code>{call}</code> tag must be used to call a template function defined externally from the given template. Otherwise you can directly use the function as <code>{funcname ...}</code> in the template.</p> <ul> <li> <p>The <code>{call}</code> tag must have the <code>name</code> attribute which contains the     name of the template function.</p> </li> <li> <p>Values for variables can be passed to the template function as     attributes.</p> </li> </ul>"},{"location":"designers/language-builtin-functions/language-function-call/#attributes","title":"Attributes","text":"Attribute Name Required Description name Yes The name of the template function assign No The name of the variable that the output of called template function will be assigned to [var ...] No variable to pass local to template function"},{"location":"designers/language-builtin-functions/language-function-call/#option-flags","title":"Option Flags","text":"Name Description nocache Call the template function in nocache mode"},{"location":"designers/language-builtin-functions/language-function-call/#examples","title":"Examples","text":"<pre><code>    {* define the function *}\n    {function name=menu level=0}\n      &lt;ul class=\"level{$level}\"&gt;\n      {foreach $data as $entry}\n        {if is_array($entry)}\n          &lt;li&gt;{$entry@key}&lt;/li&gt;\n          {call name=menu data=$entry level=$level+1}\n        {else}\n          &lt;li&gt;{$entry}&lt;/li&gt;\n        {/if}\n      {/foreach}\n      &lt;/ul&gt;\n    {/function}\n\n    {* create an array to demonstrate *}\n    {$menu = ['item1','item2','item3' =&gt; ['item3-1','item3-2','item3-3' =&gt;\n    ['item3-3-1','item3-3-2']],'item4']}\n\n    {* run the array through the function *}\n    {call name=menu data=$menu}\n    {call menu data=$menu} {* short-hand *}\n</code></pre> <p>Will generate the following output</p> <pre><code>    * item1\n    * item2\n    * item3\n          o item3-1\n          o item3-2\n          o item3-3\n                + item3-3-1\n                + item3-3-2\n    * item4\n</code></pre> <p>See also <code>{function}</code>.</p>"},{"location":"designers/language-builtin-functions/language-function-capture/","title":"{capture}","text":"<p><code>{capture}</code> is used to collect the output of the template between the tags into a variable instead of displaying it. Any content between <code>{capture name='foo'}</code> and <code>{/capture}</code> is collected into the variable specified in the <code>name</code> attribute.</p> <p>The captured content can be used in the template from the variable <code>$smarty.capture.foo</code> where \"foo\" is the value passed in the <code>name</code> attribute. If you do not supply the <code>name</code> attribute, then \"default\" will be used as the name ie <code>$smarty.capture.default</code>.</p> <p><code>{capture}'s</code> can be nested.</p>"},{"location":"designers/language-builtin-functions/language-function-capture/#attributes","title":"Attributes","text":"Attribute Name Required Description name Yes The name of the captured block assign No The variable name where to assign the captured output to append No The name of an array variable where to append the captured output to"},{"location":"designers/language-builtin-functions/language-function-capture/#option-flags","title":"Option Flags","text":"Name Description nocache Disables caching of this captured block"},{"location":"designers/language-builtin-functions/language-function-capture/#examples","title":"Examples","text":"<pre><code>{* we don't want to print a div tag unless content is displayed *}\n{capture name=\"banner\"}\n{capture \"banner\"} {* short-hand *}\n  {include file=\"get_banner.tpl\"}\n{/capture}\n\n{if $smarty.capture.banner ne \"\"}\n&lt;div id=\"banner\"&gt;{$smarty.capture.banner}&lt;/div&gt;\n{/if}\n</code></pre> <p>This example demonstrates the capture function. <pre><code>{capture name=some_content assign=popText}\n{capture some_content assign=popText} {* short-hand *}\nThe server is {$my_server_name|upper} at {$my_server_addr}&lt;br&gt;\nYour ip is {$my_ip}.\n{/capture}\n&lt;a href=\"#\"&gt;{$popText}&lt;/a&gt;\n</code></pre></p> <p>This example also demonstrates how multiple calls of capture can be used to create an array with captured content.</p> <pre><code>{capture append=\"foo\"}hello{/capture}I say just {capture append=\"foo\"}world{/capture}\n{foreach $foo as $text}{$text} {/foreach}\n</code></pre> <p>The above example will output:</p> <pre><code>I say just hello world\n</code></pre> <p>See also <code>$smarty.capture</code>, <code>{eval}</code>, <code>{fetch}</code>, <code>fetch()</code> and <code>{assign}</code>.</p>"},{"location":"designers/language-builtin-functions/language-function-config-load/","title":"{config_load}","text":"<p><code>{config_load}</code> is used for loading config <code>#variables#</code> from a configuration file into the template.</p>"},{"location":"designers/language-builtin-functions/language-function-config-load/#attributes","title":"Attributes","text":"Attribute Name Required Description file Yes The name of the config file to include section No The name of the section to load"},{"location":"designers/language-builtin-functions/language-function-config-load/#examples","title":"Examples","text":"<p>The <code>example.conf</code> file.</p> <pre><code>#this is config file comment\n\n# global variables\npageTitle = \"Main Menu\"\nbodyBgColor = #000000\ntableBgColor = #000000\nrowBgColor = #00ff00\n\n#customer variables section\n[Customer]\npageTitle = \"Customer Info\"\n</code></pre> <p>and the template</p> <pre><code>{config_load file=\"example.conf\"}\n{config_load \"example.conf\"}  {* short-hand *}\n\n&lt;html&gt;\n    &lt;title&gt;{#pageTitle#|default:\"No title\"}&lt;/title&gt;\n    &lt;body bgcolor=\"{#bodyBgColor#}\"&gt;\n        &lt;table border=\"{#tableBorderSize#}\" bgcolor=\"{#tableBgColor#}\"&gt;\n           &lt;tr bgcolor=\"{#rowBgColor#}\"&gt;\n              &lt;td&gt;First&lt;/td&gt;\n              &lt;td&gt;Last&lt;/td&gt;\n              &lt;td&gt;Address&lt;/td&gt;\n           &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Config Files may also contain sections. You can load variables from within a section with the added attribute <code>section</code>. Note that global config variables are always loaded along with section variables, and same-named section variables overwrite the globals.</p> <p>Note</p> <p>Config file sections and the built-in template function called <code>{section}</code> have nothing to do with each other, they just happen to share a common naming convention.</p> <pre><code>{config_load file='example.conf' section='Customer'}\n{config_load 'example.conf' 'Customer'} {* short-hand *}\n\n&lt;html&gt;\n    &lt;title&gt;{#pageTitle#}&lt;/title&gt;\n    &lt;body bgcolor=\"{#bodyBgColor#}\"&gt;\n        &lt;table border=\"{#tableBorderSize#}\" bgcolor=\"{#tableBgColor#}\"&gt;\n           &lt;tr bgcolor=\"{#rowBgColor#}\"&gt;\n              &lt;td&gt;First&lt;/td&gt;\n              &lt;td&gt;Last&lt;/td&gt;\n              &lt;td&gt;Address&lt;/td&gt;\n           &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>See <code>$config_overwrite</code> to create arrays of config file variables.</p> <p>See also the config files page, config variables page, <code>$config_dir</code>, <code>getConfigVars()</code> and <code>configLoad()</code>.</p>"},{"location":"designers/language-builtin-functions/language-function-debug/","title":"{debug}","text":"<p><code>{debug}</code> dumps the debug console to the page. This works regardless of the debug settings in the php script. Since this gets executed at runtime, this is only able to show the assigned variables; not the templates that are in use. However, you can see all the currently available variables within the scope of a template.</p> <p>If caching is enabled and a page is loaded from cache <code>{debug}</code> does show only the variables which assigned for the cached page.</p> <p>In order to see also the variables which have been locally assigned within the template it does make sense to place the <code>{debug}</code> tag at the end of the template.</p> <p>See also the debugging console page.</p>"},{"location":"designers/language-builtin-functions/language-function-extends/","title":"{extends}","text":"<p><code>{extends}</code> tags are used in child templates in template inheritance for extending parent templates. For details see section of Template Inheritance.</p> <ul> <li> <p>The <code>{extends}</code> tag must be on the first line of the template.</p> </li> <li> <p>If a child template extends a parent template with the <code>{extends}</code>     tag it may contain only <code>{block}</code> tags. Any other template content     is ignored.</p> </li> <li> <p>Use the syntax for template resources to extend files     outside the <code>$template_dir</code> directory.</p> </li> </ul>"},{"location":"designers/language-builtin-functions/language-function-extends/#attributes","title":"Attributes","text":"Attribute Required Description file Yes The name of the template file which is extended <p>Note</p> <p>When extending a variable parent like <code>{extends file=$parent_file}</code>, make sure you include <code>$parent_file</code> in the <code>$compile_id</code>. Otherwise, Smarty cannot distinguish between different <code>$parent_file</code>s.</p>"},{"location":"designers/language-builtin-functions/language-function-extends/#examples","title":"Examples","text":"<pre><code>{extends file='parent.tpl'}\n{extends 'parent.tpl'}  {* short-hand *}\n</code></pre> <p>See also Template Inheritance and <code>{block}</code>.</p>"},{"location":"designers/language-builtin-functions/language-function-for/","title":"{for}","text":"<p>The <code>{for}{forelse}</code> tag is used to create simple loops. The following different formats are supported:</p> <ul> <li> <p><code>{for $var=$start to $end}</code> simple loop with step size of 1.</p> </li> <li> <p><code>{for $var=$start to $end step $step}</code> loop with individual step     size.</p> </li> </ul> <p><code>{forelse}</code> is executed when the loop is not iterated.</p>"},{"location":"designers/language-builtin-functions/language-function-for/#attributes","title":"Attributes","text":"Attribute Required Description max No Limit the number of iterations"},{"location":"designers/language-builtin-functions/language-function-for/#option-flags","title":"Option Flags","text":"Name Description nocache Disables caching of the <code>{for}</code> loop"},{"location":"designers/language-builtin-functions/language-function-for/#examples","title":"Examples","text":"<pre><code>&lt;ul&gt;\n    {for $foo=1 to 3}\n        &lt;li&gt;{$foo}&lt;/li&gt;\n    {/for}\n&lt;/ul&gt;\n</code></pre> <p>The above example will output:</p> <pre><code>&lt;ul&gt;\n    &lt;li&gt;1&lt;/li&gt;\n    &lt;li&gt;2&lt;/li&gt;\n    &lt;li&gt;3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <pre><code>&lt;?php\n$smarty-&gt;assign('to',10);\n</code></pre> <pre><code>&lt;ul&gt;\n    {for $foo=3 to $to max=3}\n        &lt;li&gt;{$foo}&lt;/li&gt;\n    {/for}\n&lt;/ul&gt;\n</code></pre> <p>The above example will output:</p> <pre><code>&lt;ul&gt;\n    &lt;li&gt;3&lt;/li&gt;\n    &lt;li&gt;4&lt;/li&gt;\n    &lt;li&gt;5&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <pre><code>&lt;?php\n$smarty-&gt;assign('start',10);\n$smarty-&gt;assign('to',5);\n</code></pre> <pre><code>&lt;ul&gt;\n    {for $foo=$start to $to}\n        &lt;li&gt;{$foo}&lt;/li&gt;\n    {forelse}\n      no iteration\n    {/for}\n&lt;/ul&gt;\n</code></pre> <p>The above example will output:</p> <pre><code>   no iteration\n</code></pre> <p>See also <code>{foreach}</code>, <code>{section}</code> and <code>{while}</code></p>"},{"location":"designers/language-builtin-functions/language-function-foreach/","title":"{foreach},{foreachelse}","text":"<p><code>{foreach}</code> is used for looping over arrays of data. <code>{foreach}</code> has a simpler and cleaner syntax than the <code>{section}</code> loop, and can also loop over associative arrays.</p>"},{"location":"designers/language-builtin-functions/language-function-foreach/#option-flags","title":"Option Flags","text":"Name Description nocache Disables caching of the <code>{foreach}</code> loop"},{"location":"designers/language-builtin-functions/language-function-foreach/#examples","title":"Examples","text":"<pre><code>{foreach $arrayvar as $itemvar}\n  {$itemvar|escape}\n{/foreach}\n\n{foreach $arrayvar as $keyvar=&gt;$itemvar}\n  {$keyvar}: {$itemvar|escape}\n{/foreach}\n</code></pre> <p>Note</p> <p>This foreach syntax does not accept any named attributes. This syntax is new to Smarty 3, however the Smarty 2.x syntax <code>{foreach from=$myarray key=\"mykey\" item=\"myitem\"}</code> is still supported.</p> <ul> <li> <p><code>{foreach}</code> loops can be nested.</p> </li> <li> <p>The <code>array</code> variable, usually an array of values, determines the     number of times <code>{foreach}</code> will loop. You can also pass an integer     for arbitrary loops.</p> </li> <li> <p><code>{foreachelse}</code> is executed when there are no values in the <code>array</code>     variable.</p> </li> <li> <p><code>{foreach}</code> properties are <code>@index</code>,     <code>@iteration</code>,     <code>@first</code>,     <code>@last</code>,     <code>@show</code>,     <code>@total</code>.</p> </li> <li> <p><code>{foreach}</code> constructs are <code>{break}</code>,     <code>{continue}</code>.</p> </li> <li> <p>Instead of specifying the <code>key</code> variable you can access the current     key of the loop item by <code>{$item@key}</code> (see examples below).</p> </li> </ul> <p>Note</p> <p>The <code>$var@property</code> syntax is new to Smarty 3, however when using the Smarty 2 <code>{foreach from=$myarray key=\"mykey\" item=\"myitem\"}</code> style syntax, the <code>$smarty.foreach.name.property</code> syntax is still supported.</p> <p>Note</p> <p>Although you can retrieve the array key with the syntax <code>{foreach $myArray as $myKey =&gt; $myValue}</code>, the key is always available as <code>$myValue@key</code> within the foreach loop.</p> <pre><code>&lt;?php\n$arr = array('red', 'green', 'blue');\n$smarty-&gt;assign('myColors', $arr);\n</code></pre> <p>Template to output <code>$myColors</code> in an un-ordered list</p> <pre><code>&lt;ul&gt;\n    {foreach $myColors as $color}\n        &lt;li&gt;{$color}&lt;/li&gt;\n    {/foreach}\n&lt;/ul&gt;\n</code></pre> <p>The above example will output:</p> <pre><code>&lt;ul&gt;\n    &lt;li&gt;red&lt;/li&gt;\n    &lt;li&gt;green&lt;/li&gt;\n    &lt;li&gt;blue&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <pre><code>&lt;?php\n$people = array('fname' =&gt; 'John', 'lname' =&gt; 'Doe', 'email' =&gt; 'j.doe@example.com');\n$smarty-&gt;assign('myPeople', $people);\n</code></pre> <p>Template to output <code>$myArray</code> as key/value pairs.</p> <pre><code>&lt;ul&gt;\n    {foreach $myPeople as $value}\n       &lt;li&gt;{$value@key}: {$value}&lt;/li&gt;\n    {/foreach}\n&lt;/ul&gt;\n</code></pre> <p>The above example will output:</p> <pre><code>&lt;ul&gt;\n    &lt;li&gt;fname: John&lt;/li&gt;\n    &lt;li&gt;lname: Doe&lt;/li&gt;\n    &lt;li&gt;email: j.doe@example.com&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Assign an array to Smarty, the key contains the key for each looped value.</p> <pre><code>&lt;?php\n $smarty-&gt;assign(\n    'contacts', \n    [\n         ['phone' =&gt; '555-555-1234', 'fax' =&gt; '555-555-5678', 'cell' =&gt; '555-555-0357'],\n         ['phone' =&gt; '800-555-4444', 'fax' =&gt; '800-555-3333', 'cell' =&gt; '800-555-2222'],\n     ]\n );\n</code></pre> <p>The template to output <code>$contact</code>.</p> <pre><code>{* key always available as a property *}\n{foreach $contacts as $contact}\n  {foreach $contact as $value}\n    {$value@key}: {$value}\n  {/foreach}\n{/foreach}\n\n{* accessing key the PHP syntax alternate *}\n{foreach $contacts as $contact}\n  {foreach $contact as $key =&gt; $value}\n    {$key}: {$value}\n  {/foreach}\n{/foreach}\n</code></pre> <p>Either of the above examples will output:</p> <pre><code>  phone: 555-555-1234\n  fax: 555-555-5678\n  cell: 555-555-0357\n  phone: 800-555-4444\n  fax: 800-555-3333\n  cell: 800-555-2222\n</code></pre> <p>A database (PDO) example of looping over search results. This example is looping over a PHP iterator instead of an array().</p> <pre><code>&lt;?php \n  use Smarty\\Smarty;\n\n  $smarty = new Smarty; \n\n  $dsn = 'mysql:host=localhost;dbname=test'; \n  $login = 'test'; \n  $passwd = 'test'; \n\n  // setting PDO to use buffered queries in mysql is \n  // important if you plan on using multiple result cursors \n  // in the template. \n\n  $db = new PDO($dsn, $login, $passwd, array( \n     PDO::MYSQL_ATTR_USE_BUFFERED_QUERY =&gt; true)); \n\n  $res = $db-&gt;prepare(\"select * from users\"); \n  $res-&gt;execute(); \n  $res-&gt;setFetchMode(PDO::FETCH_LAZY); \n\n  // assign to smarty \n  $smarty-&gt;assign('res',$res); \n\n  $smarty-&gt;display('index.tpl');?&gt;\n</code></pre> <pre><code>{foreach $res as $r} \n  {$r.id} \n  {$r.name}\n{foreachelse}\n  .. no results .. \n{/foreach}\n</code></pre> <p>The above is assuming the results contain the columns named <code>id</code> and <code>name</code>.</p> <p>What is the advantage of an iterator vs. looping over a plain old array? With an array, all the results are accumulated into memory before being looped. With an iterator, each result is loaded/released within the loop. This saves processing time and memory, especially for very large result sets.</p>"},{"location":"designers/language-builtin-functions/language-function-foreach/#index","title":"@index","text":"<p><code>index</code> contains the current array index, starting with zero.</p> <pre><code>{* output empty row on the 4th iteration (when index is 3) *}\n&lt;table&gt;\n    {foreach $items as $i}\n      {if $i@index eq 3}\n         {* put empty table row *}\n         &lt;tr&gt;&lt;td&gt;nbsp;&lt;/td&gt;&lt;/tr&gt;\n      {/if}\n      &lt;tr&gt;&lt;td&gt;{$i.label}&lt;/td&gt;&lt;/tr&gt;\n    {/foreach}\n&lt;/table&gt;\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-foreach/#iteration","title":"@iteration","text":"<p><code>iteration</code> contains the current loop iteration and always starts at one, unlike <code>index</code>. It is incremented by one on each iteration.</p> <p>The \"is div by\" operator can be used to detect a specific iteration. Here we bold-face the name every 4th iteration.</p> <pre><code>{foreach $myNames as $name}\n  {if $name@iteration is div by 4}\n    &lt;b&gt;{$name}&lt;/b&gt;\n  {/if}\n  {$name}\n{/foreach}\n</code></pre> <p>The \"is even by\" and \"is odd by\" operators can be used to alternate something every so many iterations. Choosing between even or odd rotates which one starts. Here we switch the font color every 3rd iteration.</p> <pre><code> {foreach $myNames as $name}\n   {if $name@index is even by 3}\n     &lt;span style=\"color: #000\"&gt;{$name}&lt;/span&gt;\n   {else}\n     &lt;span style=\"color: #eee\"&gt;{$name}&lt;/span&gt;\n   {/if}\n {/foreach}\n</code></pre> <p>This will output something similar to this:</p> <pre><code>&lt;span style=\"color: #000\"&gt;...&lt;/span&gt;\n&lt;span style=\"color: #000\"&gt;...&lt;/span&gt;\n&lt;span style=\"color: #000\"&gt;...&lt;/span&gt;\n&lt;span style=\"color: #eee\"&gt;...&lt;/span&gt;\n&lt;span style=\"color: #eee\"&gt;...&lt;/span&gt;\n&lt;span style=\"color: #eee\"&gt;...&lt;/span&gt;\n&lt;span style=\"color: #000\"&gt;...&lt;/span&gt;\n&lt;span style=\"color: #000\"&gt;...&lt;/span&gt;\n&lt;span style=\"color: #000\"&gt;...&lt;/span&gt;\n&lt;span style=\"color: #eee\"&gt;...&lt;/span&gt;\n&lt;span style=\"color: #eee\"&gt;...&lt;/span&gt;\n&lt;span style=\"color: #eee\"&gt;...&lt;/span&gt;\n...\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-foreach/#first","title":"@first","text":"<p><code>first</code> is TRUE if the current <code>{foreach}</code> iteration is the initial one. Here we display a table header row on the first iteration.</p> <pre><code>{* show table header at first iteration *}\n&lt;table&gt;\n    {foreach $items as $i}\n      {if $i@first}\n        &lt;tr&gt;\n          &lt;th&gt;key&lt;/td&gt;\n          &lt;th&gt;name&lt;/td&gt;\n        &lt;/tr&gt;\n      {/if}\n      &lt;tr&gt;\n        &lt;td&gt;{$i@key}&lt;/td&gt;\n        &lt;td&gt;{$i.name}&lt;/td&gt;\n      &lt;/tr&gt;\n    {/foreach}\n&lt;/table&gt;\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-foreach/#last","title":"@last","text":"<p><code>last</code> is set to TRUE if the current <code>{foreach}</code> iteration is the final one. Here we display a horizontal rule on the last iteration.</p> <pre><code>{* Add horizontal rule at end of list *}\n{foreach $items as $item}\n  &lt;a href=\"#{$item.id}\"&gt;{$item.name}&lt;/a&gt;{if $item@last}&lt;hr&gt;{else},{/if}\n{foreachelse}\n  ... no items to loop ...\n{/foreach}\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-foreach/#show","title":"@show","text":"<p>The show <code>show</code> property can be used after the execution of a <code>{foreach}</code> loop to detect if data has been displayed or not. <code>show</code> is a boolean value.</p> <pre><code>&lt;ul&gt;\n    {foreach $myArray as $name}\n        &lt;li&gt;{$name}&lt;/li&gt;\n    {/foreach}\n&lt;/ul&gt;\n{if $name@show} do something here if the array contained data {/if}\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-foreach/#total","title":"@total","text":"<p><code>total</code> contains the number of iterations that this <code>{foreach}</code> will loop. This can be used inside or after the <code>{foreach}</code>.</p> <pre><code>{* show number of rows at end *}\n{foreach $items as $item}\n  {$item.name}&lt;hr/&gt;\n  {if $item@last}\n    &lt;div id=\"total\"&gt;{$item@total} items&lt;/div&gt;\n  {/if}\n{foreachelse}\n ... no items to loop ...\n{/foreach}\n</code></pre> <p>See also <code>{section}</code>, <code>{for}</code> and <code>{while}</code></p>"},{"location":"designers/language-builtin-functions/language-function-foreach/#break","title":"{break}","text":"<p><code>{break}</code> aborts the iteration of the array</p> <pre><code>  {$data = [1,2,3,4,5]}\n  {foreach $data as $value}\n    {if $value == 3}\n      {* abort iterating the array *}\n      {break}\n    {/if}\n    {$value}\n  {/foreach}\n  {*\n    prints: 1 2\n  *}\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-foreach/#continue","title":"{continue}","text":"<p><code>{continue}</code> leaves the current iteration and begins with the next iteration.</p> <pre><code>  {$data = [1,2,3,4,5]}\n  {foreach $data as $value}\n    {if $value == 3}\n      {* skip this iteration *}\n      {continue}\n    {/if}\n    {$value}\n  {/foreach}\n  {*\n    prints: 1 2 4 5\n  *}\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-function/","title":"{function}","text":"<p><code>{function}</code> is used to create functions within a template and call them just like a plugin function. Instead of writing a plugin that generates presentational content, keeping it in the template is often a more manageable choice. It also simplifies data traversal, such as deeply nested menus.</p> <p>Note</p> <p>Template functions are defined global. Since the Smarty compiler is a single-pass compiler, The <code>{call}</code> tag must be used to call a template function defined externally from the given template. Otherwise, you can directly use the function as <code>{funcname ...}</code> in the template.</p>"},{"location":"designers/language-builtin-functions/language-function-function/#attributes","title":"Attributes","text":"Attribute Name Required Description name Yes The name of the template function [var ...] No default variable value to pass local to the template function <ul> <li> <p>The <code>{function}</code> tag must have the <code>name</code> attribute which contains     the name of the template function. A tag with this name can be     used to call the template function.</p> </li> <li> <p>Default values for variables can be passed to the template function     as attributes. Like in PHP function     declarations you can only use scalar values as default. The default     values can be overwritten when the template function is being     called.</p> </li> <li> <p>You can use all variables from the calling template inside the     template function. Changes to variables or new created variables     inside the template function have local scope and are not visible     inside the calling template after the template function is executed.</p> </li> </ul> <p>Note</p> <p>You can pass any number of parameter to the template function when it is called. The parameter variables must not be declared in the <code>{funcname ...}</code> tag unless you what to use default values. Default values must be scalar and can not be variable. Variables must be passed when the template is called.</p>"},{"location":"designers/language-builtin-functions/language-function-function/#examples","title":"Examples","text":"<pre><code>{* define the function *}\n{function name=menu level=0}\n{function menu level=0}          {* short-hand *}\n  &lt;ul class=\"level{$level}\"&gt;\n  {foreach $data as $entry}\n    {if is_array($entry)}\n      &lt;li&gt;{$entry@key}&lt;/li&gt;\n      {menu data=$entry level=$level+1}\n    {else}\n      &lt;li&gt;{$entry}&lt;/li&gt;\n    {/if}\n  {/foreach}\n  &lt;/ul&gt;\n{/function}\n\n{* create an array to demonstrate *}\n{$menu = ['item1','item2','item3' =&gt; ['item3-1','item3-2','item3-3' =&gt;\n['item3-3-1','item3-3-2']],'item4']}\n\n{* run the array through the function *}\n{menu data=$menu}\n</code></pre> <p>Will generate the following output</p> <pre><code>* item1\n* item2\n* item3\n      o item3-1\n      o item3-2\n      o item3-3\n            + item3-3-1\n            + item3-3-2\n* item4\n</code></pre> <p>See also <code>{call}</code></p>"},{"location":"designers/language-builtin-functions/language-function-if/","title":"{if},{elseif},{else}","text":"<p><code>{if}</code> statements in Smarty have much the same flexibility as PHP if statements, with a few added features for the template engine. Every <code>{if}</code> must be paired with a matching <code>{/if}</code>. <code>{else}</code> and <code>{elseif}</code> are also permitted. All operators are recognized, such as ==, ||, or, &amp;&amp;, and, etc and you can use modifiers as functions, such as is_array().</p>"},{"location":"designers/language-builtin-functions/language-function-if/#examples","title":"Examples","text":"<pre><code>{if $name eq 'Fred'}\n    Welcome Sir.\n{elseif $name eq 'Wilma'}\n    Welcome Ma'am.\n{else}\n    Welcome, whatever you are.\n{/if}\n\n{* an example with \"or\" logic *}\n{if $name eq 'Fred' or $name eq 'Wilma'}\n   ...\n{/if}\n\n{* same as above *}\n{if $name == 'Fred' || $name == 'Wilma'}\n   ...\n{/if}\n\n\n{* parenthesis are allowed *}\n{if ( $amount &lt; 0 or $amount &gt; 1000 ) and $volume &gt;= #minVolAmt#}\n   ...\n{/if}\n\n\n{* you can also embed php function calls *}\n{if count($var) gt 0}\n   ...\n{/if}\n\n{* check for array. *}\n{if is_array($foo) }\n   .....\n{/if}\n\n{* check for not null. *}\n{if isset($foo) }\n   .....\n{/if}\n\n\n{* test if values are even or odd *}\n{if $var is even}\n   ...\n{/if}\n{if $var is odd}\n   ...\n{/if}\n{if $var is not odd}\n   ...\n{/if}\n\n\n{* test if var is divisible by 4 *}\n{if $var is div by 4}\n   ...\n{/if}\n\n\n{*\n  test if var is even, grouped by two. i.e.,\n  0=even, 1=even, 2=odd, 3=odd, 4=even, 5=even, etc.\n*}\n{if $var is even by 2}\n   ...\n{/if}\n\n{* 0=even, 1=even, 2=even, 3=odd, 4=odd, 5=odd, etc. *}\n{if $var is even by 3}\n   ...\n{/if}\n\n{if isset($name) &amp;&amp; $name == 'Blog'}\n     {* do something *}\n{elseif $name == $foo}\n    {* do something *}\n{/if}\n\n{if is_array($foo) &amp;&amp; count($foo) &gt; 0}\n    {* do a foreach loop *}\n{/if}\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-include/","title":"{include}","text":"<p><code>{include}</code> tags are used for including other templates in the current template. Any variables available in the current template are also available within the included template.</p>"},{"location":"designers/language-builtin-functions/language-function-include/#attributes","title":"Attributes","text":"Attribute Name Required Description file Yes The name of the template file to include assign No The name of the variable that the output of include will be assigned to cache_lifetime No Enable caching of this subtemplate with an individual cache lifetime compile_id No Compile this subtemplate with an individual compile_id cache_id No Enable caching of this subtemplate with an individual cache_id scope No Define the scope of all in the subtemplate assigned variables: 'parent','root' or 'global' [var ...] No variable to pass local to template <ul> <li> <p>The <code>{include}</code> tag must have the <code>file</code> attribute which contains     the template resource path.</p> </li> <li> <p>Setting the optional <code>assign</code> attribute specifies the template     variable that the output of <code>{include}</code> is assigned to, instead of     being displayed. Similar to <code>{assign}</code>.</p> </li> <li> <p>Variables can be passed to included templates as     attributes. Any variables explicitly     passed to an included template are only available within the scope     of the included file. Attribute variables override current template     variables, in the case when they are named the same.</p> </li> <li> <p>You can use all variables from the including template inside the     included template. But changes to variables or new created variables     inside the included template have local scope and are not visible     inside the including template after the <code>{include}</code> statement. This     default behaviour can be changed for all variables assigned in the     included template by using the scope attribute at the <code>{include}</code>     statement or for individual variables by using the scope attribute     at the <code>{assign}</code> statement. The later     is useful to return values from the included template to the     including template.</p> </li> <li> <p>Use the syntax for template resources to <code>{include}</code>     files outside of the <code>$template_dir</code>     directory.</p> </li> </ul>"},{"location":"designers/language-builtin-functions/language-function-include/#option-flags","title":"Option Flags","text":"Name Description nocache Disables caching of this subtemplate caching Enable caching of this subtemplate inline If set, merge the compile-code of the subtemplate into the compiled calling template"},{"location":"designers/language-builtin-functions/language-function-include/#examples","title":"Examples","text":"<pre><code>&lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;{$title}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    {include file='page_header.tpl'}\n\n    {* body of template goes here, the $tpl_name variable\n       is replaced with a value eg 'contact.tpl'\n    *}\n    {include file=\"$tpl_name.tpl\"}\n\n    {* using shortform file attribute *}\n    {include 'page_footer.tpl'}\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>{include 'links.tpl' title='Newest links' links=$link_array}\n{* body of template goes here *}\n{include 'footer.tpl' foo='bar'}\n</code></pre> <p>The template above includes the example <code>links.tpl</code> below</p> <p><pre><code>&lt;div id=\"box\"&gt;\n    &lt;h3&gt;{$title}&lt;/h3&gt;\n    &lt;ul&gt;\n        {foreach from=$links item=l}\n            .. do stuff  ...\n        {/foreach}\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre> Variables assigned in the included template will be seen in the including template.</p> <pre><code>{include 'sub_template.tpl' scope=parent}\n...\n{* display variables assigned in sub_template *}\n{$foo}&lt;br&gt;\n{$bar}&lt;br&gt;\n...\n</code></pre> <p>The template above includes the example <code>sub_template.tpl</code> below</p> <pre><code>...\n{assign var=foo value='something'}\n{assign var=bar value='value'}\n...\n</code></pre> <p>The included template will not be cached.</p> <pre><code>{include 'sub_template.tpl' nocache}\n...\n</code></pre> <p>In this example included template will be cached with an individual cache lifetime of 500 seconds.</p> <pre><code>{include 'sub_template.tpl' cache_lifetime=500}\n...\n</code></pre> <p>In this example included template will be cached independent of the global caching setting.</p> <pre><code>{include 'sub_template.tpl' caching}\n...\n</code></pre> <p>This example assigns the contents of <code>nav.tpl</code> to the <code>$navbar</code> variable, which is then output at both the top and bottom of the page.</p> <pre><code>&lt;body&gt;\n  {include 'nav.tpl' assign=navbar}\n  {include 'header.tpl' title='Smarty is cool'}\n    {$navbar}\n    {* body of template goes here *}\n    {$navbar}\n  {include 'footer.tpl'}\n&lt;/body&gt;\n</code></pre> <p>This example includes another template relative to the directory of the current template.</p> <pre><code>{include 'template-in-a-template_dir-directory.tpl'}\n{include './template-in-same-directory.tpl'}\n{include '../template-in-parent-directory.tpl'}\n</code></pre> <pre><code>{* absolute filepath *}\n{include file='/usr/local/include/templates/header.tpl'}\n\n{* absolute filepath (same thing) *}\n{include file='file:/usr/local/include/templates/header.tpl'}\n\n{* windows absolute filepath (MUST use \"file:\" prefix) *}\n{include file='file:C:/www/pub/templates/header.tpl'}\n\n{* include from template resource named \"db\" *}\n{include file='db:header.tpl'}\n\n{* include a $variable template - eg $module = 'contacts' *}\n{include file=\"$module.tpl\"}\n\n{* wont work as its single quotes ie no variable substitution *}\n{include file='$module.tpl'}\n\n{* include a multi $variable template - eg amber/links.view.tpl *}\n{include file=\"$style_dir/$module.$view.tpl\"}\n</code></pre> <p>See also template resources and componentized templates.</p>"},{"location":"designers/language-builtin-functions/language-function-ldelim/","title":"{ldelim}, {rdelim}","text":"<p><code>{ldelim}</code> and <code>{rdelim}</code> are used for escaping template delimiters, by default { and }. You can also use <code>{literal}{/literal}</code> to escape blocks of text eg Javascript or CSS. See also the complementary <code>{$smarty.ldelim}</code>.</p> <pre><code>{* this will print literal delimiters out of the template *}\n\n{ldelim}funcname{rdelim} is how functions look in Smarty!\n</code></pre> <p>The above example will output:</p> <pre><code>{funcname} is how functions look in Smarty!\n</code></pre> <p>Another example with some Javascript</p> <pre><code>&lt;script&gt;\nfunction foo() {ldelim}\n    ... code ...\n{rdelim}\n&lt;/script&gt;\n</code></pre> <p>will output</p> <pre><code>&lt;script&gt;\nfunction foo() {\n    .... code ...\n}\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;\n    function myJsFunction(){ldelim}\n        alert(\"The server name\\n{$smarty.server.SERVER_NAME|escape:javascript}\\n{$smarty.server.SERVER_ADDR|escape:javascript}\");\n    {rdelim}\n&lt;/script&gt;\n&lt;a href=\"javascript:myJsFunction()\"&gt;Click here for Server Info&lt;/a&gt;\n</code></pre> <p>See also <code>{literal}</code> and escaping Smarty parsing.</p>"},{"location":"designers/language-builtin-functions/language-function-literal/","title":"{literal}","text":"<p><code>{literal}</code> tags allow a block of data to be taken literally. This is typically used around Javascript or stylesheet blocks where {curly braces} would interfere with the template delimiter syntax. Anything within <code>{literal}{/literal}</code> tags is not interpreted, but displayed as-is. If you need template tags embedded in a <code>{literal}</code> block, consider using <code>{ldelim}{rdelim}</code> to escape the individual delimiters instead.</p> <p>Note</p> <p><code>{literal}{/literal}</code> tags are normally not necessary, as Smarty ignores delimiters that are surrounded by whitespace. Be sure your javascript and CSS curly braces are surrounded by whitespace. This is new behavior to Smarty 3.</p> <pre><code>&lt;script&gt;\n   // the following braces are ignored by Smarty\n   // since they are surrounded by whitespace\n   function myFoo {\n     alert('Foo!');\n   }\n   // this one will need literal escapement\n   {literal}\n     function myBar {alert('Bar!');}\n   {/literal}\n&lt;/script&gt;\n</code></pre> <p>See also <code>{ldelim} {rdelim}</code> and the escaping Smarty parsing page.</p>"},{"location":"designers/language-builtin-functions/language-function-nocache/","title":"{nocache}","text":"<p><code>{nocache}</code> is used to disable caching of a template section. Every <code>{nocache}</code> must be paired with a matching <code>{/nocache}</code>.</p> <p>Note</p> <p>Be sure any variables used within a non-cached section are also assigned from PHP when the page is loaded from the cache.</p> <pre><code>Today's date is\n{nocache}\n{$smarty.now|date_format}\n{/nocache}\n</code></pre> <p>The above code will output the current date on a cached page.</p> <p>See also the caching section.</p>"},{"location":"designers/language-builtin-functions/language-function-section/","title":"{section}, {sectionelse}","text":"<p>A <code>{section}</code> is for looping over sequentially indexed arrays of data, unlike <code>{foreach}</code> which is used to loop over a single associative array. Every <code>{section}</code> tag must be paired with a closing <code>{/section}</code> tag.</p> <p>Note</p> <p>The <code>{foreach}</code> loop can do everything a {section} loop can do, and has a simpler and easier syntax. It is usually preferred over the {section} loop.</p> <p>Note</p> <p>{section} loops cannot loop over associative arrays, they must be numerically indexed, and sequential (0,1,2,...). For associative arrays, use the <code>{foreach}</code> loop.</p>"},{"location":"designers/language-builtin-functions/language-function-section/#attributes","title":"Attributes","text":"Attribute Name Required Description name Yes The name of the section loop Yes Value to determine the number of loop iterations start No The index position that the section will begin looping. If the value is negative, the start position is calculated from the end of the array. For example, if there are seven values in the loop array and start is -2, the start index is 5. Invalid values (values outside of the length of the loop array) are automatically truncated to the closest valid value. Defaults to 0. step No The step value that will be used to traverse the loop array. For example, step=2 will loop on index 0, 2, 4, etc. If step is negative, it will step through the array backwards. Defaults to 1. max No Sets the maximum number of times the section will loop. show No Determines whether to show this section (defaults to true)"},{"location":"designers/language-builtin-functions/language-function-section/#option-flags","title":"Option Flags","text":"Name Description nocache Disables caching of the <code>{section}</code> loop <ul> <li> <p>Required attributes are <code>name</code> and <code>loop</code>.</p> </li> <li> <p>The <code>name</code> of the <code>{section}</code> can be anything you like, made up of     letters, numbers and underscores, like PHP     variables.</p> </li> <li> <p>{section}'s can be nested, and the nested <code>{section}</code> names must be     unique from each other.</p> </li> <li> <p>The <code>loop</code> attribute, usually an array of values, determines the     number of times the <code>{section}</code> will loop. You can also pass an     integer as the loop value.</p> </li> <li> <p>When printing a variable within a <code>{section}</code>, the <code>{section}</code> <code>name</code> must be given next to variable name within [brackets].</p> </li> <li> <p><code>{sectionelse}</code> is executed when there are no values in the loop     variable.</p> </li> <li> <p>A <code>{section}</code> also has its own variables that handle <code>{section}</code>     properties. These properties are accessible as:     <code>{$smarty.section.name.property}</code>     where \"name\" is the attribute <code>name</code>.</p> </li> <li> <p><code>{section}</code> properties are <code>index</code>,     <code>index_prev</code>,     <code>index_next</code>,     <code>iteration</code>,     <code>first</code>,     <code>last</code>,     <code>rownum</code>,     <code>loop</code>, <code>show</code>,     <code>total</code>.</p> </li> </ul> <p><code>assign()</code> an array to Smarty</p>"},{"location":"designers/language-builtin-functions/language-function-section/#examples","title":"Examples","text":"<pre><code>&lt;?php\n$data = [1000, 1001, 1002];\n$smarty-&gt;assign('custid', $data);\n</code></pre> <p>The template that outputs the array</p> <pre><code>{* this example will print out all the values of the $custid array *}\n{section name=customer loop=$custid}\n{section customer $custid} {* short-hand *}\n  id: {$custid[customer]}&lt;br /&gt;\n{/section}\n&lt;hr /&gt;\n{*  print out all the values of the $custid array reversed *}\n{section name=foo loop=$custid step=-1}\n{section foo $custid step=-1} {* short-hand *}\n  {$custid[foo]}&lt;br /&gt;\n{/section}\n</code></pre> <p>The above example will output:</p> <pre><code>id: 1000&lt;br /&gt;\nid: 1001&lt;br /&gt;\nid: 1002&lt;br /&gt;\n&lt;hr /&gt;\nid: 1002&lt;br /&gt;\nid: 1001&lt;br /&gt;\nid: 1000&lt;br /&gt;\n</code></pre> <pre><code>{section name=foo start=10 loop=20 step=2}\n  {$smarty.section.foo.index}\n{/section}\n&lt;hr /&gt;\n{section name=bar loop=21 max=6 step=-2}\n  {$smarty.section.bar.index}\n{/section}\n</code></pre> <p>The above example will output:</p> <pre><code>10 12 14 16 18\n&lt;hr /&gt;\n20 18 16 14 12 10\n</code></pre> <p>The <code>name</code> of the <code>{section}</code> can be anything you like, see PHP variables. It is used to reference the data within the <code>{section}</code>.</p> <pre><code>{section name=anything loop=$myArray}\n  {$myArray[anything].foo}\n  {$name[anything]}\n  {$address[anything].bar}\n{/section}\n</code></pre> <p>This is an example of printing an associative array of data with a <code>{section}</code>. Following is the php script to assign the <code>$contacts</code> array to Smarty.</p> <pre><code>&lt;?php\n$data = [\n      ['name' =&gt; 'John Smith', 'home' =&gt; '555-555-5555',\n            'cell' =&gt; '666-555-5555', 'email' =&gt; 'john@myexample.com'],\n      ['name' =&gt; 'Jack Jones', 'home' =&gt; '777-555-5555',\n            'cell' =&gt; '888-555-5555', 'email' =&gt; 'jack@myexample.com'],\n      ['name' =&gt; 'Jane Munson', 'home' =&gt; '000-555-5555',\n            'cell' =&gt; '123456', 'email' =&gt; 'jane@myexample.com']\n];\n$smarty-&gt;assign('contacts',$data);\n</code></pre> <p>The template to output <code>$contacts</code></p> <pre><code>{section name=customer loop=$contacts}\n&lt;p&gt;\n  name: {$contacts[customer].name}&lt;br /&gt;\n  home: {$contacts[customer].home}&lt;br /&gt;\n  cell: {$contacts[customer].cell}&lt;br /&gt;\n  e-mail: {$contacts[customer].email}\n&lt;/p&gt;\n{/section}\n</code></pre> <p>The above example will output:</p> <pre><code>&lt;p&gt;\n  name: John Smith&lt;br /&gt;\n  home: 555-555-5555&lt;br /&gt;\n  cell: 666-555-5555&lt;br /&gt;\n  e-mail: john@myexample.com\n&lt;/p&gt;\n&lt;p&gt;\n  name: Jack Jones&lt;br /&gt;\n  home phone: 777-555-5555&lt;br /&gt;\n  cell phone: 888-555-5555&lt;br /&gt;\n  e-mail: jack@myexample.com\n&lt;/p&gt;\n&lt;p&gt;\n  name: Jane Munson&lt;br /&gt;\n  home phone: 000-555-5555&lt;br /&gt;\n  cell phone: 123456&lt;br /&gt;\n  e-mail: jane@myexample.com\n&lt;/p&gt;\n</code></pre> <p>This example assumes that <code>$custid</code>, <code>$name</code> and <code>$address</code> are all arrays containing the same number of values. First the php script that assign's the arrays to Smarty.</p> <pre><code>&lt;?php\n\n$id = [1001,1002,1003];\n$smarty-&gt;assign('custid',$id);\n\n$fullnames = ['John Smith','Jack Jones','Jane Munson'];\n$smarty-&gt;assign('name',$fullnames);\n\n$addr = ['253 Abbey road', '417 Mulberry ln', '5605 apple st'];\n$smarty-&gt;assign('address',$addr);\n</code></pre> <p>The <code>loop</code> variable only determines the number of times to loop. You can access ANY variable from the template within the <code>{section}</code>. This is useful for looping multiple arrays. You can pass an array which will determine the loop count by the array size, or you can pass an integer to specify the number of loops.</p> <pre><code>{section name=customer loop=$custid}\n&lt;p&gt;\n  id: {$custid[customer]}&lt;br /&gt;\n  name: {$name[customer]}&lt;br /&gt;\n  address: {$address[customer]}\n&lt;/p&gt;\n{/section}\n</code></pre> <p>The above example will output:</p> <pre><code>&lt;p&gt;\n  id: 1000&lt;br /&gt;\n  name: John Smith&lt;br /&gt;\n  address: 253 Abbey road\n&lt;/p&gt;\n&lt;p&gt;\n  id: 1001&lt;br /&gt;\n  name: Jack Jones&lt;br /&gt;\n  address: 417 Mulberry ln\n&lt;/p&gt;\n&lt;p&gt;\n  id: 1002&lt;br /&gt;\n  name: Jane Munson&lt;br /&gt;\n  address: 5605 apple st\n&lt;/p&gt;\n</code></pre> <p>{section}'s can be nested as deep as you like. With nested {section}'s, you can access complex data structures, such as multidimensional arrays. This is an example <code>.php</code> script that assigns the arrays.</p> <pre><code>&lt;?php\n\n$id = [1001,1002,1003];\n$smarty-&gt;assign('custid',$id);\n\n$fullnames = ['John Smith','Jack Jones','Jane Munson'];\n$smarty-&gt;assign('name',$fullnames);\n\n$addr = ['253 N 45th', '417 Mulberry ln', '5605 apple st'];\n$smarty-&gt;assign('address',$addr);\n\n$types = [\n           [ 'home phone', 'cell phone', 'e-mail'],\n           [ 'home phone', 'web'],\n           [ 'cell phone']\n         ];\n$smarty-&gt;assign('contact_type', $types);\n\n$info = [\n           ['555-555-5555', '666-555-5555', 'john@myexample.com'],\n           [ '123-456-4', 'www.example.com'],\n           [ '0457878']\n        ];\n$smarty-&gt;assign('contact_info', $info);\n</code></pre> <p>In this template, $contact_type[customer] is an array of contact types for the current customer.</p> <pre><code>{section name=customer loop=$custid}\n&lt;hr&gt;\n  id: {$custid[customer]}&lt;br /&gt;\n  name: {$name[customer]}&lt;br /&gt;\n  address: {$address[customer]}&lt;br /&gt;\n  {section name=contact loop=$contact_type[customer]}\n    {$contact_type[customer][contact]}: {$contact_info[customer][contact]}&lt;br /&gt;\n  {/section}\n{/section}\n</code></pre> <p>The above example will output:</p> <pre><code>&lt;hr&gt;\n  id: 1000&lt;br /&gt;\n  name: John Smith&lt;br /&gt;\n  address: 253 N 45th&lt;br /&gt;\n    home phone: 555-555-5555&lt;br /&gt;\n    cell phone: 666-555-5555&lt;br /&gt;\n    e-mail: john@myexample.com&lt;br /&gt;\n&lt;hr&gt;\n  id: 1001&lt;br /&gt;\n  name: Jack Jones&lt;br /&gt;\n  address: 417 Mulberry ln&lt;br /&gt;\n    home phone: 123-456-4&lt;br /&gt;\n    web: www.example.com&lt;br /&gt;\n&lt;hr&gt;\n  id: 1002&lt;br /&gt;\n  name: Jane Munson&lt;br /&gt;\n  address: 5605 apple st&lt;br /&gt;\n    cell phone: 0457878&lt;br /&gt;\n</code></pre> <p>Results of a database search (eg ADODB or PEAR) are assigned to Smarty</p> <pre><code>&lt;?php\n$sql = 'select id, name, home, cell, email from contacts '\n      .\"where name like '$foo%' \";\n$smarty-&gt;assign('contacts', $db-&gt;getAll($sql));\n</code></pre> <p>The template to output the database result in a HTML table</p> <pre><code>&lt;table&gt;\n    &lt;tr&gt;&lt;th&gt;&amp;nbsp;&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Home&lt;/th&gt;&lt;th&gt;Cell&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;/tr&gt;\n    {section name=co loop=$contacts}\n      &lt;tr&gt;\n        &lt;td&gt;&lt;a href=\"view.php?id={$contacts[co].id}\"&gt;view&lt;/a&gt;&lt;/td&gt;\n        &lt;td&gt;{$contacts[co].name}&lt;/td&gt;\n        &lt;td&gt;{$contacts[co].home}&lt;/td&gt;\n        &lt;td&gt;{$contacts[co].cell}&lt;/td&gt;\n        &lt;td&gt;{$contacts[co].email}&lt;/td&gt;\n      &lt;tr&gt;\n    {sectionelse}\n      &lt;tr&gt;&lt;td colspan=\"5\"&gt;No items found&lt;/td&gt;&lt;/tr&gt;\n    {/section}\n&lt;/table&gt;\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-section/#index","title":".index","text":"<p><code>index</code> contains the current array index, starting with zero or the <code>start</code> attribute if given. It increments by one or by the <code>step</code> attribute if given.</p> <p>Note</p> <p>If the <code>step</code> and <code>start</code> properties are not modified, then this works the same as the <code>iteration</code> property, except it starts at zero instead of one.</p> <p>Note</p> <p><code>$custid[customer.index]</code> and <code>$custid[customer]</code> are identical.</p> <pre><code>{section name=customer loop=$custid}\n  {$smarty.section.customer.index} id: {$custid[customer]}&lt;br /&gt;\n{/section}\n</code></pre> <p>The above example will output:</p> <pre><code>0 id: 1000&lt;br /&gt;\n1 id: 1001&lt;br /&gt;\n2 id: 1002&lt;br /&gt;\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-section/#index_prev","title":".index_prev","text":"<p><code>index_prev</code> is the previous loop index. On the first loop, this is set to -1.</p>"},{"location":"designers/language-builtin-functions/language-function-section/#index_next","title":".index_next","text":"<p><code>index_next</code> is the next loop index. On the last loop, this is still one more than the current index, respecting the setting of the <code>step</code> attribute, if given.</p> <pre><code>&lt;?php\n    $data = [1001,1002,1003,1004,1005];\n    $smarty-&gt;assign('rows',$data);\n</code></pre> <p>Template to output the above array in a table</p> <pre><code>{* $rows[row.index] and $rows[row] are identical in meaning *}\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;index&lt;/th&gt;&lt;th&gt;id&lt;/th&gt;\n    &lt;th&gt;index_prev&lt;/th&gt;&lt;th&gt;prev_id&lt;/th&gt;\n    &lt;th&gt;index_next&lt;/th&gt;&lt;th&gt;next_id&lt;/th&gt;\n  &lt;/tr&gt;\n{section name=row loop=$rows}\n  &lt;tr&gt;\n    &lt;td&gt;{$smarty.section.row.index}&lt;/td&gt;&lt;td&gt;{$rows[row]}&lt;/td&gt;\n    &lt;td&gt;{$smarty.section.row.index_prev}&lt;/td&gt;&lt;td&gt;{$rows[row.index_prev]}&lt;/td&gt;\n    &lt;td&gt;{$smarty.section.row.index_next}&lt;/td&gt;&lt;td&gt;{$rows[row.index_next]}&lt;/td&gt;\n  &lt;/tr&gt;\n{/section}\n&lt;/table&gt;\n</code></pre> <p>The above example will output a table containing the following:</p> <pre><code>    index  id    index_prev prev_id index_next next_id\n    0      1001  -1                 1          1002\n    1      1002  0          1001    2          1003\n    2      1003  1          1002    3          1004\n    3      1004  2          1003    4          1005\n    4      1005  3          1004    5\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-section/#iteration","title":".iteration","text":"<p><code>iteration</code> contains the current loop iteration and starts at one.</p> <p>Note</p> <p>This is not affected by the <code>{section}</code> properties <code>start</code>, <code>step</code> and <code>max</code>, unlike the <code>index</code> property. <code>iteration</code> also starts with one instead of zero unlike <code>index</code>. <code>rownum</code> is an alias to <code>iteration</code>, they are identical.</p> <pre><code>&lt;?php\n// array of 3000 to 3015\n$id = range(3000,3015);\n$smarty-&gt;assign('arr', $id);\n</code></pre> <p>Template to output every other element of the <code>$arr</code> array as <code>step=2</code></p> <pre><code>{section name=cu loop=$arr start=5 step=2}\n  iteration={$smarty.section.cu.iteration}\n  index={$smarty.section.cu.index}\n  id={$custid[cu]}&lt;br /&gt;\n{/section}\n</code></pre> <p>The above example will output:</p> <pre><code>iteration=1 index=5 id=3005&lt;br /&gt;\niteration=2 index=7 id=3007&lt;br /&gt;\niteration=3 index=9 id=3009&lt;br /&gt;\niteration=4 index=11 id=3011&lt;br /&gt;\niteration=5 index=13 id=3013&lt;br /&gt;\niteration=6 index=15 id=3015&lt;br /&gt;\n</code></pre> <p>Another example that uses the <code>iteration</code> property to output a table header block every five rows.</p> <pre><code>&lt;table&gt;\n    {section name=co loop=$contacts}\n      {if $smarty.section.co.iteration is div by 5}\n        &lt;tr&gt;&lt;th&gt;&amp;nbsp;&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Home&lt;/th&gt;&lt;th&gt;Cell&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;/tr&gt;\n      {/if}\n      &lt;tr&gt;\n        &lt;td&gt;&lt;a href=\"view.php?id={$contacts[co].id}\"&gt;view&lt;a&gt;&lt;/td&gt;\n        &lt;td&gt;{$contacts[co].name}&lt;/td&gt;\n        &lt;td&gt;{$contacts[co].home}&lt;/td&gt;\n        &lt;td&gt;{$contacts[co].cell}&lt;/td&gt;\n        &lt;td&gt;{$contacts[co].email}&lt;/td&gt;\n      &lt;tr&gt;\n    {/section}\n&lt;/table&gt;\n</code></pre> <p>An example that uses the <code>index</code> property to alternate a text color every third row.</p> <pre><code>&lt;table&gt;\n  {section name=co loop=$contacts}\n    {if $smarty.section.co.index is even by 3}\n      &lt;span style=\"color: #ffffff\"&gt;{$contacts[co].name}&lt;/span&gt;\n    {else}\n      &lt;span style=\"color: #dddddd\"&gt;{$contacts[co].name}&lt;/span&gt;\n    {/if}\n  {/section}\n&lt;/table&gt;\n</code></pre> <p>Note</p> <p>The \"is div by\" syntax is a simpler alternative to the PHP mod operator syntax. The mod operator is allowed: <code>{if $smarty.section.co.iteration % 5 == 1}</code> will work just the same.</p> <p>Note</p> <p>You can also use \"is odd by\" to reverse the alternating.</p>"},{"location":"designers/language-builtin-functions/language-function-section/#first","title":".first","text":"<p><code>first</code> is set to TRUE if the current <code>{section}</code> iteration is the initial one.</p>"},{"location":"designers/language-builtin-functions/language-function-section/#last","title":".last","text":"<p><code>last</code> is set to TRUE if the current section iteration is the final one.</p> <p>This example loops the <code>$customers</code> array, outputs a header block on the first iteration and on the last outputs the footer block. Also uses the <code>total</code> property.</p> <pre><code>{section name=customer loop=$customers}\n  {if $smarty.section.customer.first}\n    &lt;table&gt;\n    &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;customer&lt;/th&gt;&lt;/tr&gt;\n  {/if}\n\n  &lt;tr&gt;\n    &lt;td&gt;{$customers[customer].id}}&lt;/td&gt;\n    &lt;td&gt;{$customers[customer].name}&lt;/td&gt;\n  &lt;/tr&gt;\n\n  {if $smarty.section.customer.last}\n    &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;{$smarty.section.customer.total} customers&lt;/td&gt;&lt;/tr&gt;\n    &lt;/table&gt;\n  {/if}\n{/section}\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-section/#rownum","title":".rownum","text":"<p><code>rownum</code> contains the current loop iteration, starting with one. It is an alias to <code>iteration</code>, they work identically.</p>"},{"location":"designers/language-builtin-functions/language-function-section/#loop","title":".loop","text":"<p><code>loop</code> contains the last index number that this {section} looped. This can be used inside or after the <code>{section}</code>.</p> <pre><code>{section name=customer loop=$custid}\n  {$smarty.section.customer.index} id: {$custid[customer]}&lt;br /&gt;\n{/section}\nThere are {$smarty.section.customer.loop} customers shown above.\n</code></pre> <p>The above example will output:</p> <pre><code>0 id: 1000&lt;br /&gt;\n1 id: 1001&lt;br /&gt;\n2 id: 1002&lt;br /&gt;\nThere are 3 customers shown above.\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-section/#show","title":".show","text":"<p><code>show</code> is used as a parameter to section and is a boolean value. If FALSE, the section will not be displayed. If there is a <code>{sectionelse}</code> present, that will be alternately displayed.</p> <p>Boolean <code>$show_customer_info</code> has been passed from the PHP application, to regulate whether this section shows.</p> <pre><code>{section name=customer loop=$customers show=$show_customer_info}\n  {$smarty.section.customer.rownum} id: {$customers[customer]}&lt;br /&gt;\n{/section}\n\n{if $smarty.section.customer.show}\n  the section was shown.\n{else}\n  the section was not shown.\n{/if}\n</code></pre> <p>The above example will output:</p> <pre><code>1 id: 1000&lt;br /&gt;\n2 id: 1001&lt;br /&gt;\n3 id: 1002&lt;br /&gt;\n\nthe section was shown.\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-section/#total","title":".total","text":"<p><code>total</code> contains the number of iterations that this <code>{section}</code> will loop. This can be used inside or after a <code>{section}</code>.</p> <pre><code>{section name=customer loop=$custid step=2}\n  {$smarty.section.customer.index} id: {$custid[customer]}&lt;br /&gt;\n{/section}\n   There are {$smarty.section.customer.total} customers shown above.\n</code></pre> <p>See also <code>{foreach}</code>, <code>{for}</code>, <code>{while}</code> and <code>$smarty.section</code>.</p>"},{"location":"designers/language-builtin-functions/language-function-setfilter/","title":"{setfilter}","text":"<p>The <code>{setfilter}...{/setfilter}</code> block tag allows the definition of template instance's variable filters.</p> <p>SYNTAX: <code>{setfilter filter1\\|filter2\\|filter3\\....}\\...{/setfilter}</code></p> <p>The filter can be:</p> <ul> <li> <p>A variable filter plugin specified by it's name.</p> </li> <li> <p>A modifier specified by it's name and optional additional     parameter.</p> </li> </ul> <p><code>{setfilter}...{/setfilter}</code> blocks can be nested. The filter definition of inner blocks does replace the definition of the outer block.</p> <p>Template instance filters run in addition to other modifiers and filters. They run in the following order: modifier, default_modifier, $escape_html, registered variable filters, autoloaded variable filters, template instance's variable filters. Everything after default_modifier can be disabled with the <code>nofilter</code> flag.</p> <p>Note</p> <p>The setting of template instance filters does not affect the output of included subtemplates.</p>"},{"location":"designers/language-builtin-functions/language-function-setfilter/#examples","title":"Examples","text":"<pre><code>&lt;script&gt;\n    {setfilter filter1}\n      {$foo} {* filter1 runs on output of $foo *}\n      {setfilter filter2|mod:true}\n        {$bar} {* filter2 and modifier mod runs on output of $bar *}\n      {/setfilter}\n      {$buh} {* filter1 runs on output of $buh *}\n    {/setfilter}\n    {$blar} {* no template instance filter runs on output of $blar}\n&lt;/script&gt;\n</code></pre>"},{"location":"designers/language-builtin-functions/language-function-strip/","title":"{strip}","text":"<p>Many times web designers run into the issue where white space and carriage returns affect the output of the rendered HTML (browser \"features\"), so you must run all your tags together in the template to get the desired results. This usually ends up in unreadable or unmanageable templates.</p> <p>Anything within <code>{strip}{/strip}</code> tags are stripped of the extra spaces or carriage returns at the beginnings and ends of the lines before they are displayed. This way you can keep your templates readable, and not worry about extra white space causing problems.</p> <p>Note</p> <p><code>{strip}{/strip}</code> does not affect the contents of template variables, see the strip modifier instead.</p> <pre><code>{* the following will be all run into one line upon output *}\n{strip}\n    &lt;table&gt;\n     &lt;tr&gt;\n      &lt;td&gt;\n       &lt;a href=\"#\"&gt;\n        This is a test\n       &lt;/a&gt;\n      &lt;/td&gt;\n     &lt;/tr&gt;\n    &lt;/table&gt;\n{/strip}\n</code></pre> <p>The above example will output:</p> <pre><code>&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=\"#\"&gt;This is a test&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n</code></pre> <p>Notice that in the above example, all the lines begin and end with HTML tags. Be aware that all the lines are run together. If you have plain text at the beginning or end of any line, they will be run together, and may not be desired results.</p> <p>See also the <code>strip</code> modifier.</p>"},{"location":"designers/language-builtin-functions/language-function-while/","title":"{while}","text":"<p><code>{while}</code> loops in Smarty have much the same flexibility as PHP while statements, with a few added features for the template engine. Every <code>{while}</code> must be paired with a matching <code>{/while}</code>. All operators are recognized, such as ==, ||, or, &amp;&amp;, and, etc and you can use modifiers as functions, such as is_array().</p>"},{"location":"designers/language-builtin-functions/language-function-while/#examples","title":"Examples","text":"<pre><code>{while $foo &gt; 0}\n  {$foo--}\n{/while}\n</code></pre> <p>The above example will count down the value of $foo until 1 is reached.</p> <p>See also <code>{foreach}</code>, <code>{for}</code> and <code>{section}</code>.</p>"},{"location":"designers/language-custom-functions/","title":"Custom Tags","text":"<p>Smarty comes with several custom plugin functions that you can use in the templates.</p> <ul> <li>{counter}</li> <li>{cycle}</li> <li>{eval}</li> <li>{fetch}</li> <li>{html_checkboxes}</li> <li>{html_image}</li> <li>{html_options}</li> <li>{html_radios}</li> <li>{html_select_date}</li> <li>{html_select_time}</li> <li>{html_table}</li> <li>{mailto}</li> <li>{math}</li> <li>{textformat}</li> </ul>"},{"location":"designers/language-custom-functions/language-function-counter/","title":"{counter}","text":"<p><code>{counter}</code> is used to print out a count. <code>{counter}</code> will remember the count on each iteration. You can adjust the number, the interval and the direction of the count, as well as determine whether to print the value. You can run multiple counters concurrently by supplying a unique name for each one. If you do not supply a name, the name \"default\" will be used.</p>"},{"location":"designers/language-custom-functions/language-function-counter/#attributes","title":"Attributes","text":"Attribute Name Required Description name No The name of the counter start No The initial number to start counting from (defaults to 1) skip No The interval to count by (defaults to 1) direction No The direction to count (up/down) (defaults to 'up') print No Whether or not to print the value (defaults to true) assign No the template variable the output will be assigned to <p>If you supply the <code>assign</code> attribute, the output of the <code>{counter}</code> function will be assigned to this template variable instead of being output to the template.</p>"},{"location":"designers/language-custom-functions/language-function-counter/#examples","title":"Examples","text":"<pre><code>{* initialize the count *}\n{counter start=0 skip=2}&lt;br /&gt;\n{counter}&lt;br /&gt;\n{counter}&lt;br /&gt;\n{counter}&lt;br /&gt;\n</code></pre> <p>this will output:</p> <pre><code>0&lt;br /&gt;\n2&lt;br /&gt;\n4&lt;br /&gt;\n6&lt;br /&gt;\n</code></pre>"},{"location":"designers/language-custom-functions/language-function-cycle/","title":"{cycle}","text":"<p><code>{cycle}</code> is used to alternate a set of values. This makes it easy to for example, alternate between two or more colors in a table, or cycle through an array of values.</p>"},{"location":"designers/language-custom-functions/language-function-cycle/#attributes","title":"Attributes","text":"Attribute Name Required Description name No The name of the cycle values Yes The values to cycle through, either a comma delimited list (see delimiter attribute), or an array of values print No Whether to print the value or not (defaults to true) advance No Whether or not to advance to the next value (defaults to true) delimiter No The delimiter to use in the values attribute (defaults to ',') assign No The template variable the output will be assigned to reset No The cycle will be set to the first value and not advanced (defaults to false) <ul> <li> <p>You can <code>{cycle}</code> through more than one set of values in a template     by supplying a <code>name</code> attribute. Give each <code>{cycle}</code> a unique     <code>name</code>.</p> </li> <li> <p>You can force the current value not to print with the <code>print</code>     attribute set to FALSE. This would be useful for silently skipping a     value.</p> </li> <li> <p>The <code>advance</code> attribute is used to repeat a value. When set to     FALSE, the next call to <code>{cycle}</code> will print the same value.</p> </li> <li> <p>If you supply the <code>assign</code> attribute, the output of the <code>{cycle}</code>     function will be assigned to a template variable instead of being     output to the template.</p> </li> </ul>"},{"location":"designers/language-custom-functions/language-function-cycle/#examples","title":"Examples","text":"<pre><code>{section name=rows loop=$data}\n    &lt;tr class=\"{cycle values=\"odd,even\"}\"&gt;\n       &lt;td&gt;{$data[rows]}&lt;/td&gt;\n    &lt;/tr&gt;\n{/section}\n</code></pre> <p>The above template would output:</p> <pre><code>    &lt;tr class=\"odd\"&gt;\n       &lt;td&gt;1&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"even\"&gt;\n       &lt;td&gt;2&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr class=\"odd\"&gt;\n       &lt;td&gt;3&lt;/td&gt;\n    &lt;/tr&gt;\n</code></pre>"},{"location":"designers/language-custom-functions/language-function-debug/","title":"{debug}","text":"<p><code>{debug}</code> dumps the debug console to the page. This works regardless of the debug settings in the php script. Since this gets executed at runtime, this is only able to show the assigned variables; not the templates that are in use. However, you can see all the currently available variables within the scope of a template.</p> Attribute Name Required Description output No output type, html or javascript (defaults to 'javascript') <p>See also the debugging console page.</p>"},{"location":"designers/language-custom-functions/language-function-eval/","title":"{eval}","text":"<p><code>{eval}</code> is used to evaluate a variable as a template. This can be used for things like embedding template tags/variables into variables or tags/variables into config file variables.</p>"},{"location":"designers/language-custom-functions/language-function-eval/#attributes","title":"Attributes","text":"Attribute Name Required Description var Yes Variable (or string) to evaluate assign No The template variable the output will be assigned to <p>If you supply the <code>assign</code> attribute, the output of the <code>{eval}</code> function will be assigned to this template variable instead of being output to the template.</p> <p>Note</p> <ul> <li> <p>Evaluated variables are treated the same as templates. They follow     the same escapement and security features just as if they were     templates.</p> </li> <li> <p>Evaluated variables are compiled on every invocation, the compiled     versions are not saved! However, if you have caching     enabled, the output will be cached with the rest of the template.</p> </li> <li> <p>If the content to evaluate doesn't change often, or is used     repeatedly, consider using     <code>{include file=\"string:{$template_code}\"}</code> instead. This may cache     the compiled state and thus doesn't have to run the (comparably     slow) compiler on every invocation.</p> </li> </ul>"},{"location":"designers/language-custom-functions/language-function-eval/#examples","title":"Examples","text":"<p>The contents of the config file, <code>setup.conf</code>.</p> <pre><code>emphstart = &lt;strong&gt;\nemphend = &lt;/strong&gt;\ntitle = Welcome to {$company}'s home page!\nErrorCity = You must supply a {#emphstart#}city{#emphend#}.\nErrorState = You must supply a {#emphstart#}state{#emphend#}.\n</code></pre> <p>Where the template is:</p> <pre><code>{config_load file='setup.conf'}\n\n{eval var=$foo}\n{eval var=#title#}\n{eval var=#ErrorCity#}\n{eval var=#ErrorState# assign='state_error'}\n{$state_error}\n</code></pre> <p>The above template will output:</p> <pre><code>This is the contents of foo.\nWelcome to Foobar Pub &amp; Grill's home page!\nYou must supply a &lt;strong&gt;city&lt;/strong&gt;.\nYou must supply a &lt;strong&gt;state&lt;/strong&gt;.\n</code></pre> <p>This outputs the server name (in uppercase) and IP. The assigned variable <code>$str</code> could be from a database query.</p> <pre><code>&lt;?php\n    $str = 'The server name is {$smarty.server.SERVER_NAME|upper} '\n           .'at {$smarty.server.SERVER_ADDR}';\n    $smarty-&gt;assign('foo',$str);\n</code></pre> <p>Where the template is:</p> <pre><code>{eval var=$foo}\n</code></pre>"},{"location":"designers/language-custom-functions/language-function-fetch/","title":"{fetch}","text":"<p><code>{fetch}</code> is used to retrieve files from the local file system, http, or ftp and display the contents.</p>"},{"location":"designers/language-custom-functions/language-function-fetch/#attributes","title":"Attributes","text":"Attribute Required Description file Yes The file, http or ftp site to fetch assign No The template variable the output will be assigned to <ul> <li> <p>If the file name begins with <code>http://</code>, the website page will be     fetched and displayed.</p> <p>Note</p> <p>This will not support http redirects, be sure to include a trailing slash on your web page fetches where necessary.</p> </li> <li> <p>If the file name begins with <code>ftp://</code>, the file will be downloaded     from the ftp server and displayed.</p> </li> <li> <p>For local files, either a full system file path must be given, or a     path relative to the executed php script.</p> <p>Note</p> <p>If security is enabled, and you are fetching a file from the local file system, <code>{fetch}</code> will only allow files from within the <code>$secure_dir</code> path of the security policy. See the Security section for details.</p> </li> <li> <p>If the <code>assign</code> attribute is set, the output of the <code>{fetch}</code>     function will be assigned to this template variable instead of being     output to the template.</p> </li> </ul>"},{"location":"designers/language-custom-functions/language-function-fetch/#examples","title":"Examples","text":"<pre><code>{* include some javascript in your template *}\n{fetch file='/export/httpd/www.example.com/docs/navbar.js'}\n\n{* embed some weather text in your template from another web site *}\n{fetch file='http://www.myweather.com/68502/'}\n\n{* fetch a news headline file via ftp *}\n{fetch file='ftp://user:password@ftp.example.com/path/to/currentheadlines.txt'}\n{* as above but with variables *}\n{fetch file=\"ftp://`$user`:`$password`@`$server`/`$path`\"}\n\n{* assign the fetched contents to a template variable *}\n{fetch file='http://www.myweather.com/68502/' assign='weather'}\n{if $weather ne ''}\n  &lt;div id=\"weather\"&gt;{$weather}&lt;/div&gt;\n{/if}\n</code></pre> <p>See also <code>{capture}</code>, <code>{eval}</code>, <code>{assign}</code> and <code>fetch()</code>.</p>"},{"location":"designers/language-custom-functions/language-function-html-checkboxes/","title":"{html_checkboxes}","text":"<p><code>{html_checkboxes}</code> is a custom function that creates an html checkbox group with provided data. It takes care of which item(s) are selected by default as well.</p>"},{"location":"designers/language-custom-functions/language-function-html-checkboxes/#attributes","title":"Attributes","text":"Attribute Name Required Description name No Name of checkbox list (defaults to 'checkbox') values Yes, unless using options attribute An array of values for checkbox buttons output Yes, unless using options attribute An array of output for checkbox buttons selected No The selected checkbox element(s) as a string or array options Yes, unless using values and output An associative array of values and output separator No String of text to separate each checkbox item assign No Assign checkbox tags to an array instead of output labels No Add &lt;label&gt;-tags to the output (defaults to true) label_ids No Add id-attributes to &lt;label&gt; and &lt;input&gt; to the output (defaults to false) escape No Escape the output / content (values are always escaped) (defaults to true) strict No Will make the \"extra\" attributes disabled and readonly only be set, if they were supplied with either boolean TRUE or string \"disabled\" and \"readonly\" respectively (defaults to false) <ul> <li> <p>Required attributes are <code>values</code> and <code>output</code>, unless you use <code>options</code> instead.</p> </li> <li> <p>All output is XHTML compliant.</p> </li> <li> <p>All parameters that are not in the list above are printed as     name/value-pairs inside each of the created &lt;input&gt;-tags.</p> </li> </ul>"},{"location":"designers/language-custom-functions/language-function-html-checkboxes/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$smarty-&gt;assign('cust_ids', array(1000,1001,1002,1003));\n$smarty-&gt;assign('cust_names', array(\n                                'Joe Schmoe',\n                                'Jack Smith',\n                                'Jane Johnson',\n                                'Charlie Brown')\n                              );\n$smarty-&gt;assign('customer_id', 1001);\n</code></pre> <p>where template is</p> <pre><code>{html_checkboxes name='id' values=$cust_ids output=$cust_names selected=$customer_id  separator='&lt;br /&gt;'}\n</code></pre> <p>or where PHP code is:</p> <pre><code>&lt;?php\n\n$smarty-&gt;assign(\n    'cust_checkboxes', \n    [\n     1000 =&gt; 'Joe Schmoe',\n     1001 =&gt; 'Jack Smith',\n     1002 =&gt; 'Jane Johnson',\n     1003 =&gt; 'Charlie Brown',\n    ]\n);\n$smarty-&gt;assign('customer_id', 1001);\n</code></pre> <p>and the template is</p> <pre><code>{html_checkboxes name='id' options=$cust_checkboxes selected=$customer_id separator='&lt;br /&gt;'}\n</code></pre> <p>both examples will output:</p> <pre><code>&lt;label&gt;&lt;input type=\"checkbox\" name=\"id[]\" value=\"1000\" /&gt;Joe Schmoe&lt;/label&gt;&lt;br /&gt;\n&lt;label&gt;&lt;input type=\"checkbox\" name=\"id[]\" value=\"1001\" checked=\"checked\" /&gt;Jack Smith&lt;/label&gt;\n&lt;br /&gt;\n&lt;label&gt;&lt;input type=\"checkbox\" name=\"id[]\" value=\"1002\" /&gt;Jane Johnson&lt;/label&gt;&lt;br /&gt;\n&lt;label&gt;&lt;input type=\"checkbox\" name=\"id[]\" value=\"1003\" /&gt;Charlie Brown&lt;/label&gt;&lt;br /&gt;\n</code></pre> <pre><code>&lt;?php\n\n$sql = 'select type_id, types from contact_types order by type';\n$smarty-&gt;assign('contact_types',$db-&gt;getAssoc($sql));\n\n$sql = 'select contact_id, contact_type_id, contact '\n       .'from contacts where contact_id=12';\n$smarty-&gt;assign('contact',$db-&gt;getRow($sql));\n</code></pre> <p>The results of the database queries above would be output with.</p> <pre><code>{html_checkboxes name='contact_type_id' options=$contact_types selected=$contact.contact_type_id separator='&lt;br /&gt;'}\n</code></pre> <p>See also <code>{html_radios}</code> and <code>{html_options}</code></p>"},{"location":"designers/language-custom-functions/language-function-html-image/","title":"{html_image}","text":"<p><code>{html_image}</code> is a custom function that generates an HTML <code>&lt;img&gt;</code> tag. The <code>height</code> and <code>width</code> are automatically calculated from the image file if they are not supplied.</p>"},{"location":"designers/language-custom-functions/language-function-html-image/#attributes","title":"Attributes","text":"Attribute Name Required Description file Yes name/path to image height No Height to display image (defaults to actual image height) width No Width to display image (defaults to actual image width) basedir no Directory to base relative paths from (defaults to web server doc root) alt no Alternative description of the image href no href value to link the image to path_prefix no Prefix for output path <ul> <li> <p><code>basedir</code> is the base directory that relative image paths are based     from. If not given, the web server's document root     <code>$_ENV['DOCUMENT_ROOT']</code> is used as the base. If security is     enabled, then the image must be located in the <code>$secure_dir</code> path of     the security policy. See the Security     section for details.</p> </li> <li> <p><code>href</code> is the href value to link the image to. If link is supplied,     an <code>&lt;a href=\"LINKVALUE\"&gt;&lt;a&gt;</code> tag is placed around the image tag.</p> </li> <li> <p><code>path_prefix</code> is an optional prefix string you can give the output     path. This is useful if you want to supply a different server name     for the image.</p> </li> <li> <p>All parameters that are not in the list above are printed as     name/value-pairs inside the created <code>&lt;img&gt;</code> tag.</p> </li> </ul> <p>Note</p> <p><code>{html_image}</code> requires a hit to the disk to read the image and calculate the height and width. If you don't use template caching, it is generally better to avoid <code>{html_image}</code> and leave image tags static for optimal performance.</p>"},{"location":"designers/language-custom-functions/language-function-html-image/#examples","title":"Examples","text":"<pre><code>{html_image file='pumpkin.jpg'}\n{html_image file='/path/from/docroot/pumpkin.jpg'}\n{html_image file='../path/relative/to/currdir/pumpkin.jpg'}\n</code></pre> <p>Example output of the above template would be:</p> <pre><code>&lt;img src=\"pumpkin.jpg\" alt=\"\" width=\"44\" height=\"68\" /&gt;\n&lt;img src=\"/path/from/docroot/pumpkin.jpg\" alt=\"\" width=\"44\" height=\"68\" /&gt;\n&lt;img src=\"../path/relative/to/currdir/pumpkin.jpg\" alt=\"\" width=\"44\" height=\"68\" /&gt;\n</code></pre>"},{"location":"designers/language-custom-functions/language-function-html-options/","title":"{html_options}","text":"<p><code>{html_options}</code> is a custom function that creates the html <code>&lt;select&gt;&lt;option&gt;</code> group with the assigned data. It takes care of which item(s) are selected by default as well.</p>"},{"location":"designers/language-custom-functions/language-function-html-options/#attributes","title":"Attributes","text":"Attribute Name Required Description values Yes, unless using options attribute An array of values for dropdown output Yes, unless using options attribute An array of output for dropdown selected No The selected option element(s) as a string or array options Yes, unless using values and output An associative array of values and output name No Name of select group strict No Will make the \"extra\" attributes disabled and readonly only be set, if they were supplied with either boolean TRUE or string \"disabled\" and \"readonly\" respectively (defaults to false) <ul> <li> <p>Required attributes are <code>values</code> and <code>output</code>, unless you use the     combined <code>options</code> instead.</p> </li> <li> <p>If the optional <code>name</code> attribute is given, the <code>&lt;select&gt;&lt;/select&gt;</code>     tags are created, otherwise ONLY the <code>&lt;option&gt;</code> list is generated.</p> </li> <li> <p>If a given value is an array, it will treat it as an html     <code>&lt;optgroup&gt;</code>, and display the groups. Recursion is supported with     <code>&lt;optgroup&gt;</code>.</p> </li> <li> <p>All parameters that are not in the list above are printed as     name/value-pairs inside the <code>&lt;select&gt;</code> tag. They are ignored if the     optional <code>name</code> is not given.</p> </li> <li> <p>All output is XHTML compliant.</p> </li> </ul>"},{"location":"designers/language-custom-functions/language-function-html-options/#examples","title":"Examples","text":"<pre><code>&lt;?php\n$smarty-&gt;assign('myOptions', [\n                                1800 =&gt; 'Joe Schmoe',\n                                9904 =&gt; 'Jack Smith',\n                                2003 =&gt; 'Charlie Brown']\n                                );\n$smarty-&gt;assign('mySelect', 9904);\n</code></pre> <p>The following template will generate a drop-down list. Note the presence of the <code>name</code> attribute which creates the <code>&lt;select&gt;</code> tags.</p> <pre><code>{html_options name=foo options=$myOptions selected=$mySelect}\n</code></pre> <p>Output of the above example would be:</p> <pre><code>&lt;select name=\"foo\"&gt;\n    &lt;option value=\"1800\"&gt;Joe Schmoe&lt;/option&gt;\n    &lt;option value=\"9904\" selected=\"selected\"&gt;Jack Smith&lt;/option&gt;\n    &lt;option value=\"2003\"&gt;Charlie Brown&lt;/option&gt;\n&lt;/select&gt;   \n</code></pre> <pre><code>&lt;?php\n$smarty-&gt;assign('cust_ids', [56,92,13]);\n$smarty-&gt;assign('cust_names', [\n                              'Joe Schmoe',\n                              'Jane Johnson',\n                              'Charlie Brown']);\n$smarty-&gt;assign('customer_id', 92);\n</code></pre> <p>The above arrays would be output with the following template (note the use of the php <code>count()</code> function as a modifier to set the select size).</p> <pre><code>&lt;select name=\"customer_id\" size=\"{$cust_names|@count}\"&gt;\n   {html_options values=$cust_ids output=$cust_names selected=$customer_id}\n&lt;/select&gt;\n</code></pre> <p>The above example would output:</p> <pre><code>&lt;select name=\"customer_id\" size=\"3\"&gt;\n    &lt;option value=\"56\"&gt;Joe Schmoe&lt;/option&gt;\n    &lt;option value=\"92\" selected=\"selected\"&gt;Jane Johnson&lt;/option&gt;\n    &lt;option value=\"13\"&gt;Charlie Brown&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <pre><code>&lt;?php\n\n$sql = 'select type_id, types from contact_types order by type';\n$smarty-&gt;assign('contact_types',$db-&gt;getAssoc($sql));\n\n$sql = 'select contact_id, name, email, contact_type_id\n        from contacts where contact_id='.$contact_id;\n$smarty-&gt;assign('contact',$db-&gt;getRow($sql));\n</code></pre> <p>Where a template could be as follows. Note the use of the <code>truncate</code> modifier.</p> <pre><code>&lt;select name=\"type_id\"&gt;\n    &lt;option value='null'&gt;-- none --&lt;/option&gt;\n    {html_options options=$contact_types|truncate:20 selected=$contact.type_id}\n&lt;/select&gt;\n</code></pre> <pre><code>&lt;?php\n$arr['Sport'] = array(6 =&gt; 'Golf', 9 =&gt; 'Cricket',7 =&gt; 'Swim');\n$arr['Rest']  = array(3 =&gt; 'Sauna',1 =&gt; 'Massage');\n$smarty-&gt;assign('lookups', $arr);\n$smarty-&gt;assign('fav', 7);\n</code></pre> <p>The script above and the following template</p> <pre><code>{html_options name=foo options=$lookups selected=$fav}\n</code></pre> <p>would output:</p> <pre><code>&lt;select name=\"foo\"&gt;\n    &lt;optgroup label=\"Sport\"&gt;\n        &lt;option value=\"6\"&gt;Golf&lt;/option&gt;\n        &lt;option value=\"9\"&gt;Cricket&lt;/option&gt;\n        &lt;option value=\"7\" selected=\"selected\"&gt;Swim&lt;/option&gt;\n    &lt;/optgroup&gt;\n    &lt;optgroup label=\"Rest\"&gt;\n        &lt;option value=\"3\"&gt;Sauna&lt;/option&gt;\n        &lt;option value=\"1\"&gt;Massage&lt;/option&gt;\n    &lt;/optgroup&gt;\n&lt;/select&gt;\n</code></pre> <p>See also <code>{html_checkboxes}</code> and <code>{html_radios}</code></p>"},{"location":"designers/language-custom-functions/language-function-html-radios/","title":"{html_radios}","text":"<p><code>{html_radios}</code> is a custom function that creates an HTML radio button group. It also takes care of which item is selected by default as well.</p>"},{"location":"designers/language-custom-functions/language-function-html-radios/#attributes","title":"Attributes","text":"Attribute Name Required Description name No Name of radio list values Yes, unless using options attribute An array of values for radio buttons output Yes, unless using options attribute An array of output for radio buttons selected No The selected radio element options Yes, unless using values and output An associative array of values and output separator No String of text to separate each radio item assign No Assign radio tags to an array instead of output labels No Add -tags to the output (defaults to true) label_ids No Add id-attributes to &lt;label&gt; and &lt;input&gt; to the output (defaults to false) escape No Escape the output / content (values are always escaped) (defaults to true) strict No Will make the \"extra\" attributes disabled and readonly only be set, if they were supplied with either boolean TRUE or string \"disabled\" and \"readonly\" respectively (defaults to false) <ul> <li> <p>Required attributes are <code>values</code> and <code>output</code>, unless you use     <code>options</code> instead.</p> </li> <li> <p>All output is XHTML compliant.</p> </li> <li> <p>All parameters that are not in the list above are output as     name/value-pairs inside each of the created <code>&lt;input&gt;</code>-tags.</p> </li> </ul>"},{"location":"designers/language-custom-functions/language-function-html-radios/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$smarty-&gt;assign('cust_ids', array(1000,1001,1002,1003));\n$smarty-&gt;assign('cust_names', array(\n                              'Joe Schmoe',\n                              'Jack Smith',\n                              'Jane Johnson',\n                              'Charlie Brown')\n                              );\n$smarty-&gt;assign('customer_id', 1001);\n</code></pre> <p>Where template is:</p> <pre><code>{html_radios name='id' values=$cust_ids output=$cust_names\n       selected=$customer_id separator='&lt;br /&gt;'}\n</code></pre> <pre><code>&lt;?php\n$smarty-&gt;assign('cust_radios', array(\n                               1000 =&gt; 'Joe Schmoe',\n                               1001 =&gt; 'Jack Smith',\n                               1002 =&gt; 'Jane Johnson',\n                               1003 =&gt; 'Charlie Brown'));\n$smarty-&gt;assign('customer_id', 1001);\n</code></pre> <p>Where template is:</p> <pre><code>{html_radios name='id' options=$cust_radios\n     selected=$customer_id separator='&lt;br /&gt;'}\n</code></pre> <p>Both examples will output:</p> <pre><code>&lt;label&gt;&lt;input type=\"radio\" name=\"id\" value=\"1000\" /&gt;Joe Schmoe&lt;/label&gt;&lt;br /&gt;\n&lt;label&gt;&lt;input type=\"radio\" name=\"id\" value=\"1001\" checked=\"checked\" /&gt;Jack Smith&lt;/label&gt;&lt;br /&gt;\n&lt;label&gt;&lt;input type=\"radio\" name=\"id\" value=\"1002\" /&gt;Jane Johnson&lt;/label&gt;&lt;br /&gt;\n&lt;label&gt;&lt;input type=\"radio\" name=\"id\" value=\"1003\" /&gt;Charlie Brown&lt;/label&gt;&lt;br /&gt;\n</code></pre> <pre><code>&lt;?php\n\n$sql = 'select type_id, types from contact_types order by type';\n$smarty-&gt;assign('contact_types',$db-&gt;getAssoc($sql));\n\n$sql = 'select contact_id, name, email, contact_type_id '\n        .'from contacts where contact_id='.$contact_id;\n$smarty-&gt;assign('contact',$db-&gt;getRow($sql));\n</code></pre> <p>The variable assigned from the database above would be output with the template:</p> <pre><code>{html_radios name='contact_type_id' options=$contact_types\n     selected=$contact.contact_type_id separator='&lt;br /&gt;'}\n</code></pre> <p>See also <code>{html_checkboxes}</code> and <code>{html_options}</code></p>"},{"location":"designers/language-custom-functions/language-function-html-select-date/","title":"{html_select_date}","text":"<p><code>{html_select_date}</code> is a custom function that creates date dropdowns. It can display any or all of: year, month, and day. All parameters that are not in the list below are printed as name/value-pairs inside the <code>&lt;select&gt;</code> tags of day, month and year.</p>"},{"location":"designers/language-custom-functions/language-function-html-select-date/#attributes","title":"Attributes","text":"Attribute Name Default Description prefix Date_ What to prefix the var name with time What date/time to pre-select. Accepts timestamps, DateTime objects or any string parseable by strtotime(). If an array is given, the attributes field_array and prefix are used to identify the array elements to extract year, month and day from. Omitting this parameter or supplying a falsy value will select the current date. To prevent date selection, pass in NULL. start_year current year The first year in the dropdown, either year number, or relative to current year (+/- N) end_year same as start_year The last year in the dropdown, either year number, or relative to current year (+/- N) display_days TRUE Whether to display days or not display_months TRUE Whether to display months or not display_years TRUE Whether to display years or not month_names List of strings to display for months. array(1 =&gt; 'Jan', ..., 12 =&gt; 'Dec') month_format \\%B What format the month should be in (strftime) day_format \\%02d What format the day output should be in (sprintf) day_value_format \\%d What format the day value should be in (sprintf) year_as_text FALSE Whether or not to display the year as text reverse_years FALSE Display years in reverse order field_array If a name is given, the select boxes will be drawn such that the results will be returned to PHP in the form of name[Day], name[Year], name[Month]. day_size Adds size attribute to select tag if given month_size Adds size attribute to select tag if given year_size Adds size attribute to select tag if given all_extra Adds extra attributes to all select/input tags if given day_extra Adds extra attributes to select/input tags if given month_extra Adds extra attributes to select/input tags if given year_extra Adds extra attributes to select/input tags if given all_id Adds id-attribute to all select/input tags if given day_id Adds id-attribute to select/input tags if given month_id Adds id-attribute to select/input tags if given year_id Adds id-attribute to select/input tags if given field_order MDY The order in which to display the fields field_separator \\n String printed between different fields month_value_format \\%m strftime() format of the month values, default is %m for month numbers. all_empty If supplied then the first element of any select-box has this value as it's label and \"\" as it's value. This is useful to make the select-boxes read \"Please select\" for example. year_empty If supplied then the first element of the year's select-box has this value as it's label and \"\" as it's value. This is useful to make the select-box read \"Please select a year\" for example. Note that you can use values like \"-MM-DD\" as time-attribute to indicate an unselected year. month_empty If supplied then the first element of the month's select-box has this value as it's label and \"\" as it's value. . Note that you can use values like \"YYYY--DD\" as time-attribute to indicate an unselected month. day_empty If supplied then the first element of the day's select-box has this value as it's label and \"\" as it's value. Note that you can use values like \"YYYY-MM-\" as time-attribute to indicate an unselected day. <p>Note</p> <p>There is an useful php function on the date tips page for converting <code>{html_select_date}</code> form values to a timestamp.</p>"},{"location":"designers/language-custom-functions/language-function-html-select-date/#exaples","title":"Exaples","text":"<p>Template code</p> <pre><code>{html_select_date}\n</code></pre> <p>This will output:</p> <pre><code>&lt;select name=\"Date_Month\"&gt;\n    &lt;option value=\"1\"&gt;January&lt;/option&gt;\n    &lt;option value=\"2\"&gt;February&lt;/option&gt;\n    &lt;option value=\"3\"&gt;March&lt;/option&gt;\n      ..... snipped .....\n    &lt;option value=\"10\"&gt;October&lt;/option&gt;\n    &lt;option value=\"11\"&gt;November&lt;/option&gt;\n    &lt;option value=\"12\" selected=\"selected\"&gt;December&lt;/option&gt;\n&lt;/select&gt;\n&lt;select name=\"Date_Day\"&gt;\n    &lt;option value=\"1\"&gt;01&lt;/option&gt;\n    &lt;option value=\"2\"&gt;02&lt;/option&gt;\n    &lt;option value=\"3\"&gt;03&lt;/option&gt;\n      ..... snipped .....\n    &lt;option value=\"11\"&gt;11&lt;/option&gt;\n    &lt;option value=\"12\"&gt;12&lt;/option&gt;\n    &lt;option value=\"13\" selected=\"selected\"&gt;13&lt;/option&gt;\n    &lt;option value=\"14\"&gt;14&lt;/option&gt;\n    &lt;option value=\"15\"&gt;15&lt;/option&gt;\n      ..... snipped .....\n    &lt;option value=\"29\"&gt;29&lt;/option&gt;\n    &lt;option value=\"30\"&gt;30&lt;/option&gt;\n    &lt;option value=\"31\"&gt;31&lt;/option&gt;\n&lt;/select&gt;\n&lt;select name=\"Date_Year\"&gt;\n    &lt;option value=\"2006\" selected=\"selected\"&gt;2006&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <pre><code>{* start and end year can be relative to current year *}\n{html_select_date prefix='StartDate' time=$time start_year='-5'\n       end_year='+1' display_days=false}\n</code></pre> <p>With 2000 as the current year the output:</p> <pre><code>&lt;select name=\"StartDateMonth\"&gt;\n    &lt;option value=\"1\"&gt;January&lt;/option&gt;\n    &lt;option value=\"2\"&gt;February&lt;/option&gt;\n    .... snipped ....\n    &lt;option value=\"11\"&gt;November&lt;/option&gt;\n    &lt;option value=\"12\" selected=\"selected\"&gt;December&lt;/option&gt;\n&lt;/select&gt;\n&lt;select name=\"StartDateYear\"&gt;\n    &lt;option value=\"1995\"&gt;1995&lt;/option&gt;\n    .... snipped ....\n    &lt;option value=\"1999\"&gt;1999&lt;/option&gt;\n    &lt;option value=\"2000\" selected=\"selected\"&gt;2000&lt;/option&gt;\n    &lt;option value=\"2001\"&gt;2001&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <p>See also <code>{html_select_time}</code>, <code>date_format</code>, <code>$smarty.now</code> and the date tips page.</p>"},{"location":"designers/language-custom-functions/language-function-html-select-time/","title":"{html_select_time}","text":"<p><code>{html_select_time}</code> is a custom function that creates time dropdowns for you. It can display any or all of: hour, minute, second and meridian.</p> <p>The <code>time</code> attribute can have different formats. It can be a unique timestamp, a string of the format <code>YYYYMMDDHHMMSS</code> or a string that is parseable by PHP's <code>strtotime()</code>.</p>"},{"location":"designers/language-custom-functions/language-function-html-select-time/#attributes","title":"Attributes","text":"Attribute Name Default Description prefix Time_ What to prefix the var name with time current timestamp What date/time to pre-select. Accepts  timestamp, DateTime, mysql timestamp or any string parsable by <code>strtotime()</code>. If an array is given, the attributes field_array and prefix are used to identify the array elements to extract hour, minute, second and meridian from. display_hours TRUE Whether or not to display hours display_minutes TRUE Whether or not to display minutes display_seconds TRUE Whether or not to display seconds display_meridian TRUE Whether or not to display meridian (am/pm) use_24_hours TRUE Whether or not to use 24 hour clock minute_interval 1 Number interval in minute dropdown second_interval 1 Number interval in second dropdown hour_format \\%02d What format the hour label should be in (sprintf) hour_value_format \\%20d What format the hour value should be in (sprintf) minute_format \\%02d What format the minute label should be in (sprintf) minute_value_format \\%20d What format the minute value should be in (sprintf) second_format \\%02d What format the second label should be in (sprintf) second_value_format \\%20d What format the second value should be in (sprintf) field_array n/a Outputs values to array of this name all_extra null Adds extra attributes to select/input tags if given hour_extra null Adds extra attributes to select/input tags if given minute_extra null Adds extra attributes to select/input tags if given second_extra null Adds extra attributes to select/input tags if given meridian_extra null Adds extra attributes to select/input tags if given field_separator \\n String printed between different fields option_separator \\n String printed between different options of a field all_id null Adds id-attribute to all select/input tags if given hour_id null Adds id-attribute to select/input tags if given minute_id null Adds id-attribute to select/input tags if given second_id null Adds id-attribute to select/input tags if given meridian_id null Adds id-attribute to select/input tags if given all_empty null If supplied then the first element of any select-box has this value as it's label and \"\" as it's value. This is useful to make the select-boxes read \"Please select\" for example. hour_empty null If supplied then the first element of the hour's select-box has this value as it's label and \"\" as it's value. This is useful to make the select-box read \"Please select an hour\" for example. minute_empty null If supplied then the first element of the minute's select-box has this value as it's label and \"\" as it's value. This is useful to make the select-box read \"Please select an minute\" for example. second_empty null If supplied then the first element of the second's select-box has this value as it's label and \"\" as it's value. This is useful to make the select-box read \"Please select an second\" for example. meridian_empty null If supplied then the first element of the meridian's select-box has this value as it's label and \"\" as it's value. This is useful to make the select-box read \"Please select an meridian\" for example."},{"location":"designers/language-custom-functions/language-function-html-select-time/#examples","title":"Examples","text":"<pre><code>{html_select_time use_24_hours=true}\n</code></pre> <p>At 9:20 and 23 seconds in the morning the template above would output:</p> <pre><code>&lt;select name=\"Time_Hour\"&gt;\n    &lt;option value=\"00\"&gt;00&lt;/option&gt;\n    &lt;option value=\"01\"&gt;01&lt;/option&gt;\n    ... snipped ....\n    &lt;option value=\"08\"&gt;08&lt;/option&gt;\n    &lt;option value=\"09\" selected&gt;09&lt;/option&gt;\n    &lt;option value=\"10\"&gt;10&lt;/option&gt;\n    ... snipped ....\n    &lt;option value=\"22\"&gt;22&lt;/option&gt;\n    &lt;option value=\"23\"&gt;23&lt;/option&gt;\n&lt;/select&gt;\n&lt;select name=\"Time_Minute\"&gt;\n    &lt;option value=\"00\"&gt;00&lt;/option&gt;\n    &lt;option value=\"01\"&gt;01&lt;/option&gt;\n    ... snipped ....\n    &lt;option value=\"19\"&gt;19&lt;/option&gt;\n    &lt;option value=\"20\" selected&gt;20&lt;/option&gt;\n    &lt;option value=\"21\"&gt;21&lt;/option&gt;\n    ... snipped ....\n    &lt;option value=\"58\"&gt;58&lt;/option&gt;\n    &lt;option value=\"59\"&gt;59&lt;/option&gt;\n&lt;/select&gt;\n&lt;select name=\"Time_Second\"&gt;\n    &lt;option value=\"00\"&gt;00&lt;/option&gt;\n    &lt;option value=\"01\"&gt;01&lt;/option&gt;\n    ... snipped ....\n    &lt;option value=\"22\"&gt;22&lt;/option&gt;\n    &lt;option value=\"23\" selected&gt;23&lt;/option&gt;\n    &lt;option value=\"24\"&gt;24&lt;/option&gt;\n    ... snipped ....\n    &lt;option value=\"58\"&gt;58&lt;/option&gt;\n    &lt;option value=\"59\"&gt;59&lt;/option&gt;\n&lt;/select&gt;\n&lt;select name=\"Time_Meridian\"&gt;\n    &lt;option value=\"am\" selected&gt;AM&lt;/option&gt;\n    &lt;option value=\"pm\"&gt;PM&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <p>See also <code>$smarty.now</code>, <code>{html_select_date}</code> and the date tips page.</p>"},{"location":"designers/language-custom-functions/language-function-html-table/","title":"{html_table}","text":"<p><code>{html_table}</code> is a custom function that dumps an array of data into an HTML <code>&lt;table&gt;</code>.</p>"},{"location":"designers/language-custom-functions/language-function-html-table/#attributes","title":"Attributes","text":"Attribute Name Required Description loop Yes Array of data to loop through cols No Number of columns in the table or a comma-separated list of column heading names or an array of column heading names.if the cols-attribute is empty, but rows are given, then the number of cols is computed by the number of rows and the number of elements to display to be just enough cols to display all elements. If both, rows and cols, are omitted cols defaults to 3. if given as a list or array, the number of columns is computed from the number of elements in the list or array. rows No Number of rows in the table. if the rows-attribute is empty, but cols are given, then the number of rows is computed by the number of cols and the number of elements to display to be just enough rows to display all elements. inner No Direction of consecutive elements in the loop-array to be rendered. cols means elements are displayed col-by-col. rows means elements are displayed row-by-row. caption No Text to be used for the <code>&lt;caption&gt;</code> element of the table table_attr No Attributes for <code>&lt;table&gt;</code> tag (defaults to 'border=\"1\"') th_attr No Attributes for <code>&lt;th&gt;</code> tag (arrays are cycled) tr_attr No attributes for <code>&lt;tr&gt;</code> tag (arrays are cycled) td_attr No Attributes for <code>&lt;td&gt;</code> tag (arrays are cycled) trailpad No Value to pad the trailing cells on last row with (if any) (defaults to '\u00a0') hdir No Direction of each row to be rendered. possible values: right (left-to-right), and left (right-to-left) (defaults to 'right') vdir No Direction of each column to be rendered. possible values: down (top-to-bottom), up (bottom-to-top) (defaults to 'down') <ul> <li> <p>The <code>cols</code> attribute determines how many columns will be in the     table.</p> </li> <li> <p>The <code>table_attr</code>, <code>tr_attr</code> and <code>td_attr</code> values determine the     attributes given to the <code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code> and <code>&lt;td&gt;</code> tags.</p> </li> <li> <p>If <code>tr_attr</code> or <code>td_attr</code> are arrays, they will be cycled through.</p> </li> <li> <p><code>trailpad</code> is the value put into the trailing cells on the last     table row if there are any present.</p> </li> </ul>"},{"location":"designers/language-custom-functions/language-function-html-table/#examples","title":"Examples","text":"<pre><code>&lt;?php\n$smarty-&gt;assign( 'data', array(1,2,3,4,5,6,7,8,9) );\n$smarty-&gt;assign( 'tr', array('bgcolor=\"#eeeeee\"','bgcolor=\"#dddddd\"') );\n$smarty-&gt;display('index.tpl');\n</code></pre> <p>The variables assigned from php could be displayed as these three examples demonstrate. Each example shows the template followed by output.</p> <p>** Example 1 ** <pre><code>{html_table loop=$data}\n</code></pre> <pre><code>&lt;table border=\"1\"&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre></p> <p>** Example 2 ** <pre><code>{html_table loop=$data cols=4 table_attr='border=\"0\"'}\n</code></pre> <pre><code>&lt;table border=\"0\"&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre></p> <p>** Example 3 ** <pre><code>{html_table loop=$data cols=\"first,second,third,fourth\" tr_attr=$tr}\n</code></pre> <pre><code>&lt;table border=\"1\"&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n        &lt;th&gt;first&lt;/th&gt;&lt;th&gt;second&lt;/th&gt;&lt;th&gt;third&lt;/th&gt;&lt;th&gt;fourth&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr bgcolor=\"#eeeeee\"&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr bgcolor=\"#dddddd\"&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr bgcolor=\"#eeeeee\"&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre></p>"},{"location":"designers/language-custom-functions/language-function-mailto/","title":"{mailto}","text":"<p><code>{mailto}</code> automates the creation of a <code>mailto:</code> anchor links and optionally encodes them. Encoding emails makes it more difficult for web spiders to lift email addresses off of a site.</p>"},{"location":"designers/language-custom-functions/language-function-mailto/#attributes","title":"Attributes","text":"Attribute Name Required Description address Yes The e-mail address text No The text to display, default is the e-mail address encode No How to encode the e-mail. Can be one of <code>none</code>, <code>hex</code>, <code>javascript</code> or <code>javascript_charcode</code>. cc No Email addresses to carbon copy, separate entries by a comma. bcc No Email addresses to blind carbon copy, separate entries by a comma subject No Email subject newsgroups No Newsgroups to post to, separate entries by a comma. followupto No Addresses to follow up to, separate entries by a comma. extra No Any extra information you want passed to the link, such as style sheet classes <p>Note</p> <p>Javascript is probably the most thorough form of encoding, although you can use hex encoding too.</p>"},{"location":"designers/language-custom-functions/language-function-mailto/#examples","title":"Examples","text":"<pre><code>{mailto address=\"me@example.com\"}\n&lt;a href=\"mailto:me@example.com\" &gt;me@example.com&lt;/a&gt;\n\n{mailto address=\"me@example.com\" text=\"send me some mail\"}\n&lt;a href=\"mailto:me@example.com\" &gt;send me some mail&lt;/a&gt;\n\n{mailto address=\"me@example.com\" encode=\"javascript\"}\n    &lt;script&gt;\n   eval(unescape('%64%6f% ... snipped ...%61%3e%27%29%3b'))\n&lt;/script&gt;\n\n{mailto address=\"me@example.com\" encode=\"hex\"}\n&lt;a href=\"mailto:%6d%65.. snipped..3%6f%6d\"&gt;&amp;#x6d;&amp;..snipped...#x6f;&amp;#x6d;&lt;/a&gt;\n\n{mailto address=\"me@example.com\" subject=\"Hello to you!\"}\n&lt;a href=\"mailto:me@example.com?subject=Hello%20to%20you%21\" &gt;me@example.com&lt;/a&gt;\n\n{mailto address=\"me@example.com\" cc=\"you@example.com,they@example.com\"}\n&lt;a href=\"mailto:me@example.com?cc=you@example.com,they@example.com\" &gt;me@example.com&lt;/a&gt;\n\n{mailto address=\"me@example.com\" extra='class=\"email\"'}\n&lt;a href=\"mailto:me@example.com\" class=\"email\"&gt;me@example.com&lt;/a&gt;\n\n{mailto address=\"me@example.com\" encode=\"javascript_charcode\"}\n    &lt;script&gt;\n    {document.write(String.fromCharCode(60,97, ... snipped ....60,47,97,62))}\n&lt;/script&gt;\n</code></pre> <p>See also <code>escape</code>, <code>{textformat}</code> and obfuscating email addresses.</p>"},{"location":"designers/language-custom-functions/language-function-math/","title":"{math}","text":"<p><code>{math}</code> allows the template designer to do math equations in the template.</p>"},{"location":"designers/language-custom-functions/language-function-math/#attributes","title":"Attributes","text":"Attribute Name Required Description equation Yes The equation to execute format No The format of the result (sprintf) var Yes Equation variable value assign No Template variable the output will be assigned to [var ...] Yes Equation variable value <ul> <li> <p>Any numeric template variables may be used in the equations, and the     result is printed in place of the tag.</p> </li> <li> <p>The variables used in the equation are passed as parameters, which     can be template variables or static values.</p> </li> <li> <p>+, -, /, *, abs, ceil, cos, exp, floor, log, log10, max, min, pi,     pow, rand, round, sin, sqrt, srans and tan are all valid operators.     Check the PHP documentation for further information on these     math functions.</p> </li> <li> <p>If you supply the <code>assign</code> attribute, the output of the <code>{math}</code>     function will be assigned to this template variable instead of being     output to the template.</p> </li> </ul> <p>Note</p> <p><code>{math}</code> is an expensive function in performance due to its use of the php <code>eval()</code> function. Doing the math in PHP is much more efficient, so whenever possible do the math calculations in the script and <code>assign()</code> the results to the template. Definitely avoid repetitive <code>{math}</code> function calls, eg within <code>{section}</code> loops.</p>"},{"location":"designers/language-custom-functions/language-function-math/#examples","title":"Examples","text":"<p>Example 1 <pre><code>{* $height=4, $width=5 *}\n\n{math equation=\"x + y\" x=$height y=$width}\n</code></pre></p> <p>The above example will output:</p> <pre><code>9\n</code></pre> <p>Example 2</p> <pre><code>{* $row_height = 10, $row_width = 20, #col_div# = 2, assigned in template *}\n\n{math equation=\"height * width / division\"\n    height=$row_height\n    width=$row_width\n    division=#col_div#}\n</code></pre> <p>The above example will output:</p> <pre><code>100\n</code></pre> <p>Example 3</p> <pre><code>{* you can use parenthesis *}\n\n{math equation=\"(( x + y ) / z )\" x=2 y=10 z=2}\n</code></pre> <p>The above example will output:</p> <pre><code>6\n</code></pre> <p>Example 4</p> <pre><code>{* you can supply a format parameter in sprintf format *}\n\n{math equation=\"x + y\" x=4.4444 y=5.0000 format=\"%.2f\"}\n</code></pre> <p>The above example will output: <pre><code>9.44\n</code></pre></p>"},{"location":"designers/language-custom-functions/language-function-textformat/","title":"{textformat}","text":"<p><code>{textformat}</code> is a block tag used to format text. It basically cleans up spaces and special characters, and formats paragraphs by wrapping at a boundary and indenting lines.</p> <p>You can set the parameters explicitly, or use a preset style. Currently, \"email\" is the only available style.</p>"},{"location":"designers/language-custom-functions/language-function-textformat/#attributes","title":"Attributes","text":"Attribute Name Default Description style n/a Preset style indent 0 The number of chars to indent every line indent_first 0 The number of chars to indent the first line indent_char (single space) The character (or string of chars) to indent with wrap 80 How many characters to wrap each line to wrap_char \\n The character (or string of chars) to break each line with wrap_cut FALSE If TRUE, wrap will break the line at the exact character instead of at a word boundary assign n/a The template variable the output will be assigned to"},{"location":"designers/language-custom-functions/language-function-textformat/#examples","title":"Examples","text":"<pre><code>{textformat wrap=40}\n\nThis is foo.\nThis is foo.\nThis is foo.\nThis is foo.\nThis is foo.\nThis is foo.\n\nThis is bar.\n\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\n\n{/textformat}\n</code></pre> <p>The above example will output:</p> <pre><code>This is foo. This is foo. This is foo.\nThis is foo. This is foo. This is foo.\n\nThis is bar.\n\nbar foo bar foo foo. bar foo bar foo\nfoo. bar foo bar foo foo. bar foo bar\nfoo foo. bar foo bar foo foo. bar foo\nbar foo foo. bar foo bar foo foo.\n</code></pre> <pre><code>{textformat wrap=40 indent=4}\n\nThis is foo.\nThis is foo.\nThis is foo.\nThis is foo.\nThis is foo.\nThis is foo.\n\nThis is bar.\n\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\n\n{/textformat}\n</code></pre> <p>The above example will output:</p> <pre><code>    This is foo. This is foo. This is\n    foo. This is foo. This is foo. This\n    is foo.\n\n    This is bar.\n\n    bar foo bar foo foo. bar foo bar foo\n    foo. bar foo bar foo foo. bar foo\n    bar foo foo. bar foo bar foo foo.\n    bar foo bar foo foo. bar foo bar\n    foo foo.\n</code></pre> <pre><code>{textformat wrap=40 indent=4 indent_first=4}\n\nThis is foo.\nThis is foo.\nThis is foo.\nThis is foo.\nThis is foo.\nThis is foo.\n\nThis is bar.\n\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\n\n{/textformat}\n</code></pre> <p>The above example will output:</p> <pre><code>   This is foo. This is foo. This\n   is foo. This is foo. This is foo.\n   This is foo.\n\n   This is bar.\n\n   bar foo bar foo foo. bar foo bar\n   foo foo. bar foo bar foo foo. bar\n   foo bar foo foo. bar foo bar foo\n   foo. bar foo bar foo foo. bar foo\n   bar foo foo.\n</code></pre> <pre><code>{textformat style=\"email\"}\n\nThis is foo.\nThis is foo.\nThis is foo.\nThis is foo.\nThis is foo.\nThis is foo.\n\nThis is bar.\n\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\nbar foo bar foo     foo.\n\n{/textformat}\n</code></pre> <p>The above example will output:</p> <pre><code>This is foo. This is foo. This is foo. This is foo. This is foo. This is\nfoo.\n\nThis is bar.\n\nbar foo bar foo foo. bar foo bar foo foo. bar foo bar foo foo. bar foo\nbar foo foo. bar foo bar foo foo. bar foo bar foo foo. bar foo bar foo\nfoo.\n</code></pre> <p>See also <code>{strip}</code> and <code>wordwrap</code>.</p>"},{"location":"designers/language-modifiers/","title":"Variable Modifiers","text":"<p>Variable modifiers can be applied to variables, custom tags or strings. To apply a modifier, specify the value followed by a <code>|</code> (pipe) and the modifier name. A modifier may accept additional parameters that affect its behavior. These parameters follow the modifier name and are separated by a <code>:</code> (colon). </p> <p>Modifiers can be applied to any type of variables, including arrays and objects.</p>"},{"location":"designers/language-modifiers/#examples","title":"Examples","text":"<pre><code>{* apply modifier to a variable *}\n{$title|upper}\n\n{* modifier with parameters *}\n{$title|truncate:40:\"...\"}\n\n{* apply modifier to a function parameter *}\n{html_table loop=$myvar|upper}\n\n{* with parameters *}\n{html_table loop=$myvar|truncate:40:\"...\"}\n\n{* apply modifier to literal string *}\n{\"foobar\"|upper}\n\n{* using date_format to format the current date *}\n{$smarty.now|date_format:\"%Y/%m/%d\"}\n\n{* apply modifier to a custom function *}\n{mailto|upper address=\"smarty@example.com\"}\n\n{* using  php's str_repeat *}\n{\"=\"|str_repeat:80}\n\n{* php's count *}\n{$myArray|@count}\n\n{* this will uppercase the whole array *}\n&lt;select name=\"name_id\"&gt;\n{html_options output=$my_array|upper}\n&lt;/select&gt;\n</code></pre>"},{"location":"designers/language-modifiers/#combining-modifiers","title":"Combining Modifiers","text":"<p>You can apply any number of modifiers to a variable. They will be applied in the order they are combined, from left to right. They must be separated with a <code>|</code> (pipe) character.</p> <pre><code>&lt;?php\n\n$smarty-&gt;assign('articleTitle', 'Smokers are Productive, but Death Cuts Efficiency.');\n</code></pre> <p>where template is:</p> <pre><code>{$articleTitle}\n{$articleTitle|upper|spacify}\n{$articleTitle|lower|spacify|truncate}\n{$articleTitle|lower|truncate:30|spacify}\n{$articleTitle|lower|spacify|truncate:30:\". . .\"}\n</code></pre> <p>The above example will output:</p> <pre><code>Smokers are Productive, but Death Cuts Efficiency.\nS M O K E R S   A R ....snip....  H   C U T S   E F F I C I E N C Y .\ns m o k e r s   a r ....snip....  b u t   d e a t h   c u t s...\ns m o k e r s   a r e   p r o d u c t i v e ,   b u t . . .\ns m o k e r s   a r e   p. . .\n</code></pre>"},{"location":"designers/language-modifiers/#using-modifiers-in-expressions","title":"Using modifiers in expressions","text":"<p>Modifiers can also be used in expressions. For example, you can use the isset modifier to test if a variable holds a value different from null.</p> <pre><code>{if $varA|isset}\n    &lt;b&gt;variable A is set&lt;/b&gt;\n{/if}\n</code></pre> <p>You can also use modifiers in expressions in a PHP-style syntax:</p> <pre><code>{if isset($varA)}\n    &lt;b&gt;variable A is set&lt;/b&gt;\n{/if}\n</code></pre> <p>See also <code>registerPlugin()</code>, combining modifiers. and extending smarty with plugins</p>"},{"location":"designers/language-modifiers/language-modifier-capitalize/","title":"capitalize","text":"<p>This is used to capitalize the first letter of all words in a variable. This is similar to the PHP <code>ucwords()</code> function.</p>"},{"location":"designers/language-modifiers/language-modifier-capitalize/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|capitalize}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-capitalize/#parameters","title":"Parameters","text":"Parameter Type Required Description 1 boolean No This determines whether or not words with digits will be uppercased 2 boolean No This determines whether or not Capital letters within words should be lowercased, e.g. \"aAa\" to \"Aaa\""},{"location":"designers/language-modifiers/language-modifier-capitalize/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n    $smarty-&gt;assign('articleTitle', 'next x-men film, x3, delayed.');\n</code></pre> <p>Where the template is:</p> <pre><code>    {$articleTitle}\n    {$articleTitle|capitalize}\n    {$articleTitle|capitalize:true}\n</code></pre> <p>Will output:</p> <pre><code>    next x-men film, x3, delayed.\n    Next X-Men Film, x3, Delayed.\n    Next X-Men Film, X3, Delayed.\n</code></pre> <p>See also <code>lower</code> and <code>upper</code></p>"},{"location":"designers/language-modifiers/language-modifier-cat/","title":"cat","text":"<p>This value is concatenated to the given variable.</p>"},{"location":"designers/language-modifiers/language-modifier-cat/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|cat:' units'}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-cat/#parameters","title":"Parameters","text":"Parameter Type Required Description 1 string No This value to concatenate to the given variable."},{"location":"designers/language-modifiers/language-modifier-cat/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n    $smarty-&gt;assign('articleTitle', \"Psychics predict world didn't end\");\n</code></pre> <p>Where template is:</p> <pre><code>    {$articleTitle|cat:' yesterday.'}\n</code></pre> <p>Will output:</p> <pre><code>    Psychics predict world didn't end yesterday.\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-count-characters/","title":"count_characters","text":"<p>This is used to count the number of characters in a variable.</p>"},{"location":"designers/language-modifiers/language-modifier-count-characters/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|count_characters}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-count-characters/#parameters","title":"Parameters","text":"Parameter Type Required Description 1 boolean No This determines whether to include whitespace characters in the count."},{"location":"designers/language-modifiers/language-modifier-count-characters/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n    $smarty-&gt;assign('articleTitle', 'Cold Wave Linked to Temperatures.');\n</code></pre> <p>Where template is:</p> <pre><code>    {$articleTitle}\n    {$articleTitle|count_characters}\n    {$articleTitle|count_characters:true}\n</code></pre> <p>Will output:</p> <pre><code>    Cold Wave Linked to Temperatures.\n    29\n    33\n</code></pre> <p>See also <code>count_words</code>, <code>count_sentences</code> and <code>count_paragraphs</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-count-paragraphs/","title":"count_paragraphs","text":"<p>This is used to count the number of paragraphs in a variable.</p>"},{"location":"designers/language-modifiers/language-modifier-count-paragraphs/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|count_paragraphs}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-count-paragraphs/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n    $smarty-&gt;assign('articleTitle',\n                     \"War Dims Hope for Peace. Child's Death Ruins Couple's Holiday.\\n\\n\n                     Man is Fatally Slain. Death Causes Loneliness, Feeling of Isolation.\"\n                    );\n</code></pre> <p>Where template is:</p> <pre><code>    {$articleTitle}\n    {$articleTitle|count_paragraphs}\n</code></pre> <p>Will output:</p> <pre><code>    War Dims Hope for Peace. Child's Death Ruins Couple's Holiday.\n\n    Man is Fatally Slain. Death Causes Loneliness, Feeling of Isolation.\n    2\n</code></pre> <p>See also <code>count_characters</code>, <code>count_sentences</code> and <code>count_words</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-count-sentences/","title":"count_sentences","text":"<p>This is used to count the number of sentences in a variable. A sentence being delimited by a dot, question- or exclamation-mark (.?!).</p>"},{"location":"designers/language-modifiers/language-modifier-count-sentences/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|count_sentences}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-count-sentences/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n    $smarty-&gt;assign('articleTitle',\n                     'Two Soviet Ships Collide - One Dies.\n                     Enraged Cow Injures Farmer with Axe.'\n                     );\n</code></pre> <p>Where template is:</p> <pre><code>    {$articleTitle}\n    {$articleTitle|count_sentences}\n</code></pre> <p>Will output:</p> <pre><code>    Two Soviet Ships Collide - One Dies. Enraged Cow Injures Farmer with Axe.\n    2\n</code></pre> <p>See also <code>count_characters</code>, <code>count_paragraphs</code> and <code>count_words</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-count-words/","title":"count_words","text":"<p>This is used to count the number of words in a variable.</p>"},{"location":"designers/language-modifiers/language-modifier-count-words/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|count_words}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-count-words/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n    $smarty-&gt;assign('articleTitle', 'Dealers Will Hear Car Talk at Noon.');\n</code></pre> <p>Where template is:</p> <pre><code>    {$articleTitle}\n    {$articleTitle|count_words}\n</code></pre> <p>This will output:</p> <pre><code>    Dealers Will Hear Car Talk at Noon.\n    7\n</code></pre> <p>See also <code>count_characters</code>, <code>count_paragraphs</code> and <code>count_sentences</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-count/","title":"count","text":"<p>Returns the number of elements in an array (or Countable object). Will return 0 for null. Returns 1 for any other type (such as a string).</p> <p>If the optional mode parameter is set to 1, count() will recursively count the array.  This is particularly useful for counting all the elements of a multidimensional array.</p>"},{"location":"designers/language-modifiers/language-modifier-count/#basic-usage","title":"Basic usage","text":"<pre><code>{if $myVar|count &gt; 3}4 or more{/if}\n{if count($myVar) &gt; 3}4 or more{/if}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-count/#parameters","title":"Parameters","text":"Parameter Type Required Description 1 int No If set to 1, count() will recursively count the array."},{"location":"designers/language-modifiers/language-modifier-date-format/","title":"date_format","text":"<p>This formats a date and time into the given <code>strftime()</code> format. Dates can be passed to Smarty as unix timestamps, DateTime objects, mysql timestamps or any string made up of month day year, parsable by php\\'s <code>strtotime()</code>. Designers can then use <code>date_format</code> to have complete control of the formatting of the date. If the date passed to <code>date_format</code> is empty and a second parameter is passed, that will be used as the date to format.</p>"},{"location":"designers/language-modifiers/language-modifier-date-format/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|date_format:\"%Y-%m-%d\"}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-date-format/#parameters","title":"Parameters","text":"Parameter Position Type Required Default Description 1 string No %b %e, %Y This is the format for the outputted date. 2 string No n/a This is the default date if the input is empty. <p>Note</p> <p>Since Smarty-2.6.10 numeric values passed to <code>date_format</code> are always (except for mysql timestamps, see below) interpreted as a unix timestamp.</p> <p>Before Smarty-2.6.10 numeric strings that where also parsable by <code>strtotime()</code> in php (like <code>YYYYMMDD</code>) where sometimes (depending on the underlying implementation of <code>strtotime()</code>) interpreted as date strings and NOT as timestamps.</p> <p>The only exception are mysql timestamps: They are also numeric only and 14 characters long (<code>YYYYMMDDHHMMSS</code>), mysql timestamps have precedence over unix timestamps.</p> <p>Note</p> <p><code>date_format</code> is essentially a wrapper to PHP's <code>strftime()</code> function. You may have more or less conversion specifiers available depending on your system's <code>strftime()</code> function where PHP was compiled. Check your system\\'s manpage for a full list of valid specifiers. However, a few of the specifiers are emulated on Windows. These are: %D, %e, %h, %l, %n, %r, %R, %t, %T.</p>"},{"location":"designers/language-modifiers/language-modifier-date-format/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$config['date'] = '%I:%M %p';\n$config['time'] = '%H:%M:%S';\n$smarty-&gt;assign('config', $config);\n$smarty-&gt;assign('yesterday', strtotime('-1 day'));\n</code></pre> <p>This template uses <code>$smarty.now</code> to get the current time:</p> <pre><code>{$smarty.now|date_format}\n{$smarty.now|date_format:\"%D\"}\n{$smarty.now|date_format:$config.date}\n{$yesterday|date_format}\n{$yesterday|date_format:\"%A, %B %e, %Y\"}\n{$yesterday|date_format:$config.time}\n</code></pre> <p>This above will output:</p> <pre><code>Jan 1, 2022\n01/01/22\n02:33 pm\nDec 31, 2021\nMonday, December 1, 2021\n14:33:00\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-date-format/#conversion-specifiers","title":"Conversion specifiers","text":"<p><code>date_format</code> conversion specifiers:</p> <ul> <li>%a - abbreviated weekday name according to the current locale</li> <li>%A - full weekday name according to the current locale</li> <li>%b - abbreviated month name according to the current locale</li> <li>%B - full month name according to the current locale</li> <li>%c - preferred date and time representation for the current locale</li> <li>%C - century number (the year divided by 100 and truncated to an     integer, range 00 to 99)</li> <li>%d - day of the month as a decimal number (range 01 to 31)</li> <li>%D - same as %m/%d/%y</li> <li>%e - day of the month as a decimal number, a single digit is     preceded by a space (range 1 to 31)</li> <li>%g - Week-based year within century [00,99]</li> <li>%G - Week-based year, including the century [0000,9999]</li> <li>%h - same as %b</li> <li>%H - hour as a decimal number using a 24-hour clock (range 00     to 23)</li> <li>%I - hour as a decimal number using a 12-hour clock (range 01     to 12)</li> <li>%j - day of the year as a decimal number (range 001 to 366)</li> <li>%k - Hour (24-hour clock) single digits are preceded by a blank.     (range 0 to 23)</li> <li>%l - hour as a decimal number using a 12-hour clock, single digits     preceded by a space (range 1 to 12)</li> <li>%m - month as a decimal number (range 01 to 12)</li> <li>%M - minute as a decimal number</li> <li>%n - newline character</li> <li>%p - either 'am' or 'pm' according to the given time value, or     the corresponding strings for the current locale</li> <li>%r - time in a.m. and p.m. notation</li> <li>%R - time in 24 hour notation</li> <li>%S - second as a decimal number</li> <li>%t - tab character</li> <li>%T - current time, equal to %H:%M:%S</li> <li>%u - weekday as a decimal number [1,7], with 1 representing     Monday</li> <li>%U - week number of the current year as a decimal number, starting     with the first Sunday as the first day of the first week</li> <li>%V - The ISO 8601:1988 week number of the current year as a decimal     number, range 01 to 53, where week 1 is the first week that has at     least 4 days in the current year, and with Monday as the first day     of the week.</li> <li>%w - day of the week as a decimal, Sunday being 0</li> <li>%W - week number of the current year as a decimal number, starting     with the first Monday as the first day of the first week</li> <li>%x - preferred date representation for the current locale without     the time</li> <li>%X - preferred time representation for the current locale without     the date</li> <li>%y - year as a decimal number without a century (range 00 to 99)</li> <li>%Y - year as a decimal number including the century</li> <li>%Z - time zone or name or abbreviation</li> <li>%% - a literal '%' character</li> </ul> <p>See also <code>$smarty.now</code>, <code>strftime()</code>, <code>{html_select_date}</code> and the date tips page.</p>"},{"location":"designers/language-modifiers/language-modifier-debug-print-var/","title":"debug_print_var","text":"<p>Returns the value of the given variable in a human-readable format in HTML.  Used in the debug console, but you can also use it in your template while developing to see what is going on under the hood.</p> <p>Note</p> <p>Use for debugging only! Since you may accidentally reveal sensitive information or introduce vulnerabilities such as XSS using this method never use it in production.</p>"},{"location":"designers/language-modifiers/language-modifier-debug-print-var/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|debug_print_var}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-debug-print-var/#parameters","title":"Parameters","text":"Parameter Type Required Description 1 int No maximum recursion depth if $var is an array or object (defaults to 10) 2 int No maximum string length if $var is a string (defaults to 40)"},{"location":"designers/language-modifiers/language-modifier-default/","title":"default","text":"<p>This is used to set a default value for a variable. If the variable is unset or an empty string, the given default value is printed instead. Default takes the one argument.</p>"},{"location":"designers/language-modifiers/language-modifier-default/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|default:\"(none)\"}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-default/#parameters","title":"Parameters","text":"Parameter Type Required Default Description 1 string No empty This is the default value to output if the variable is empty."},{"location":"designers/language-modifiers/language-modifier-default/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n    $smarty-&gt;assign('articleTitle', 'Dealers Will Hear Car Talk at Noon.');\n    $smarty-&gt;assign('email', '');\n</code></pre> <p>Where template is:</p> <pre><code>{$articleTitle|default:'no title'}\n{$myTitle|default:'no title'}\n{$email|default:'No email address available'}\n</code></pre> <p>Will output:</p> <pre><code>Dealers Will Hear Car Talk at Noon.\nno title\nNo email address available\n</code></pre> <p>See also the default variable handling and the blank variable handling pages.</p>"},{"location":"designers/language-modifiers/language-modifier-empty/","title":"empty","text":"<p>Returns true if var does not exist or has a value that is empty or equal to zero, aka falsey, see conversion to boolean. Otherwise returns false.</p>"},{"location":"designers/language-modifiers/language-modifier-empty/#basic-usage","title":"Basic usage","text":"<pre><code>{if $myVar|empty}it's an empty variable{/if}\n{if empty($myVar)}it's an empty variable{/if}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-escape/","title":"escape","text":"<p><code>escape</code> is used to encode or escape a variable to <code>html</code>, <code>url</code>, <code>single quotes</code>, <code>hex</code>, <code>hexentity</code>, <code>javascript</code> and <code>mail</code>. By default its <code>html</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-escape/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|escape}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-escape/#parameters","title":"Parameters","text":"Parameter Position Type Required Possible Values Default Description 1 string No <code>html</code>, <code>htmlall</code>, <code>url</code>, <code>urlpathinfo</code>, <code>quotes</code>, <code>hex</code>, <code>hexentity</code>, <code>javascript</code>, <code>mail</code> <code>html</code> This is the escape format to use. 2 string No <code>ISO-8859-1</code>, <code>UTF-8</code>, and any character set supported by <code>htmlentities()</code> <code>UTF-8</code> The character set encoding passed to htmlentities() et. al. 3 boolean No FALSE TRUE Double encode entities from &amp; to &amp;amp; (applies to <code>html</code> and <code>htmlall</code> only)"},{"location":"designers/language-modifiers/language-modifier-escape/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$smarty-&gt;assign('articleTitle',\n                \"'Stiff Opposition Expected to Casketless Funeral Plan'\"\n                );\n$smarty-&gt;assign('EmailAddress','smarty@example.com');\n</code></pre> <p>These are example <code>escape</code> template lines followed by the output</p> <pre><code>{$articleTitle}\n'Stiff Opposition Expected to Casketless Funeral Plan'\n\n{$articleTitle|escape}\n&amp;#039;Stiff Opposition Expected to Casketless Funeral Plan&amp;#039;\n\n{$articleTitle|escape:'html'}    {* escapes  &amp; \" ' &lt; &gt; *}\n&amp;#039;Stiff Opposition Expected to Casketless Funeral Plan&amp;#039;\n\n{$articleTitle|escape:'htmlall'} {* escapes ALL html entities *}\n&amp;#039;Stiff Opposition Expected to Casketless Funeral Plan&amp;#039;\n\n&lt;a href=\"?title={$articleTitle|escape:'url'}\"&gt;click here&lt;/a&gt;\n&lt;a\nhref=\"?title=%27Stiff%20Opposition%20Expected%20to%20Casketless%20Funeral%20Plan%27\"&gt;click here&lt;/a&gt;\n\n{$articleTitle|escape:'quotes'}\n\\'Stiff Opposition Expected to Casketless Funeral Plan\\'\n\n&lt;a href=\"mailto:{$EmailAddress|escape:\"hex\"}\"&gt;{$EmailAddress|escape:\"hexentity\"}&lt;/a&gt;\n{$EmailAddress|escape:'mail'}    {* this converts to email to text *}\n&lt;a href=\"mailto:%62%6f%..snip..%65%74\"&gt;&amp;#x62;&amp;#x6f;&amp;#x62..snip..&amp;#x65;&amp;#x74;&lt;/a&gt;\n\n{'mail@example.com'|escape:'mail'}\nsmarty [AT] example [DOT] com\n\n{* the \"rewind\" parameter registers the current location *}\n&lt;a href=\"$my_path?page=foo&amp;rewind={$my_uri|escape:url}\"&gt;click here&lt;/a&gt;\n</code></pre> <p>This snippet is useful for emails, but see also <code>{mailto}</code></p> <pre><code>{* email address mangled *}\n&lt;a href=\"mailto:{$EmailAddress|escape:'hex'}\"&gt;{$EmailAddress|escape:'mail'}&lt;/a&gt;\n</code></pre> <p>See also auto-escaping, escaping smarty parsing, <code>{mailto}</code> and the obfuscating email addresses pages.</p>"},{"location":"designers/language-modifiers/language-modifier-from-charset/","title":"from_charset","text":"<p><code>from_charset</code> is used to transcode a string from a given charset to the internal charset. This is the exact opposite of the to_charset modifier.</p>"},{"location":"designers/language-modifiers/language-modifier-from-charset/#parameters","title":"Parameters","text":"Parameter Position Type Required Possible Values Default Description 1 string No <code>ISO-8859-1</code>, <code>UTF-8</code>, and any character set supported by <code>mb_convert_encoding()</code> <code>ISO-8859-1</code> The charset encoding the value is supposed to be decoded from <p>Note</p> <p>Charset encoding should be handled by the application itself. This modifier should only be used in cases where the application cannot anticipate that a certain string is required in another encoding.</p> <p>See also Configuring Smarty, to_charset modifier.</p>"},{"location":"designers/language-modifiers/language-modifier-in_array/","title":"in_array","text":"<p>test if value is contained in an array</p>"},{"location":"designers/language-modifiers/language-modifier-in_array/#basic-usage","title":"Basic usage","text":"<pre><code>{if in_array('value2', $myarray)} value2 is in myarray{/if}\n</code></pre> <p>Can be replaced by operator is in</p> <pre><code>{if 'value2' is in $myarray}value2 is in myarray{/if}\n</code></pre> <p>See Also operators</p>"},{"location":"designers/language-modifiers/language-modifier-indent/","title":"indent","text":"<p>This indents a string on each line, default is 4. As an optional parameter, you can specify the number of characters to indent. As an optional second parameter, you can specify the character to use to indent with. For example: use <code>\"\\t\"</code> for a tab.</p>"},{"location":"designers/language-modifiers/language-modifier-indent/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|indent:4}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-indent/#parameters","title":"Parameters","text":"Parameter Position Type Required Default Description 1 integer No 4 This determines how many characters to indent to. 2 string No (one space) This is the character used to indent with."},{"location":"designers/language-modifiers/language-modifier-indent/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$smarty-&gt;assign('articleTitle',\n                'NJ judge to rule on nude beach.\nSun or rain expected today, dark tonight.\nStatistics show that teen pregnancy drops off significantly after 25.'\n                );\n</code></pre> <p>Where template is:</p> <pre><code>{$articleTitle}\n\n{$articleTitle|indent}\n\n{$articleTitle|indent:10}\n\n{$articleTitle|indent:1:\"\\t\"}\n</code></pre> <p>Will output:</p> <pre><code>NJ judge to rule on nude beach.\nSun or rain expected today, dark tonight.\nStatistics show that teen pregnancy drops off significantly after 25.\n\n    NJ judge to rule on nude beach.\n    Sun or rain expected today, dark tonight.\n    Statistics show that teen pregnancy drops off significantly after 25.\n\n          NJ judge to rule on nude beach.\n          Sun or rain expected today, dark tonight.\n          Statistics show that teen pregnancy drops off significantly after 25.\n\n        NJ judge to rule on nude beach.\n        Sun or rain expected today, dark tonight.\n        Statistics show that teen pregnancy drops off significantly after 25.\n</code></pre> <p>See also <code>strip</code>, <code>wordwrap</code> and <code>spacify</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-is_array/","title":"is_array","text":"<p>Return true if the variable passed to it is an array.</p>"},{"location":"designers/language-modifiers/language-modifier-is_array/#basic-usage","title":"Basic usage","text":"<pre><code>{if $myVar|is_array}it's an array{/if}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-isset/","title":"isset","text":"<p>Returns true if the variable(s) passed to it are different from null.</p> <p>If multiple parameters are supplied then isset() will return true only if all of the parameters are  not null.</p>"},{"location":"designers/language-modifiers/language-modifier-isset/#basic-usage","title":"Basic usage","text":"<pre><code>{if $myVar|isset}all set!{/if}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-join/","title":"join","text":"<p>Returns a string containing all the element of the given array  with the separator string between each.</p>"},{"location":"designers/language-modifiers/language-modifier-join/#basic-usage","title":"Basic usage","text":"<p>For <code>$myArray</code> populated with <code>['a','b','c']</code>, the following will return the string <code>abc</code>. <pre><code>{$myArray|join}\n</code></pre></p>"},{"location":"designers/language-modifiers/language-modifier-join/#parameters","title":"Parameters","text":"Parameter Type Required Description 1 string No glue used between array elements. Defaults to empty string."},{"location":"designers/language-modifiers/language-modifier-join/#examples","title":"Examples","text":"<p>For <code>$myArray</code> populated with <code>[1,2,3]</code>, the following will return the string <code>1-2-3</code>. <pre><code>{$myArray|join:\"-\"}\n</code></pre></p>"},{"location":"designers/language-modifiers/language-modifier-json-encode/","title":"json_encode","text":"<p>Transforms a value into a valid JSON string.</p>"},{"location":"designers/language-modifiers/language-modifier-json-encode/#basic-usage","title":"Basic usage","text":"<p><pre><code>{$user|json_encode}\n</code></pre> Depending on the value of <code>$user</code> this would return a string in JSON-format, e.g. <code>{\"username\":\"my_username\",\"email\":\"my_username@smarty.net\"}</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-json-encode/#parameters","title":"Parameters","text":"Parameter Type Required Description 1 int No bitmask of flags, directly passed to PHP's json_encode"},{"location":"designers/language-modifiers/language-modifier-json-encode/#examples","title":"Examples","text":"<p>By passing <code>16</code> as the second parameter, you can force json_encode to always format the JSON-string as an object. Without it, an array <code>$myArray = [\"a\",\"b\"]</code> would be formatted as a javascript array: </p> <pre><code>{$myArray|json_encode} # renders: [\"a\",\"b\"]\n{$myArray|json_encode:16} # renders: {\"0\":\"a\",\"1\":\"b\"}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-lower/","title":"lower","text":"<p>This is used to lowercase a variable. This is equivalent to the PHP <code>strtolower()</code> function.</p>"},{"location":"designers/language-modifiers/language-modifier-lower/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|lower}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-lower/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$smarty-&gt;assign('articleTitle', 'Two Convicts Evade Noose, Jury Hung.');\n</code></pre> <p>Where template is:</p> <pre><code>{$articleTitle}\n{$articleTitle|lower}\n</code></pre> <p>This will output:</p> <pre><code>Two Convicts Evade Noose, Jury Hung.\ntwo convicts evade noose, jury hung.\n</code></pre> <p>See also <code>upper</code> and <code>capitalize</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-nl2br/","title":"nl2br","text":"<p>All <code>\"\\n\"</code> line breaks will be converted to html <code>&lt;br /&gt;</code> tags in the given variable. This is equivalent to the PHP\\'s <code>nl2br()</code> function.</p>"},{"location":"designers/language-modifiers/language-modifier-nl2br/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|nl2br}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-nl2br/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$smarty-&gt;assign('articleTitle',\n                \"Sun or rain expected\\ntoday, dark tonight\"\n                );\n</code></pre> <p>Where the template is:</p> <pre><code>{$articleTitle|nl2br}\n</code></pre> <p>Will output:</p> <pre><code>Sun or rain expected&lt;br /&gt;today, dark tonight\n</code></pre> <p>See also <code>word_wrap</code>, <code>count_paragraphs</code> and <code>count_sentences</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-noprint/","title":"noprint","text":"<p>Always returns an empty string. This can be used to call a function or a method on an object that  returns output, and suppress the output.</p>"},{"location":"designers/language-modifiers/language-modifier-noprint/#basic-usage","title":"Basic usage","text":"<pre><code>{$controller-&gt;sendEmail()|noprint}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-number-format/","title":"number_format","text":"<p>Allows you to format a number using decimals and a thousands-separator. By default, the number of decimals is 0  and the number is rounded.</p>"},{"location":"designers/language-modifiers/language-modifier-number-format/#basic-usage","title":"Basic usage","text":"<pre><code>{$num  = 2000.151}\n{$num|number_format} # renders: 2,000\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-number-format/#parameters","title":"Parameters","text":"Parameter Type Required Description 1 int No number of decimals (defaults to 0) 2 string No decimal separator (defaults to \".\") 3 string No thousands-separator (defaults to \",\")"},{"location":"designers/language-modifiers/language-modifier-number-format/#examples","title":"Examples","text":"<pre><code>{$num  = 2000.151}\n{$num|number_format:2} # renders: 2,000.15\n</code></pre> <pre><code>{$num  = 2000.151}\n{$num|number_format:2:\".\":\"\"} # renders: 2000.15\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-raw/","title":"raw","text":"<p>Prevents variable escaping when auto-escaping is activated.</p>"},{"location":"designers/language-modifiers/language-modifier-raw/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|raw}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-regex-replace/","title":"regex_replace","text":"<p>A regular expression search and replace on a variable. Use the <code>preg_replace()</code> syntax from the PHP manual.</p>"},{"location":"designers/language-modifiers/language-modifier-regex-replace/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|regex_replace:\"/foo/\":\"bar\"}\n</code></pre> <p>Note</p> <p>Although Smarty supplies this regex convenience modifier, it is usually better to apply regular expressions in PHP, either via custom functions or modifiers. Regular expressions are considered application code and are not part of presentation logic.</p>"},{"location":"designers/language-modifiers/language-modifier-regex-replace/#parameters","title":"Parameters","text":"Parameter Position Type Required Description 1 string Yes This is the regular expression to be replaced. 2 string Yes This is the string of text to replace with."},{"location":"designers/language-modifiers/language-modifier-regex-replace/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$smarty-&gt;assign('articleTitle', \"Infertility unlikely to\\nbe passed on, experts say.\");\n</code></pre> <p>Where template is:</p> <pre><code>{* replace each carriage return, tab and new line with a space *}\n\n{$articleTitle}\n{$articleTitle|regex_replace:\"/[\\r\\t\\n]/\":\" \"}\n</code></pre> <p>Will output:</p> <pre><code>Infertility unlikely to\nbe passed on, experts say.\nInfertility unlikely to be passed on, experts say.\n</code></pre> <p>See also <code>replace</code> and <code>escape</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-replace/","title":"replace","text":"<p>A simple search and replace on a variable. This is equivalent to the PHP's <code>str_replace()</code> function.</p>"},{"location":"designers/language-modifiers/language-modifier-replace/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|replace:\"foo\":\"bar\"}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-replace/#parameters","title":"Parameters","text":"Parameter Position Type Required Description 1 string Yes This is the string of text to be replaced. 2 string Yes This is the string of text to replace with."},{"location":"designers/language-modifiers/language-modifier-replace/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$smarty-&gt;assign('articleTitle', \"Child's Stool Great for Use in Garden.\");\n</code></pre> <p>Where template is:</p> <pre><code>{$articleTitle}\n{$articleTitle|replace:'Garden':'Vineyard'}\n{$articleTitle|replace:' ':'   '}\n</code></pre> <p>Will output:</p> <pre><code>Child's Stool Great for Use in Garden.\nChild's Stool Great for Use in Vineyard.\nChild's   Stool   Great   for   Use   in   Garden.\n</code></pre> <p>See also <code>regex_replace</code> and <code>escape</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-round/","title":"round","text":"<p>Rounds a number to the specified precision.</p>"},{"location":"designers/language-modifiers/language-modifier-round/#basic-usage","title":"Basic usage","text":"<pre><code>{3.14|round} # renders: 3\n</code></pre> <pre><code>{3.141592|round:2} # renders: 3.14\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-round/#parameters","title":"Parameters","text":"Parameter Type Required Description 1 int No precision (defaults to 0) 2 int No mode (defaults to 1) <p>If 'precision' is negative, the number is rounded to the nearest power of 10. See examples below.</p> <p>The parameter 'mode' defines how the rounding is done. By default, 2.5 is rounded to 3, whereas 2.45 is rounded to 2. You usually don't need to change this. For more details on rounding modes,  see PHP's documentation on round.</p>"},{"location":"designers/language-modifiers/language-modifier-round/#examples","title":"Examples","text":"<p>By passing <code>16</code> as the second parameter, you can force json_encode to always format the JSON-string as an object. Without it, an array <code>$myArray = [\"a\",\"b\"]</code> would be formatted as a javascript array:</p> <pre><code>{$myArray|json_encode} # renders: [\"a\",\"b\"]\n{$myArray|json_encode:16} # renders: {\"0\":\"a\",\"1\":\"b\"}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-spacify/","title":"spacify","text":"<p><code>spacify</code> is a way to insert a space between every character of a variable. You can optionally pass a different character or string to insert.</p>"},{"location":"designers/language-modifiers/language-modifier-spacify/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|spacify}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-spacify/#parameters","title":"Parameters","text":"Parameter Position Type Required Default Description 1 string No one space This what gets inserted between each character of the variable."},{"location":"designers/language-modifiers/language-modifier-spacify/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$smarty-&gt;assign('articleTitle', 'Something Went Wrong in Jet Crash, Experts Say.');\n</code></pre> <p>Where template is:</p> <pre><code>{$articleTitle}\n{$articleTitle|spacify}\n{$articleTitle|spacify:\"^^\"}\n</code></pre> <p>Will output:</p> <pre><code>Something Went Wrong in Jet Crash, Experts Say.\nS o m e t h i n g   W .... snip ....  s h ,   E x p e r t s   S a y .\nS^^o^^m^^e^^t^^h^^i^^n^^g^^ .... snip .... ^^e^^r^^t^^s^^ ^^S^^a^^y^^.\n</code></pre> <p>See also <code>wordwrap</code> and <code>nl2br</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-split/","title":"split","text":"<p>Splits a string into an array, using the optional second parameter as the separator.</p>"},{"location":"designers/language-modifiers/language-modifier-split/#basic-usage","title":"Basic usage","text":"<p>For <code>$chars</code> populated with <code>'abc'</code>, the following will produce a html list with 3 elements (a, b and c). <pre><code>&lt;ol&gt;\n    {foreach $chars|split as $char}\n        &lt;li&gt;{$char|escape}&lt;/li&gt;\n    {/foreach}\n&lt;/ol&gt;\n</code></pre></p>"},{"location":"designers/language-modifiers/language-modifier-split/#parameters","title":"Parameters","text":"Parameter Type Required Description 1 string No separator used to split the string on. Defaults to empty string, causing each character in the source string to be separate."},{"location":"designers/language-modifiers/language-modifier-split/#examples","title":"Examples","text":"<p>For <code>$ids</code> populated with <code>'1,2,3'</code>, the following will produce a html list with 3 elements (1, 2 and 3). <pre><code>&lt;ol&gt;\n    {foreach $ids|split:',' as $id}\n        &lt;li&gt;{$id|escape}&lt;/li&gt;\n    {/foreach}\n&lt;/ol&gt;\n</code></pre></p>"},{"location":"designers/language-modifiers/language-modifier-str-repeat/","title":"str_repeat","text":"<p>Repeats the given value n times.</p>"},{"location":"designers/language-modifiers/language-modifier-str-repeat/#basic-usage","title":"Basic usage","text":"<pre><code>{\"hi\"|str_repeat:2} # renders: hihi\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-str-repeat/#parameters","title":"Parameters","text":"Parameter Type Required Description 1 int yes number of repetitions"},{"location":"designers/language-modifiers/language-modifier-string-format/","title":"string_format","text":"<p>This is a way to format strings, such as decimal numbers and such. Use the syntax for <code>sprintf()</code> for the formatting.</p>"},{"location":"designers/language-modifiers/language-modifier-string-format/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|string_format:\"%d\"}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-string-format/#parameters","title":"Parameters","text":"Parameter Position Type Required Description 1 string Yes This is what format to use. (sprintf)"},{"location":"designers/language-modifiers/language-modifier-string-format/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$smarty-&gt;assign('number', 23.5787446);\n</code></pre> <p>Where template is:</p> <pre><code>{$number}\n{$number|string_format:\"%.2f\"}\n{$number|string_format:\"%d\"}\n</code></pre> <p>Will output:</p> <pre><code>23.5787446\n23.58\n23\n</code></pre> <p>See also <code>date_format</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-strip-tags/","title":"strip_tags","text":"<p>This strips out HTML markup tags, basically anything between <code>&lt;</code> and <code>&gt;</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-strip-tags/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|strip_tags}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-strip-tags/#parameters","title":"Parameters","text":"Parameter Position Type Required Default Description 1 bool No TRUE This determines whether the tags are replaced by ' ' or ''"},{"location":"designers/language-modifiers/language-modifier-strip-tags/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$smarty-&gt;assign('articleTitle',\n                \"Blind Woman Gets &lt;font face=\\\"helvetica\\\"&gt;New\nKidney&lt;/font&gt; from Dad she Hasn't Seen in &lt;b&gt;years&lt;/b&gt;.\"\n               );\n</code></pre> <p>Where template is:</p> <pre><code>{$articleTitle}\n{$articleTitle|strip_tags} {* same as {$articleTitle|strip_tags:true} *}\n{$articleTitle|strip_tags:false}\n</code></pre> <p>Will output:</p> <pre><code>Blind Woman Gets &lt;font face=\"helvetica\"&gt;New Kidney&lt;/font&gt; from Dad she Hasn't Seen in &lt;b&gt;years&lt;/b&gt;.\nBlind Woman Gets  New Kidney  from Dad she Hasn't Seen in  years .\nBlind Woman Gets New Kidney from Dad she Hasn't Seen in years.\n</code></pre> <p>See also <code>replace</code> and <code>regex_replace</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-strip/","title":"strip","text":"<p>This replaces all spaces, newlines and tabs with a single space, or with the supplied string.</p>"},{"location":"designers/language-modifiers/language-modifier-strip/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|strip}\n</code></pre> <p>Note</p> <p>If you want to strip blocks of template text, use the built-in <code>{strip}</code> function.</p>"},{"location":"designers/language-modifiers/language-modifier-strip/#examples","title":"Examples","text":"<pre><code>&lt;?php\n$smarty-&gt;assign('articleTitle', \"Grandmother of\\neight makes\\t    hole in one.\");\n$smarty-&gt;display('index.tpl');\n</code></pre> <p>Where template is:</p> <pre><code>{$articleTitle}\n{$articleTitle|strip}\n{$articleTitle|strip:'&amp;nbsp;'}\n</code></pre> <p>Will output:</p> <pre><code>Grandmother of\neight makes        hole in one.\nGrandmother of eight makes hole in one.\nGrandmother&amp;nbsp;of&amp;nbsp;eight&amp;nbsp;makes&amp;nbsp;hole&amp;nbsp;in&amp;nbsp;one.\n</code></pre> <p>See also <code>{strip}</code> and <code>truncate</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-strlen/","title":"strlen","text":"<p>Returns the length (number of characters) in the given string, including spaces.</p>"},{"location":"designers/language-modifiers/language-modifier-strlen/#basic-usage","title":"Basic usage","text":"<pre><code>{\"Smarty\"|strlen} # renders: 6\n{156|strlen} # renders: 3\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-substr/","title":"substr","text":"<p>Returns a part (substring) of the given string starting at a given offset.</p>"},{"location":"designers/language-modifiers/language-modifier-substr/#basic-usage","title":"Basic usage","text":"<pre><code>{\"Smarty\"|substr:2} # renders: arty\n{\"Smarty\"|substr:2:3} # renders: art\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-substr/#parameters","title":"Parameters","text":"Parameter Type Required Description 1 int yes offset (zero based, can be negative) 2 int no length of substring returned (unlimited of omitted)"},{"location":"designers/language-modifiers/language-modifier-substr/#examples","title":"Examples","text":"<p>When used with a negative offset, the substring starts n characters from the end of the string counting backwards. <pre><code>{\"Smarty\"|substr:-2} # renders: ty\n{\"Smarty\"|substr:-2:1} # renders: t\n</code></pre></p>"},{"location":"designers/language-modifiers/language-modifier-to-charset/","title":"to_charset","text":"<p><code>to_charset</code> is used to transcode a string from the internal charset to a given charset. This is the exact opposite of the from_charset modifier.</p>"},{"location":"designers/language-modifiers/language-modifier-to-charset/#parameters","title":"Parameters","text":"Parameter Position Type Required Possible Values Default Description 1 string No <code>ISO-8859-1</code>, <code>UTF-8</code>, and any character set supported by <code>mb_convert_encoding()</code> <code>ISO-8859-1</code> The charset encoding the value is supposed to be encoded to <p>Note</p> <p>Charset encoding should be handled by the application itself. This modifier should only be used in cases where the application cannot anticipate that a certain string is required in another encoding.</p> <p>See also Configuring Smarty, from_charset modifier.</p>"},{"location":"designers/language-modifiers/language-modifier-truncate/","title":"truncate","text":"<p>This truncates a variable to a character length, the default is 80. As an optional second parameter, you can specify a string of text to display at the end if the variable was truncated. The characters in the string are included with the original truncation length. By default, <code>truncate</code> will attempt to cut off at a word boundary. If you want to cut off at the exact character length, pass the optional third parameter of TRUE.</p>"},{"location":"designers/language-modifiers/language-modifier-truncate/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|truncate:40:\"...\"}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-truncate/#parameters","title":"Parameters","text":"Parameter Position Type Required Default Description 1 integer No 80 This determines how many characters to truncate to. 2 string No ... This is a text string that replaces the truncated text. Its length is included in the truncation length setting. 3 boolean No FALSE This determines whether or not to truncate at a word boundary with FALSE, or at the exact character with TRUE. 4 boolean No FALSE This determines whether the truncation happens at the end of the string with FALSE, or in the middle of the string with TRUE. Note that if this setting is TRUE, then word boundaries are ignored."},{"location":"designers/language-modifiers/language-modifier-truncate/#examples","title":"Examples","text":"<pre><code>&lt;?php\n$smarty-&gt;assign('articleTitle', 'Two Sisters Reunite after Eighteen Years at Checkout Counter.');\n</code></pre> <p>where template is:</p> <pre><code>{$articleTitle}\n{$articleTitle|truncate}\n{$articleTitle|truncate:30}\n{$articleTitle|truncate:30:\"\"}\n{$articleTitle|truncate:30:\"---\"}\n{$articleTitle|truncate:30:\"\":true}\n{$articleTitle|truncate:30:\"...\":true}\n{$articleTitle|truncate:30:'..':true:true}\n</code></pre> <p>This will output:</p> <pre><code>Two Sisters Reunite after Eighteen Years at Checkout Counter.\nTwo Sisters Reunite after Eighteen Years at Checkout Counter.\nTwo Sisters Reunite after...\nTwo Sisters Reunite after\nTwo Sisters Reunite after---\nTwo Sisters Reunite after Eigh\nTwo Sisters Reunite after E...\nTwo Sisters Re..ckout Counter.\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-unescape/","title":"unescape","text":"<p><code>unescape</code> is used to decode <code>entity</code>, <code>html</code> and <code>htmlall</code>. It counters the effects of the escape modifier for the given types.</p>"},{"location":"designers/language-modifiers/language-modifier-unescape/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|unescape}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-unescape/#parameters","title":"Parameters","text":"Parameter Position Type Required Possible Values Default Description 1 string No <code>html</code>, <code>htmlall</code>, <code>entity</code>, <code>html</code> This is the escape format to use. 2 string No <code>ISO-8859-1</code>, <code>UTF-8</code>, and any character set supported by <code>htmlentities()</code> <code>UTF-8</code> The character set encoding passed to html_entity_decode() or htmlspecialchars_decode() or mb_convert_encoding() et. al."},{"location":"designers/language-modifiers/language-modifier-unescape/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$smarty-&gt;assign('articleTitle',\n                \"Germans use &amp;quot;&amp;Uuml;mlauts&amp;quot; and pay in &amp;euro;uro\"\n                );\n</code></pre> <p>These are example <code>unescape</code> template lines followed by the output</p> <pre><code>{$articleTitle}\nGermans use &amp;quot;&amp;Uuml;mlauts&amp;quot; and pay in &amp;euro;uro\n\n{$articleTitle|unescape:\"html\"}\nGermans use \"&amp;Uuml;mlauts\" and pay in &amp;euro;uro\n\n{$articleTitle|unescape:\"htmlall\"}\nGermans use \"\u00dcmlauts\" and pay in \u20acuro\n</code></pre> <p>See also escaping smarty parsing, escape modifier.</p>"},{"location":"designers/language-modifiers/language-modifier-upper/","title":"upper","text":"<p>This is used to uppercase a variable. This is equivalent to the PHP <code>strtoupper()</code> function.</p>"},{"location":"designers/language-modifiers/language-modifier-upper/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|upper}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-upper/#examples","title":"Examples","text":"<pre><code>&lt;?php\n$smarty-&gt;assign('articleTitle', \"If Strike isn't Settled Quickly it may Last a While.\");\n</code></pre> <p>Where template is:</p> <pre><code>{$articleTitle}\n{$articleTitle|upper}\n</code></pre> <p>Will output:</p> <pre><code>If Strike isn't Settled Quickly it may Last a While.\nIF STRIKE ISN'T SETTLED QUICKLY IT MAY LAST A WHILE.\n</code></pre> <p>See also <code>lower</code> and <code>capitalize</code>.</p>"},{"location":"designers/language-modifiers/language-modifier-wordwrap/","title":"wordwrap","text":"<p>Wraps a string to a column width, the default is 80. As an optional second parameter, you can specify a string of text to wrap the text to the next line, the default is a carriage return <code>\"\\n\"</code>. By default, <code>wordwrap</code> will attempt to wrap at a word boundary. If you want to cut off at the exact character length, pass the optional third parameter as TRUE. This is equivalent to the PHP <code>wordwrap()</code> function.</p>"},{"location":"designers/language-modifiers/language-modifier-wordwrap/#basic-usage","title":"Basic usage","text":"<pre><code>{$myVar|wordwrap:30}\n</code></pre>"},{"location":"designers/language-modifiers/language-modifier-wordwrap/#parameters","title":"Parameters","text":"Parameter Position Type Required Default Description 1 integer No 80 This determines how many columns to wrap to. 2 string No \\n This is the string used to wrap words with. 3 boolean No FALSE This determines whether to wrap at a word boundary (FALSE), or at the exact character (TRUE)."},{"location":"designers/language-modifiers/language-modifier-wordwrap/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n$smarty-&gt;assign('articleTitle',\n                \"Blind woman gets new kidney from dad she hasn't seen in years.\"\n               );\n</code></pre> <p>Where template is</p> <pre><code>{$articleTitle}\n\n{$articleTitle|wordwrap:30}\n\n{$articleTitle|wordwrap:20}\n\n{$articleTitle|wordwrap:30:\"&lt;br /&gt;\\n\"}\n\n{$articleTitle|wordwrap:26:\"\\n\":true}\n</code></pre> <p>Will output:</p> <pre><code>Blind woman gets new kidney from dad she hasn't seen in years.\n\nBlind woman gets new kidney\nfrom dad she hasn't seen in\nyears.\n\nBlind woman gets new\nkidney from dad she\nhasn't seen in\nyears.\n\nBlind woman gets new kidney&lt;br /&gt;\nfrom dad she hasn't seen in&lt;br /&gt;\nyears.\n\nBlind woman gets new kidn\ney from dad she hasn't se\nen in years.\n</code></pre> <p>See also <code>nl2br</code> and <code>{textformat}</code>.</p>"},{"location":"designers/language-variables/","title":"Variables","text":"<p>Smarty has several types of variables. The type of the variable depends on what symbol it is prefixed or enclosed within.</p> <ul> <li>Variables assigned from PHP</li> <li>Variables loaded from config files</li> <li>{$smarty} reserved variable</li> </ul> <p>Variables in Smarty can be either displayed directly or used as arguments for tags, attributes and modifiers, inside conditional expressions, etc. To print a variable, simply enclose it in the delimiters so that it is the only thing contained between them.</p> <pre><code>{$Name}\n\n{$product.part_no} &lt;b&gt;{$product.description}&lt;/b&gt;\n\n{$Contacts[row].Phone}\n\n&lt;body bgcolor=\"{#bgcolor#}\"&gt;\n</code></pre>"},{"location":"designers/language-variables/#scopes","title":"Scopes","text":"<p>You can assign variables to specific variable scopes.</p> <p>Note</p> <p>An easy way to examine assigned Smarty variables is with the debugging console.</p>"},{"location":"designers/language-variables/language-assigned-variables/","title":"Variables assigned from PHP","text":"<p>Variables assigned from PHP are referenced by preceding them with a dollar (<code>$</code>) sign.</p>"},{"location":"designers/language-variables/language-assigned-variables/#examples","title":"Examples","text":"<pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n\n$smarty-&gt;assign('firstname', 'Doug');\n$smarty-&gt;assign('lastname', 'Evans');\n$smarty-&gt;assign('meetingPlace', 'New York');\n\n$smarty-&gt;display('index.tpl');\n</code></pre> <p><code>index.tpl</code> source:</p> <pre><code>Hello {$firstname} {$lastname}, glad to see you can make it.\n&lt;br /&gt;\n{* this will not work as $variables are case sensitive *}\nThis weeks meeting is in {$meetingplace}.\n{* this will work *}\nThis weeks meeting is in {$meetingPlace}.\n</code></pre> <p>This above would output:</p> <pre><code>Hello Doug Evans, glad to see you can make it.\n&lt;br /&gt;\nThis weeks meeting is in .\nThis weeks meeting is in New York.\n</code></pre>"},{"location":"designers/language-variables/language-assigned-variables/#associative-arrays","title":"Associative arrays","text":"<p>You can also reference associative array variables by specifying the key after a dot \".\" symbol.</p> <pre><code>&lt;?php\n$smarty-&gt;assign('Contacts',\n    array('fax' =&gt; '555-222-9876',\n          'email' =&gt; 'zaphod@slartibartfast.example.com',\n          'phone' =&gt; array('home' =&gt; '555-444-3333',\n                           'cell' =&gt; '555-111-1234')\n                           )\n         );\n$smarty-&gt;display('index.tpl');\n</code></pre> <p><code>index.tpl</code> source:</p> <pre><code>{$Contacts.fax}&lt;br /&gt;\n{$Contacts.email}&lt;br /&gt;\n{* you can print arrays of arrays as well *}\n{$Contacts.phone.home}&lt;br /&gt;\n{$Contacts.phone.cell}&lt;br /&gt;\n</code></pre> <p>this will output:</p> <pre><code>555-222-9876&lt;br /&gt;\nzaphod@slartibartfast.example.com&lt;br /&gt;\n555-444-3333&lt;br /&gt;\n555-111-1234&lt;br /&gt;\n</code></pre>"},{"location":"designers/language-variables/language-assigned-variables/#array-indexes","title":"Array indexes","text":"<p>You can reference arrays by their index, much like native PHP syntax.</p> <pre><code>&lt;?php\n$smarty-&gt;assign('Contacts', array(\n                           '555-222-9876',\n                           'zaphod@slartibartfast.example.com',\n                            array('555-444-3333',\n                                  '555-111-1234')\n                            ));\n$smarty-&gt;display('index.tpl');\n</code></pre> <p><code>index.tpl</code> source:</p> <pre><code>{$Contacts[0]}&lt;br /&gt;\n{$Contacts[1]}&lt;br /&gt;\n{* you can print arrays of arrays as well *}\n{$Contacts[2][0]}&lt;br /&gt;\n{$Contacts[2][1]}&lt;br /&gt;\n</code></pre> <p>This will output:</p> <pre><code>555-222-9876&lt;br /&gt;\nzaphod@slartibartfast.example.com&lt;br /&gt;\n555-444-3333&lt;br /&gt;\n555-111-1234&lt;br /&gt;\n</code></pre>"},{"location":"designers/language-variables/language-assigned-variables/#objects","title":"Objects","text":"<p>Properties of objects assigned from PHP can be referenced by specifying the property name after the <code>-&gt;</code> symbol.</p> <pre><code>name:  {$person-&gt;name}&lt;br /&gt;\nemail: {$person-&gt;email}&lt;br /&gt;\n</code></pre> <p>this will output:</p> <pre><code>name:  Zaphod Beeblebrox&lt;br /&gt;\nemail: zaphod@slartibartfast.example.com&lt;br /&gt;\n</code></pre>"},{"location":"designers/language-variables/language-config-variables/","title":"Variables loaded from config files","text":"<p>Variables that are loaded from the config files are referenced by enclosing them within <code>#hash_marks#</code>, or with the smarty variable <code>$smarty.config</code>. The later syntax is useful for embedding into quoted attribute values, or accessing variable values such as <code>$smarty.config.$foo</code>.</p>"},{"location":"designers/language-variables/language-config-variables/#examples","title":"Examples","text":"<p>Example config file - <code>foo.conf</code>: <pre><code>pageTitle = \"This is mine\"\nbodyBgColor = '#eeeeee'\ntableBorderSize = 3\ntableBgColor = \"#bbbbbb\"\nrowBgColor = \"#cccccc\"\n</code></pre></p> <p>A template demonstrating the <code>#hash#</code> method:</p> <pre><code>{config_load file='foo.conf'}\n&lt;html&gt;\n    &lt;title&gt;{#pageTitle#}&lt;/title&gt;\n    &lt;body bgcolor=\"{#bodyBgColor#}\"&gt;\n        &lt;table border=\"{#tableBorderSize#}\" bgcolor=\"{#tableBgColor#}\"&gt;\n            &lt;tr bgcolor=\"{#rowBgColor#}\"&gt;\n                &lt;td&gt;First&lt;/td&gt;\n                &lt;td&gt;Last&lt;/td&gt;\n                &lt;td&gt;Address&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>A template demonstrating the <code>$smarty.config</code> method:</p> <pre><code>{config_load file='foo.conf'}\n&lt;html&gt;\n&lt;title&gt;{$smarty.config.pageTitle}&lt;/title&gt;\n    &lt;body bgcolor=\"{$smarty.config.bodyBgColor}\"&gt;\n        &lt;table border=\"{$smarty.config.tableBorderSize}\" bgcolor=\"{$smarty.config.tableBgColor}\"&gt;\n            &lt;tr bgcolor=\"{$smarty.config.rowBgColor}\"&gt;\n                &lt;td&gt;First&lt;/td&gt;\n                &lt;td&gt;Last&lt;/td&gt;\n                &lt;td&gt;Address&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Both examples would output:</p> <pre><code>&lt;html&gt;\n    &lt;title&gt;This is mine&lt;/title&gt;\n    &lt;body bgcolor=\"#eeeeee\"&gt;\n        &lt;table border=\"3\" bgcolor=\"#bbbbbb\"&gt;\n            &lt;tr bgcolor=\"#cccccc\"&gt;\n                &lt;td&gt;First&lt;/td&gt;\n                &lt;td&gt;Last&lt;/td&gt;\n                &lt;td&gt;Address&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Config file variables cannot be used until after they are loaded in from a config file. This procedure is explained later in this document under <code>{config_load}</code>.</p> <p>See also variables and $smarty reserved variables.</p>"},{"location":"designers/language-variables/language-variable-scopes/","title":"Variable scopes","text":"<p>You have the choice to assign variables to the scope of the main Smarty object, data objects created with <code>createData()</code>, and template objects created with <code>createTemplate()</code>. These objects can be chained. A template sees all the variables of its own object and all variables assigned to the objects in its chain of parent objects.</p> <p>By default, templates which are rendered by <code>$smarty-&gt;display(...)</code> or <code>$smarty-&gt;fetch(...)</code> calls are automatically linked to the Smarty object variable scope.</p> <p>By assigning variables to individual data or template objects you have full control which variables can be seen by a template.</p> <pre><code>&lt;?php\n// assign variable to Smarty object scope\n$smarty-&gt;assign('foo','smarty');\n\n// assign variables to data object scope\n$data = $smarty-&gt;createData();\n$data-&gt;assign('foo','data');\n$data-&gt;assign('bar','bar-data');\n\n// assign variables to other data object scope\n$data2 = $smarty-&gt;createData($data);\n$data2-&gt;assign('bar','bar-data2');\n\n// assign variable to template object scope\n$tpl = $smarty-&gt;createTemplate('index.tpl');\n$tpl-&gt;assign('bar','bar-template');\n\n// assign variable to template object scope with link to Smarty object\n$tpl2 = $smarty-&gt;createTemplate('index.tpl',$smarty);\n$tpl2-&gt;assign('bar','bar-template2');\n\n// This display() does see $foo='smarty' from the $smarty object\n$smarty-&gt;display('index.tpl');\n\n// This display() does see $foo='data' and $bar='bar-data' from the data object $data\n$smarty-&gt;display('index.tpl',$data);\n\n// This display() does see $foo='data' from the data object $data \n// and $bar='bar-data2' from the data object $data2\n$smarty-&gt;display('index.tpl',$data2);\n\n// This display() does see $bar='bar-template' from the template object $tpl\n$tpl-&gt;display();  // or $smarty-&gt;display($tpl);\n\n// This display() does see $bar='bar-template2' from the template object $tpl2\n// and $foo='smarty' form the Smarty object $foo\n$tpl2-&gt;display();  // or $smarty-&gt;display($tpl2);\n</code></pre> <p>See also <code>assign()</code>,  <code>createData()</code> and <code>createTemplate()</code>.</p>"},{"location":"designers/language-variables/language-variables-smarty/","title":"{$smarty} reserved variable","text":"<p>The PHP reserved <code>{$smarty}</code> variable can be used to access several environment and request variables. The full list of them follows.</p>"},{"location":"designers/language-variables/language-variables-smarty/#request-variables","title":"Request variables","text":"<p>The request variables such as <code>$_GET</code>, <code>$_POST</code>, <code>$_COOKIE</code>, <code>$_SERVER</code>, <code>$_ENV</code> and <code>$_SESSION</code> can be accessed as demonstrated in the examples below:</p> <pre><code>{* display value of page from URL ($_GET) http://www.example.com/index.php?page=foo *}\n{$smarty.get.page}\n\n{* display the variable \"page\" from a form ($_POST['page']) *}\n{$smarty.post.page}\n\n{* display the value of the cookie \"username\" ($_COOKIE['username']) *}\n{$smarty.cookies.username}\n\n{* display the server variable \"SERVER_NAME\" ($_SERVER['SERVER_NAME'])*}\n{$smarty.server.SERVER_NAME}\n\n{* display the system environment variable \"PATH\" *}\n{$smarty.env.PATH}\n\n{* display the php session variable \"id\" ($_SESSION['id']) *}\n{$smarty.session.id}\n\n{* display the variable \"username\" from merged get/post/cookies/server/env *}\n{$smarty.request.username}\n</code></pre> <p>Note</p> <p>For historical reasons <code>{$SCRIPT_NAME}</code> is shorthand for <code>{$smarty.server.SCRIPT_NAME}</code>.</p> <pre><code>&lt;a href=\"{$SCRIPT_NAME}?page=smarty\"&gt;click me&lt;/a&gt;\n&lt;a href=\"{$smarty.server.SCRIPT_NAME}?page=smarty\"&gt;click me&lt;/a&gt;\n</code></pre> <p>Note</p> <p>Although Smarty provides direct access to PHP super globals for convenience, it should be used with caution. Directly accessing super globals mixes underlying application code structure with templates. A good practice is to assign specific needed values to template vars.</p>"},{"location":"designers/language-variables/language-variables-smarty/#smartynow","title":"{$smarty.now}","text":"<p>The current timestamp can be accessed with <code>{$smarty.now}</code>. The value reflects the number of seconds passed since the so-called Epoch on January 1, 1970, and can be passed directly to the <code>date_format</code> modifier for display. Note that <code>time()</code> is called on each invocation; eg a script that takes three seconds to execute with a call to <code>$smarty.now</code> at start and end will show the three-second difference.</p> <pre><code>{* use the date_format modifier to show current date and time *}\n{$smarty.now|date_format:'%Y-%m-%d %H:%M:%S'}\n</code></pre>"},{"location":"designers/language-variables/language-variables-smarty/#smartyconst","title":"{$smarty.const}","text":"<p>You can access PHP constant values directly.</p> <pre><code>&lt;?php\n// the constant defined in php\ndefine('MY_CONST_VAL','CHERRIES');\n</code></pre> <p>Output the constant in a template with</p> <pre><code>{$smarty.const.MY_CONST_VAL}\n</code></pre> <p>Note</p> <p>Although Smarty provides direct access to PHP constants for convenience, it is typically avoided as this is mixing underlying application code structure into the templates. A good practice is to assign specific needed values to template vars.</p>"},{"location":"designers/language-variables/language-variables-smarty/#smartycapture","title":"{$smarty.capture}","text":"<p>Template output captured via the built-in <code>{capture}..{/capture}</code> function can be accessed using the <code>{$smarty.capture}</code> variable. See the <code>{capture}</code> page for more information.</p>"},{"location":"designers/language-variables/language-variables-smarty/#smartyconfig","title":"{$smarty.config}","text":"<p><code>{$smarty.config}</code> variable can be used to refer to loaded config variables. <code>{$smarty.config.foo}</code> is a synonym for <code>{#foo#}</code>. See the {config_load} page for more info.</p>"},{"location":"designers/language-variables/language-variables-smarty/#smartysection","title":"{$smarty.section}","text":"<p>The <code>{$smarty.section}</code> variables can be used to refer to <code>{section}</code> loop properties. These have some very useful values such as <code>.first</code>, <code>.index</code>, etc.</p> <p>Note</p> <p>The <code>{$smarty.foreach}</code> variable is no longer used with the new <code>{foreach}</code> syntax, but is still supported with Smarty 2.x style foreach syntax.</p>"},{"location":"designers/language-variables/language-variables-smarty/#smartytemplate","title":"{$smarty.template}","text":"<p>Returns the name of the current template being processed (without the directory).</p>"},{"location":"designers/language-variables/language-variables-smarty/#smartytemplate_object","title":"{$smarty.template_object}","text":"<p>Returns the template object of the current template being processed.</p>"},{"location":"designers/language-variables/language-variables-smarty/#smartycurrent_dir","title":"{$smarty.current_dir}","text":"<p>Returns the name of the directory for the current template being processed if it is loaded from the filesystem (the default).</p>"},{"location":"designers/language-variables/language-variables-smarty/#smartyversion","title":"{$smarty.version}","text":"<p>Returns the version of Smarty the template was compiled with.</p> <pre><code>&lt;div id=\"footer\"&gt;Powered by Smarty {$smarty.version}&lt;/div&gt;\n</code></pre>"},{"location":"designers/language-variables/language-variables-smarty/#smartyblockchild","title":"{$smarty.block.child}","text":"<p>Returns block text from child template. See Template inheritance.</p>"},{"location":"designers/language-variables/language-variables-smarty/#smartyblockparent","title":"{$smarty.block.parent}","text":"<p>Returns block text from parent template. See Template inheritance</p>"},{"location":"designers/language-variables/language-variables-smarty/#smartyldelim-smartyrdelim","title":"{$smarty.ldelim}, {$smarty.rdelim}","text":"<p>These variables are used for printing the left-delimiter and right-delimiter value literally, the same as <code>{ldelim},{rdelim}</code>.</p> <p>See also assigned variables and config variables</p>"},{"location":"programmers/api-functions/api-add-plugins-dir/","title":"Api add plugins dir","text":"<p>addPluginsDir()</p> <p>add a directory to the list of directories where plugins are stored</p>"},{"location":"programmers/api-functions/api-add-plugins-dir/#description","title":"Description","text":"<p>Smarty</p> <p>addPluginsDir</p> <p>string|array</p> <p>plugins_dir</p> <pre><code>&lt;?php\n\n// add directory where plugins are stored\n$smarty-&gt;addPluginsDir('./plugins_1');\n\n// add multiple directories where plugins are stored\n$smarty-&gt;setPluginsDir(array(\n    './plugins_2',\n    './plugins_3',\n));\n\n// view the plugins dir chain\nvar_dump($smarty-&gt;getPluginsDir());\n\n// chaining of method calls\n$smarty-&gt;setPluginsDir('./plugins')\n       -&gt;addPluginsDir('./plugins_1')\n       -&gt;addPluginsDir('./plugins_2');\n\n?&gt;\n</code></pre> <p>See also <code>getPluginsDir()</code>, <code>setPluginsDir()</code> and <code>$plugins_dir</code>.</p>"},{"location":"programmers/api-functions/api-append/","title":"Api append","text":"<p>append()</p> <p>append an element to an assigned array</p>"},{"location":"programmers/api-functions/api-append/#description","title":"Description","text":"<p>void</p> <p>append</p> <p>mixed</p> <p>var</p> <p>void</p> <p>append</p> <p>string</p> <p>varname</p> <p>mixed</p> <p>var</p> <p>bool</p> <p>merge</p> <p>If you append to a string value, it is converted to an array value and then appended to. You can explicitly pass name/value pairs, or associative arrays containing the name/value pairs. If you pass the optional third parameter of TRUE, the value will be merged with the current array instead of appended.</p> <p>NOTE.PARAMETER.MERGE</p> <pre><code>&lt;?php\n// This is effectively the same as assign()\n$smarty-&gt;append('foo', 'Fred');\n// After this line, foo will now be seen as an array in the template\n$smarty-&gt;append('foo', 'Albert');\n\n$array = array(1 =&gt; 'one', 2 =&gt; 'two');\n$smarty-&gt;append('X', $array);\n$array2 = array(3 =&gt; 'three', 4 =&gt; 'four');\n// The following line will add a second element to the X array\n$smarty-&gt;append('X', $array2);\n\n// passing an associative array\n$smarty-&gt;append(array('city' =&gt; 'Lincoln', 'state' =&gt; 'Nebraska'));\n?&gt;\n</code></pre> <p>See also <code>assign()</code> and <code>getTemplateVars()</code></p>"},{"location":"programmers/api-functions/api-assign/","title":"Api assign","text":"<p>assign()</p> <p>assign variables/objects to the templates</p>"},{"location":"programmers/api-functions/api-assign/#description","title":"Description","text":"<p>void</p> <p>assign</p> <p>mixed</p> <p>var</p> <p>void</p> <p>assign</p> <p>string</p> <p>varname</p> <p>mixed</p> <p>var</p> <p>bool</p> <p>nocache</p> <p>You can explicitly pass name/value pairs, or associative arrays containing the name/value pairs.</p> <p>If you pass the optional third <code>nocache</code> parameter of TRUE, the variable is assigned as nocache variable. See <code>Cacheability of Variables</code> for details.</p> <p>Note</p> <p>When you assign/register objects to templates, be sure that all properties and methods accessed from the template are for presentation purposes only. It is very easy to inject application logic through objects, and this leads to poor designs that are difficult to manage. See the Best Practices section of the Smarty website.</p> <pre><code>&lt;?php\n// passing name/value pairs\n$smarty-&gt;assign('Name', 'Fred');\n$smarty-&gt;assign('Address', $address);\n\n// passing an associative array\n$smarty-&gt;assign(array('city' =&gt; 'Lincoln', 'state' =&gt; 'Nebraska'));\n\n// passing an array\n$myArray = array('no' =&gt; 10, 'label' =&gt; 'Peanuts');\n$smarty-&gt;assign('foo',$myArray);\n\n// passing a row from a database (eg adodb)\n$sql = 'select id, name, email from contacts where contact ='.$id;\n$smarty-&gt;assign('contact', $db-&gt;getRow($sql));\n?&gt;\n</code></pre> <p>These are accessed in the template with</p> <pre><code>{* note the vars are case sensitive like php *}\n{$Name}\n{$Address}\n{$city}\n{$state}\n\n{$foo.no}, {$foo.label}\n{$contact.id}, {$contact.name},{$contact.email}\n</code></pre> <p>To access more complex array assignments see <code>{foreach}</code> and <code>{section}</code></p> <p>See also <code>getTemplateVars()</code>, <code>clearAssign()</code>, <code>append()</code> and <code>{assign}</code></p>"},{"location":"programmers/api-functions/api-clear-all-assign/","title":"Api clear all assign","text":"<p>clearAllAssign()</p> <p>clears the values of all assigned variables</p>"},{"location":"programmers/api-functions/api-clear-all-assign/#description","title":"Description","text":"<p>void</p> <p>clearAllAssign</p> <pre><code>&lt;?php\n// passing name/value pairs\n$smarty-&gt;assign('Name', 'Fred');\n$smarty-&gt;assign('Address', $address);\n\n// will output above\nprint_r( $smarty-&gt;getTemplateVars() );\n\n// clear all assigned variables\n$smarty-&gt;clearAllAssign();\n\n// will output nothing\nprint_r( $smarty-&gt;getTemplateVars() );\n\n?&gt;\n</code></pre> <p>See also <code>clearAssign()</code>, <code>clearConfig()</code>, <code>getTemplateVars()</code>, <code>assign()</code> and <code>append()</code></p>"},{"location":"programmers/api-functions/api-clear-all-cache/","title":"Api clear all cache","text":"<p>clearAllCache()</p> <p>clears the entire template cache</p>"},{"location":"programmers/api-functions/api-clear-all-cache/#description","title":"Description","text":"<p>void</p> <p>clearAllCache</p> <p>int</p> <p>expire_time</p> <p>As an optional parameter, you can supply a minimum age in seconds the cache files must be before they will get cleared.</p> <p>Note</p> <p>Since Smarty version 3.1.14 it is possible to delete cache files by their individual expiration time at creation by passing constant SMARTY::CLEAR_EXPIRED as <code>expire_time</code> parameter.</p> <pre><code>&lt;?php\n// clear the entire cache\n$smarty-&gt;clearAllCache();\n\n// clears all files over one hour old\n$smarty-&gt;clearAllCache(3600);\n?&gt;\n</code></pre> <p>See also <code>clearCache()</code>, <code>isCached()</code> and the caching page.</p>"},{"location":"programmers/api-functions/api-clear-assign/","title":"Api clear assign","text":"<p>clearAssign()</p> <p>clears the value of an assigned variable</p>"},{"location":"programmers/api-functions/api-clear-assign/#description","title":"Description","text":"<p>void</p> <p>clearAssign</p> <p>mixed</p> <p>var</p> <p>This can be a single value, or an array of values.</p> <pre><code>&lt;?php\n// clear a single variable\n$smarty-&gt;clearAssign('Name');\n\n// clears multiple variables\n$smarty-&gt;clearAssign(array('Name', 'Address', 'Zip'));\n?&gt;\n</code></pre> <p>See also <code>clearAllAssign()</code>, <code>clearConfig()</code>, <code>getTemplateVars()</code>, <code>assign()</code> and <code>append()</code></p>"},{"location":"programmers/api-functions/api-clear-cache/","title":"Api clear cache","text":"<p>clearCache()</p> <p>clears the cache for a specific template</p>"},{"location":"programmers/api-functions/api-clear-cache/#description","title":"Description","text":"<p>void</p> <p>clearCache</p> <p>string</p> <p>template</p> <p>string</p> <p>cache_id</p> <p>string</p> <p>compile_id</p> <p>int</p> <p>expire_time</p> <ul> <li> <p>If you have multiple caches for a     template, you can clear a specific cache by supplying the <code>cache_id</code>     as the second parameter.</p> </li> <li> <p>You can also pass a <code>$compile_id</code> as a third     parameter. You can group templates together so     they can be removed as a group, see the caching section     for more information.</p> </li> <li> <p>As an optional fourth parameter, you can supply a minimum age in     seconds the cache file must be before it will get cleared.</p> <p>Note</p> <p>Since Smarty version 3.1.14 it is possible to delete cache files by their individual expiration time at creation by passing constant SMARTY::CLEAR_EXPIRED as fourth parameter.</p> </li> </ul> <pre><code>&lt;?php\n// clear the cache for a template\n$smarty-&gt;clearCache('index.tpl');\n\n// clear the cache for a particular cache id in an multiple-cache template\n$smarty-&gt;clearCache('index.tpl', 'MY_CACHE_ID');\n?&gt;\n</code></pre> <p>See also <code>clearAllCache()</code> and <code>caching</code> section.</p>"},{"location":"programmers/api-functions/api-clear-compiled-tpl/","title":"Api clear compiled tpl","text":"<p>clearCompiledTemplate()</p> <p>clears the compiled version of the specified template resource</p>"},{"location":"programmers/api-functions/api-clear-compiled-tpl/#description","title":"Description","text":"<p>void</p> <p>clearCompiledTemplate</p> <p>string</p> <p>tpl_file</p> <p>string</p> <p>compile_id</p> <p>int</p> <p>exp_time</p> <p>This clears the compiled version of the specified template resource, or all compiled template files if one is not specified. If you pass a <code>$compile_id</code> only the compiled template for this specific <code>$compile_id</code> is cleared. If you pass an exp_time, then only compiled templates older than <code>exp_time</code> seconds are cleared, by default all compiled templates are cleared regardless of their age. This function is for advanced use only, not normally needed.</p> <pre><code>&lt;?php\n// clear a specific template resource\n$smarty-&gt;clearCompiledTemplate('index.tpl');\n\n// clear entire compile directory\n$smarty-&gt;clearCompiledTemplate();\n?&gt;\n</code></pre> <p>See also <code>clearCache()</code>.</p>"},{"location":"programmers/api-functions/api-clear-config/","title":"Api clear config","text":"<p>clearConfig()</p> <p>clears assigned config variables</p>"},{"location":"programmers/api-functions/api-clear-config/#description","title":"Description","text":"<p>void</p> <p>clearConfig</p> <p>string</p> <p>var</p> <p>This clears all assigned config variables. If a variable name is supplied, only that variable is cleared.</p> <pre><code>&lt;?php\n// clear all assigned config variables.\n$smarty-&gt;clearConfig();\n\n// clear one variable\n$smarty-&gt;clearConfig('foobar');\n?&gt;\n</code></pre> <p>See also <code>getConfigVars()</code>, <code>config variables</code>, <code>config files</code>, <code>{config_load}</code>, <code>configLoad()</code> and <code>clearAssign()</code>.</p>"},{"location":"programmers/api-functions/api-compile-all-config/","title":"Api compile all config","text":"<p>compileAllConfig()</p> <p>compiles all known config files</p>"},{"location":"programmers/api-functions/api-compile-all-config/#description","title":"Description","text":"<p>string</p> <p>compileAllConfig</p> <p>string</p> <p>extension</p> <p>boolean</p> <p>force</p> <p>integer</p> <p>timelimit</p> <p>integer</p> <p>maxerror</p> <p>This function compiles config files found in the <code>$config_dir</code> folder. It uses the following parameters:</p> <ul> <li> <p><code>extension</code> is an optional string which defines the file extension     for the config files. The default is \\\".conf\\\".</p> </li> <li> <p><code>force</code> is an optional boolean which controls if only modified     (false) or all (true) config files shall be compiled. The default is     \\\"false\\\".</p> </li> <li> <p><code>timelimit</code> is an optional integer to set a runtime limit in seconds     for the compilation process. The default is no limit.</p> </li> <li> <p><code>maxerror</code> is an optional integer to set an error limit. If more     config files failed to compile the function will be aborted. The     default is no limit.</p> </li> </ul> <p>Note</p> <p>This function may not create desired results in all configurations. Use is on own risk.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n// force compilation of all config files\n$smarty-&gt;compileAllConfig('.config',true);\n\n?&gt;\n</code></pre>"},{"location":"programmers/api-functions/api-compile-all-templates/","title":"Api compile all templates","text":"<p>compileAllTemplates()</p> <p>compiles all known templates</p>"},{"location":"programmers/api-functions/api-compile-all-templates/#description","title":"Description","text":"<p>string</p> <p>compileAllTemplates</p> <p>string</p> <p>extension</p> <p>boolean</p> <p>force</p> <p>integer</p> <p>timelimit</p> <p>integer</p> <p>maxerror</p> <p>This function compiles template files found in the <code>$template_dir</code> folder. It uses the following parameters:</p> <ul> <li> <p><code>extension</code> is an optional string which defines the file extension     for the template files. The default is \\\".tpl\\\".</p> </li> <li> <p><code>force</code> is an optional boolean which controls if only modified     (false) or all (true) templates shall be compiled. The default is     \\\"false\\\".</p> </li> <li> <p><code>timelimit</code> is an optional integer to set a runtime limit in seconds     for the compilation process. The default is no limit.</p> </li> <li> <p><code>maxerror</code> is an optional integer to set an error limit. If more     templates failed to compile the function will be aborted. The     default is no limit.</p> </li> </ul> <p>Note</p> <p>This function may not create desired results in all configurations. Use is on own risk.</p> <p>Note</p> <p>If any template requires registered plugins, filters or objects you must register all of them before running this function.</p> <p>Note</p> <p>If you are using template inheritance this function will create compiled files of parent templates which will never be used.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n// force compilation of all template files\n$smarty-&gt;compileAllTemplates('.tpl',true);\n\n?&gt;\n</code></pre>"},{"location":"programmers/api-functions/api-config-load/","title":"Api config load","text":"<p>configLoad()</p> <p>loads config file data and assigns it to the template</p>"},{"location":"programmers/api-functions/api-config-load/#description","title":"Description","text":"<p>void</p> <p>configLoad</p> <p>string</p> <p>file</p> <p>string</p> <p>section</p> <p>This loads config file data and assigns it to the template. This works identically to the template <code>{config_load}</code> function.</p> <p>Note</p> <p>As of Smarty 2.4.0, assigned template variables are kept across invocations of <code>fetch()</code> and <code>display()</code>. Config vars loaded from <code>configLoad()</code> are always global in scope. Config files are also compiled for faster execution, and respect the <code>$force_compile</code> and <code>$compile_check</code> settings.</p> <pre><code>&lt;?php\n// load config variables and assign them\n$smarty-&gt;configLoad('my.conf');\n\n// load a section\n$smarty-&gt;configLoad('my.conf', 'foobar');\n?&gt;\n</code></pre> <p>See also <code>{config_load}</code>, <code>getConfigVars()</code>, <code>clearConfig()</code>, and <code>config variables</code></p>"},{"location":"programmers/api-functions/api-create-data/","title":"Api create data","text":"<p>createData()</p> <p>creates a data object</p>"},{"location":"programmers/api-functions/api-create-data/#description","title":"Description","text":"<p>string</p> <p>createData</p> <p>object</p> <p>parent</p> <p>string</p> <p>createData</p> <p>This creates a data object which will hold assigned variables. It uses the following parameters:</p> <ul> <li><code>parent</code> is an optional parameter. It is an uplink to the main     Smarty object, a another user-created data object or to user-created     template object. These objects can be chained. Templates can access     variables assigned to any of the objects in it\\'s parent chain.</li> </ul> <p>Data objects are used to create scopes for assigned variables. They can be used to control which variables are seen by which templates.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n// create data object with its private variable scope\n$data = $smarty-&gt;createData();\n\n// assign variable to data scope\n$data-&gt;assign('foo','bar');\n\n// create template object which will use variables from data object\n$tpl = $smarty-&gt;createTemplate('index.tpl',$data);\n\n// display the template\n$tpl-&gt;display();\n?&gt;\n</code></pre> <p>See also <code>display()</code>, and <code>createTemplate()</code>,</p>"},{"location":"programmers/api-functions/api-create-template/","title":"Api create template","text":"<p>createTemplate()</p> <p>returns a template object</p>"},{"location":"programmers/api-functions/api-create-template/#description","title":"Description","text":"<p>Smarty_Internal_Template</p> <p>createTemplate</p> <p>string</p> <p>template</p> <p>object</p> <p>parent</p> <p>Smarty_Internal_Template</p> <p>createTemplate</p> <p>string</p> <p>template</p> <p>array</p> <p>data</p> <p>Smarty_Internal_Template</p> <p>createTemplate</p> <p>string</p> <p>template</p> <p>string</p> <p>cache_id</p> <p>string</p> <p>compile_id</p> <p>object</p> <p>parent</p> <p>Smarty_Internal_Template</p> <p>createTemplate</p> <p>string</p> <p>template</p> <p>string</p> <p>cache_id</p> <p>string</p> <p>compile_id</p> <p>array</p> <p>data</p> <p>This creates a template object which later can be rendered by the display or fetch method. It uses the following parameters:</p> <ul> <li><code>template</code> must be a valid template resource type and     path.</li> </ul> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n// create template object with its private variable scope\n$tpl = $smarty-&gt;createTemplate('index.tpl');\n\n// assign variable to template scope\n$tpl-&gt;assign('foo','bar');\n\n// display the template\n$tpl-&gt;display();\n?&gt;\n</code></pre> <p>See also <code>display()</code>, and <code>templateExists()</code>.</p>"},{"location":"programmers/api-functions/api-disable-security/","title":"Api disable security","text":"<p>disableSecurity()</p> <p>disables template security</p>"},{"location":"programmers/api-functions/api-disable-security/#description","title":"Description","text":"<p>string</p> <p>disableSecurity</p> <p>This disables security checking on templates.</p> <p>See also <code>enableSecurity()</code>, and Security.</p>"},{"location":"programmers/api-functions/api-display/","title":"Api display","text":"<p>display()</p> <p>displays the template</p>"},{"location":"programmers/api-functions/api-display/#description","title":"Description","text":"<p>void</p> <p>display</p> <p>string</p> <p>template</p> <p>string</p> <p>cache_id</p> <p>string</p> <p>compile_id</p> <p>This displays the contents of a template. To return the contents of a template into a variable, use <code>fetch()</code>. Supply a valid template resource type and path. As an optional second parameter, you can pass a <code>$cache_id</code>, see the caching section for more information.</p> <p>PARAMETER.COMPILEID</p> <pre><code>&lt;?php\n\nuse Smarty\\Smarty;\n\n$smarty = new Smarty();\n$smarty-&gt;setCaching(true);\n\n// only do db calls if cache doesn't exist\nif(!$smarty-&gt;isCached('index.tpl')) {\n\n  // dummy up some data\n  $address = '245 N 50th';\n  $db_data = array(\n               'City' =&gt; 'Lincoln',\n               'State' =&gt; 'Nebraska',\n               'Zip' =&gt; '68502'\n             );\n\n  $smarty-&gt;assign('Name', 'Fred');\n  $smarty-&gt;assign('Address', $address);\n  $smarty-&gt;assign('data', $db_data);\n\n}\n\n// display the output\n$smarty-&gt;display('index.tpl');\n?&gt;\n</code></pre> <p>Use the syntax for template resources to display files outside of the <code>$template_dir</code> directory.</p> <pre><code>&lt;?php\n// absolute filepath\n$smarty-&gt;display('/usr/local/include/templates/header.tpl');\n\n// absolute filepath (same thing)\n$smarty-&gt;display('file:/usr/local/include/templates/header.tpl');\n\n// windows absolute filepath (MUST use \"file:\" prefix)\n$smarty-&gt;display('file:C:/www/pub/templates/header.tpl');\n\n// include from template resource named \"db\"\n$smarty-&gt;display('db:header.tpl');\n?&gt;\n</code></pre> <p>See also <code>fetch()</code> and <code>templateExists()</code>.</p>"},{"location":"programmers/api-functions/api-enable-security/","title":"Api enable security","text":"<p>enableSecurity()</p> <p>enables template security</p>"},{"location":"programmers/api-functions/api-enable-security/#description","title":"Description","text":"<p>string</p> <p>enableSecurity</p> <p>string</p> <p>securityclass</p> <p>string</p> <p>enableSecurity</p> <p>object</p> <p>securityobject</p> <p>string</p> <p>enableSecurity</p> <p>This enables security checking on templates. It uses the following parameters:</p> <ul> <li> <p><code>securityclass</code> is an optional parameter. It\\'s the name of the     class with defines the security policy parameters.</p> </li> <li> <p><code>securityobject</code> is an optional parameter. It\\'s the object with     defines the security policy parameters.</p> </li> </ul> <p>For the details how to setup a security policy see the Security section.</p> <p>See also <code>disableSecurity()</code>, and Security.</p>"},{"location":"programmers/api-functions/api-fetch/","title":"Api fetch","text":"<p>fetch()</p> <p>returns the template output</p>"},{"location":"programmers/api-functions/api-fetch/#description","title":"Description","text":"<p>string</p> <p>fetch</p> <p>string</p> <p>template</p> <p>string</p> <p>cache_id</p> <p>string</p> <p>compile_id</p> <p>This returns the template output instead of displaying it. Supply a valid template resource type and path. As an optional second parameter, you can pass a <code>$cache id</code>, see the caching section for more information.</p> <p>PARAMETER.COMPILEID</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty;\n\n$smarty-&gt;setCaching(true);\n\n// set a separate cache_id for each unique URL\n$cache_id = md5($_SERVER['REQUEST_URI']);\n\n// capture the output\n$output = $smarty-&gt;fetch('index.tpl', $cache_id);\n\n// do something with $output here\necho $output;\n?&gt;\n</code></pre> <p>The <code>email_body.tpl</code> template</p> <pre><code>Dear {$contact_info.name},\n\nWelcome and thank you for signing up as a member of our user group.\n\nClick on the link below to login with your user name\nof '{$contact_info.username}' so you can post in our forums.\n\n{$login_url}\n\nList master\n\n{textformat wrap=40}\nThis is some long-winded disclaimer text that would automatically get wrapped\nat 40 characters. This helps make the text easier to read in mail programs that\ndo not wrap sentences for you.\n{/textformat}\n</code></pre> <p>The php script using the PHP <code>mail()</code> function</p> <pre><code>&lt;?php\n\n// get $contact_info from db or other resource here\n\n$smarty-&gt;assign('contact_info',$contact_info);\n$smarty-&gt;assign('login_url',\"http://{$_SERVER['SERVER_NAME']}/login\");\n\nmail($contact_info['email'], 'Thank You', $smarty-&gt;fetch('email_body.tpl'));\n\n?&gt;\n</code></pre> <p>See also <code>{fetch}</code> <code>display()</code>, <code>{eval}</code>, and <code>templateExists()</code>.</p>"},{"location":"programmers/api-functions/api-get-config-dir/","title":"Api get config dir","text":"<p>getConfigDir()</p> <p>return the directory where config files are stored</p>"},{"location":"programmers/api-functions/api-get-config-dir/#description","title":"Description","text":"<p>string|array</p> <p>getConfigDir</p> <p>string</p> <p>key</p> <pre><code>&lt;?php\n\n// set some config directories\n$smarty-&gt;setConfigDir(array(\n    'one' =&gt; './config',\n    'two' =&gt; './config_2',\n    'three' =&gt; './config_3',\n));\n\n// get all directories where config files are stored\n$config_dir = $smarty-&gt;getConfigDir();\nvar_dump($config_dir); // array\n\n// get directory identified by key\n$config_dir = $smarty-&gt;getConfigDir('one');\nvar_dump($config_dir); // string\n\n?&gt;\n</code></pre> <p>See also <code>setConfigDir()</code>, <code>addConfigDir()</code> and <code>$config_dir</code>.</p>"},{"location":"programmers/api-functions/api-get-config-vars/","title":"Api get config vars","text":"<p>getConfigVars()</p> <p>returns the given loaded config variable value</p>"},{"location":"programmers/api-functions/api-get-config-vars/#description","title":"Description","text":"<p>array</p> <p>getConfigVars</p> <p>string</p> <p>varname</p> <p>If no parameter is given, an array of all loaded config variables is returned.</p> <pre><code>&lt;?php\n\n// get loaded config template var #foo#\n$myVar = $smarty-&gt;getConfigVars('foo');\n\n// get all loaded config template vars\n$all_config_vars = $smarty-&gt;getConfigVars();\n\n// take a look at them\nprint_r($all_config_vars);\n?&gt;\n</code></pre> <p>See also <code>clearConfig()</code>, <code>{config_load}</code>, <code>configLoad()</code> and <code>getTemplateVars()</code>.</p>"},{"location":"programmers/api-functions/api-get-plugins-dir/","title":"Api get plugins dir","text":"<p>getPluginsDir()</p> <p>return the directory where plugins are stored</p>"},{"location":"programmers/api-functions/api-get-plugins-dir/#description","title":"Description","text":"<p>array</p> <p>getPluginsDir</p> <pre><code>&lt;?php\n\n// set some plugins directories\n$smarty-&gt;setPluginsDir(array(\n    './plugins',\n    './plugins_2',\n));\n\n// get all directories where plugins are stored\n$config_dir = $smarty-&gt;getPluginsDir();\nvar_dump($config_dir); // array\n\n?&gt;\n</code></pre> <p>See also <code>setPluginsDir()</code>, <code>addPluginsDir()</code> and <code>$plugins_dir</code>.</p>"},{"location":"programmers/api-functions/api-get-registered-object/","title":"Api get registered object","text":"<p>getRegisteredObject()</p> <p>returns a reference to a registered object</p>"},{"location":"programmers/api-functions/api-get-registered-object/#description","title":"Description","text":"<p>array</p> <p>getRegisteredObject</p> <p>string</p> <p>object_name</p> <p>This is useful from within a custom function when you need direct access to a registered object. See the objects page for more info.</p> <pre><code>&lt;?php\nfunction smarty_block_foo($params, $smarty)\n{\n  if (isset($params['object'])) {\n    // get reference to registered object\n    $obj_ref = $smarty-&gt;getRegisteredObject($params['object']);\n    // use $obj_ref is now a reference to the object\n  }\n}\n?&gt;\n</code></pre> <p>See also <code>registerObject()</code>, <code>unregisterObject()</code> and objects page</p>"},{"location":"programmers/api-functions/api-get-template-vars/","title":"Api get template vars","text":"<p>getTemplateVars()</p> <p>returns assigned variable value(s)</p>"},{"location":"programmers/api-functions/api-get-template-vars/#description","title":"Description","text":"<p>array</p> <p>getTemplateVars</p> <p>string</p> <p>varname</p> <p>If no parameter is given, an array of all assigned variables are returned.</p> <pre><code>&lt;?php\n// get assigned template var 'foo'\n$myVar = $smarty-&gt;getTemplateVars('foo');\n\n// get all assigned template vars\n$all_tpl_vars = $smarty-&gt;getTemplateVars();\n\n// take a look at them\nprint_r($all_tpl_vars);\n?&gt;\n</code></pre> <p>See also <code>assign()</code>, <code>{assign}</code>, <code>append()</code>, <code>clearAssign()</code>, <code>clearAllAssign()</code> and <code>getConfigVars()</code></p>"},{"location":"programmers/api-functions/api-is-cached/","title":"Api is cached","text":"<p>isCached()</p> <p>returns true if there is a valid cache for this template</p>"},{"location":"programmers/api-functions/api-is-cached/#description","title":"Description","text":"<p>bool</p> <p>isCached</p> <p>string</p> <p>template</p> <p>string</p> <p>cache_id</p> <p>string</p> <p>compile_id</p> <ul> <li> <p>This only works if <code>$caching</code> is set to one of     <code>\\Smarty\\Smarty::CACHING_LIFETIME_CURRENT</code> or     <code>\\Smarty\\Smarty::CACHING_LIFETIME_SAVED</code> to enable caching. See the caching     section for more info.</p> </li> <li> <p>You can also pass a <code>$cache_id</code> as an optional second parameter in     case you want multiple caches for the     given template.</p> </li> <li> <p>You can supply a <code>$compile id</code> as an     optional third parameter. If you omit that parameter the persistent     <code>$compile_id</code> is used if its set.</p> </li> <li> <p>If you do not want to pass a <code>$cache_id</code> but want to pass a     <code>$compile_id</code> you have to pass NULL as a     <code>$cache_id</code>.</p> </li> </ul> <p>Note</p> <p>If <code>isCached()</code> returns TRUE it actually loads the cached output and stores it internally. Any subsequent call to <code>display()</code> or <code>fetch()</code> will return this internally stored output and does not try to reload the cache file. This prevents a race condition that may occur when a second process clears the cache between the calls to <code>isCached()</code> and to <code>display()</code> in the example above. This also means calls to <code>clearCache()</code> and other changes of the cache-settings may have no effect after <code>isCached()</code> returned TRUE.</p> <pre><code>&lt;?php\n$smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_CURRENT);\n\nif(!$smarty-&gt;isCached('index.tpl')) {\n// do database calls, assign vars here\n}\n\n$smarty-&gt;display('index.tpl');\n?&gt;\n\n\n\n\n&lt;?php\n$smarty-&gt;setCaching(Smarty::CACHING_LIFETIME_CURRENT);\n\nif(!$smarty-&gt;isCached('index.tpl', 'FrontPage')) {\n  // do database calls, assign vars here\n}\n\n$smarty-&gt;display('index.tpl', 'FrontPage');\n?&gt;\n</code></pre> <p>See also <code>clearCache()</code>, <code>clearAllCache()</code>, and caching section.</p>"},{"location":"programmers/api-functions/api-load-filter/","title":"Api load filter","text":"<p>loadFilter()</p> <p>load a filter plugin</p>"},{"location":"programmers/api-functions/api-load-filter/#description","title":"Description","text":"<p>void</p> <p>loadFilter</p> <p>string</p> <p>type</p> <p>string</p> <p>name</p> <p>The first argument specifies the type of the filter to load and can be one of the following: <code>variable</code>, <code>pre</code>, <code>post</code> or <code>output</code>. The second argument specifies the <code>name</code> of the filter plugin.</p> <pre><code>&lt;?php\n\n// load prefilter named 'trim'\n$smarty-&gt;loadFilter('pre', 'trim');\n\n// load another prefilter named 'datefooter'\n$smarty-&gt;loadFilter('pre', 'datefooter');\n\n// load output filter named 'compress'\n$smarty-&gt;loadFilter('output', 'compress');\n\n?&gt;\n</code></pre> <p>See also <code>registerFilter()</code> and advanced features.</p>"},{"location":"programmers/api-functions/api-mute-expected-errors/","title":"Api mute expected errors","text":"<p>mutes expected warnings and notices deliberately generated by Smarty</p>"},{"location":"programmers/api-functions/api-mute-expected-errors/#description","title":"Description","text":"<p>string</p> <p>muteExpectedErrors</p> <p>muteExpectedErrors() registers a custom error handler using set_error_handler(). The error handler merely inspects <code>$errno</code> and <code>$errfile</code> to determine if the given error was produced deliberately and must be ignored, or should be passed on to the next error handler.</p> <p><code>\\Smarty\\Smarty::unmuteExpectedErrors()</code> removes the current error handler. Please note, that if you\\'ve registered any custom error handlers after the muteExpectedErrors() call, the unmute will not remove Smarty\\'s muting error handler, but the one registered last.</p>"},{"location":"programmers/api-functions/api-register-cacheresource/","title":"Api register cacheresource","text":"<p>registerCacheResource()</p> <p>dynamically register CacheResources</p>"},{"location":"programmers/api-functions/api-register-cacheresource/#description","title":"Description","text":"<p>void</p> <p>registerCacheResource</p> <p>string</p> <p>name</p> <p>Smarty_CacheResource</p> <p>resource_handler</p> <p>Use this to dynamically register a CacheResource plugin with Smarty. Pass in the <code>name</code> of the CacheResource and the object extending Smarty_CacheResource. See Custom Cache Implementation for more information on how to create custom CacheResources.</p> <p>Note</p> <p>In Smarty2 this used to be a callback function called <code>$cache_handler_func</code>. Smarty3 replaced this callback by the <code>Smarty_CacheResource</code> module.</p> <pre><code>&lt;?php\n$smarty-&gt;registerCacheResource('mysql', new My_CacheResource_Mysql());\n?&gt;\n</code></pre> <p>See also <code>unregisterCacheResource()</code> and the Custom CacheResource Implementation section.</p>"},{"location":"programmers/api-functions/api-register-class/","title":"Api register class","text":"<p>registerClass()</p> <p>register a class for use in the templates</p>"},{"location":"programmers/api-functions/api-register-class/#description","title":"Description","text":"<p>void</p> <p>registerClass</p> <p>string</p> <p>class_name</p> <p>string</p> <p>class_impl</p> <p>Smarty allows you to access static classes from templates as long as the Security Policy does not tell it otherwise. If security is enabled, classes registered with <code>registerClass()</code> are accessible to templates.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n\nclass Bar {\n  $property = \"hello world\";\n}\n\n$smarty = new Smarty();\n$smarty-&gt;registerClass(\"Foo\", \"Bar\");\n\n\n\n\n{* Smarty will access this class as long as it's not prohibited by security *}\n{Bar::$property}\n{* Foo translates to the real class Bar *}\n{Foo::$property}\n\n\n\n\n&lt;?php\nuse Smarty\\Smarty;\n\nnamespace my\\php\\application {\n  class Bar {\n    $property = \"hello world\";\n  }\n}\n\n$smarty = new Smarty();\n$smarty-&gt;registerClass(\"Foo\", \"\\my\\php\\application\\Bar\");\n\n\n\n\n{* Foo translates to the real class \\my\\php\\application\\Bar *}\n{Foo::$property}\n</code></pre> <p>See also <code>registerObject()</code>, and Security.</p>"},{"location":"programmers/api-functions/api-register-default-plugin-handler/","title":"Api register default plugin handler","text":"<p>registerDefaultPluginHandler()</p> <p>register a function which gets called on undefined tags</p>"},{"location":"programmers/api-functions/api-register-default-plugin-handler/#description","title":"Description","text":"<p>void</p> <p>registerDefaultPluginHandler</p> <p>mixed</p> <p>callback</p> <p>Register a default plugin handler which gets called if the compiler can not find a definition for a tag otherwise. It uses the following parameters:</p> <p>If during compilation Smarty encounters tag which is not defined internal, registered or located in the plugins folder it tries to resolve it by calling the registered default plugin handler. The handler may be called several times for same undefined tag looping over valid plugin types.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n$smarty-&gt;registerDefaultPluginHandler('my_plugin_handler');\n\n/**\n * Default Plugin Handler\n *\n * called when Smarty encounters an undefined tag during compilation\n * \n * @param string                     $name      name of the undefined tag\n * @param string                     $type     tag type (e.g. Smarty::PLUGIN_FUNCTION, Smarty::PLUGIN_BLOCK, \n                                               Smarty::PLUGIN_COMPILER, Smarty::PLUGIN_MODIFIER, Smarty::PLUGIN_MODIFIERCOMPILER)\n * @param \\Smarty\\Template\\   $template     template object\n * @param string                     &amp;$callback    returned function name \n * @param string                     &amp;$script      optional returned script filepath if function is external\n * @param bool                       &amp;$cacheable    true by default, set to false if plugin is not cachable (Smarty &gt;= 3.1.8)\n * @return bool                      true if successfull\n */\nfunction my_plugin_handler ($name, $type, $template, &amp;$callback, &amp;$script, &amp;$cacheable)\n{\n    switch ($type) {\n        case Smarty::PLUGIN_FUNCTION:\n            switch ($name) {\n                case 'scriptfunction':\n                    $script = './scripts/script_function_tag.php';\n                    $callback = 'default_script_function_tag';\n                    return true;\n                case 'localfunction':\n                    $callback = 'default_local_function_tag';\n                    return true;\n                default:\n                return false;\n            }\n        case Smarty::PLUGIN_COMPILER:\n            switch ($name) {\n                case 'scriptcompilerfunction':\n                    $script = './scripts/script_compiler_function_tag.php';\n                    $callback = 'default_script_compiler_function_tag';\n                    return true;\n                default:\n                return false;\n            }\n        case Smarty::PLUGIN_BLOCK:\n            switch ($name) {\n                case 'scriptblock':\n                    $script = './scripts/script_block_tag.php';\n                    $callback = 'default_script_block_tag';\n                    return true;\n                default:\n                return false;\n            }\n        default:\n        return false;\n    }\n }\n\n?&gt;\n</code></pre> <p>Note</p> <p>The return callback must be static; a function name or an array of class and method name.</p> <p>Dynamic callbacks like objects methods are not supported.</p>"},{"location":"programmers/api-functions/api-register-filter/","title":"Api register filter","text":"<p>registerFilter()</p> <p>dynamically register filters</p>"},{"location":"programmers/api-functions/api-register-filter/#description","title":"Description","text":"<p>void</p> <p>registerFilter</p> <p>string</p> <p>type</p> <p>mixed</p> <p>callback</p> <p>Use this to dynamically register filters to operate on a templates. It uses the following parameters:</p> <p>NOTE.PARAMETER.FUNCTION</p> <p>A prefilter runs through the template source before it gets compiled. See template prefilters for more information on how to setup a prefiltering function.</p> <p>A postfilter runs through the template code after it was compiled to PHP. See template postfilters for more information on how to setup a postfiltering function.</p> <p>A outputfilter operates on a template\\'s output before it is displayed. See template output filters for more information on how to set up an output filter function.</p> <p>See also <code>unregisterFilter()</code>, <code>loadFilter()</code>, template pre filters template post filters template output filters section.</p>"},{"location":"programmers/api-functions/api-register-object/","title":"Api register object","text":"<p>registerObject()</p> <p>register an object for use in the templates</p>"},{"location":"programmers/api-functions/api-register-object/#description","title":"Description","text":"<p>void</p> <p>registerObject</p> <p>string</p> <p>object_name</p> <p>object</p> <p>object</p> <p>array</p> <p>allowed_methods_properties</p> <p>boolean</p> <p>format</p> <p>array</p> <p>block_methods</p> <p>Note</p> <p>When you register/assign objects to templates, be sure that all properties and methods accessed from the template are for presentation purposes only. It is very easy to inject application logic through objects, and this leads to poor designs that are difficult to manage. See the Best Practices section of the Smarty website.</p> <p>See the objects section for more information.</p> <p>See also <code>getRegisteredObject()</code>, and <code>unregisterObject()</code>.</p>"},{"location":"programmers/api-functions/api-register-plugin/","title":"Api register plugin","text":"<p>registerPlugin()</p> <p>dynamically register plugins</p>"},{"location":"programmers/api-functions/api-register-plugin/#description","title":"Description","text":"<p>void</p> <p>registerPlugin</p> <p>string</p> <p>type</p> <p>string</p> <p>name</p> <p>mixed</p> <p>callback</p> <p>bool</p> <p>cacheable</p> <p>mixed</p> <p>cache_attrs</p> <p>This method registers functions or methods defined in your script as plugin. It uses the following parameters:</p> <ul> <li><code>cacheable</code> can be omitted in most cases. See     controlling cacheability of plugins output on     how to use this properly.</li> </ul> <pre><code>&lt;?php\n$smarty-&gt;registerPlugin(\"function\",\"date_now\", \"print_current_date\");\n\nfunction print_current_date($params, $smarty)\n{\n  if(empty($params[\"format\"])) {\n    $format = \"%b %e, %Y\";\n  } else {\n    $format = $params[\"format\"];\n  }\n  return strftime($format,time());\n}\n?&gt;\n</code></pre> <p>And in the template</p> <pre><code>{date_now}\n\n{* or to format differently *}\n{date_now format=\"%Y/%m/%d\"}\n\n\n&lt;?php\n// function declaration\nfunction do_translation ($params, $content, $smarty, &amp;$repeat, $template)\n{\n  if (isset($content)) {\n    $lang = $params[\"lang\"];\n    // do some translation with $content\n    return $translation;\n  }\n}\n\n// register with smarty\n$smarty-&gt;registerPlugin(\"block\",\"translate\", \"do_translation\");\n?&gt;\n</code></pre> <p>Where the template is:</p> <pre><code>{translate lang=\"br\"}Hello, world!{/translate}\n\n\n\n\n&lt;?php\n\n// let's map PHP's stripslashes function to a Smarty modifier.\n$smarty-&gt;registerPlugin(\"modifier\",\"ss\", \"stripslashes\");\n\n?&gt;\n</code></pre> <p>In the template, use <code>ss</code> to strip slashes.</p> <pre><code>&lt;?php\n{$var|ss}\n?&gt;\n</code></pre> <p>See also <code>unregisterPlugin()</code>, plugin functions, plugin block functions, plugin compiler functions, and the creating plugin modifiers section.</p>"},{"location":"programmers/api-functions/api-register-resource/","title":"Api register resource","text":"<p>registerResource()</p> <p>dynamically register resources</p>"},{"location":"programmers/api-functions/api-register-resource/#description","title":"Description","text":"<p>void</p> <p>registerResource</p> <p>string</p> <p>name</p> <p>Smarty_resource</p> <p>resource_handler</p> <p>Use this to dynamically register a Resource plugin with Smarty. Pass in the <code>name</code> of the Resource and the object extending Smarty_Resource. See template resources for more information on how to setup a function for fetching templates.</p> <p>Note</p> <p>A resource name must be at least two characters in length. One character resource names will be ignored and used as part of the file path, such as <code>$smarty-&gt;display('c:/path/to/index.tpl');</code></p> <p>Note</p> <p>Prior to Smarty 3.1 <code>registerResource()</code> accepted an array of callback functions. While this is still possible for backward compatibility reasons, it is strongly discouraged as callback functions have been deprecated as of Smarty 3.1.</p> <pre><code>&lt;?php\n$smarty-&gt;registerResource('mysql', new My_Resource_Mysql());\n?&gt;\n</code></pre> <p>See also <code>unregisterResource()</code> and the template resources section.</p>"},{"location":"programmers/api-functions/api-set-plugins-dir/","title":"Api set plugins dir","text":"<p>setPluginsDir()</p> <p>set the directories where plugins are stored</p>"},{"location":"programmers/api-functions/api-set-plugins-dir/#description","title":"Description","text":"<p>Smarty</p> <p>setPluginsDir</p> <p>string|array</p> <p>plugins_dir</p> <pre><code>&lt;?php\n\n// set a single directory where the plugins are stored\n$smarty-&gt;setPluginsDir('./plugins');\n\n// view the plugins dir chain\nvar_dump($smarty-&gt;getPluginsDir());\n\n// set multiple director\u00edes where plugins are stored\n$smarty-&gt;setPluginsDir(array(\n    './plugins',\n    './plugins_2',\n));\n\n// view the plugins dir chain\nvar_dump($smarty-&gt;getPluginsDir());\n\n// chaining of method calls\n$smarty-&gt;setTemplateDir('./templates')\n       -&gt;setPluginsDir('./plugins')\n       -&gt;setCompileDir('./templates_c')\n       -&gt;setCacheDir('./cache');\n\n?&gt;\n</code></pre> <p>See also <code>getPluginsDir()</code>, <code>addPluginsDir()</code> and <code>$plugins_dir</code>.</p>"},{"location":"programmers/api-functions/api-test-install/","title":"Api test install","text":"<p>testInstall()</p> <p>checks Smarty installation</p>"},{"location":"programmers/api-functions/api-test-install/#description","title":"Description","text":"<p>void</p> <p>testInstall</p> <p>This function verifies that all required working folders of the Smarty installation can be accessed. It does output a corresponding protocol.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty  = new Smarty();\n$smarty-&gt;testInstall();\n?&gt;\n</code></pre>"},{"location":"programmers/api-functions/api-unregister-cacheresource/","title":"Api unregister cacheresource","text":"<p>unregisterCacheResource()</p> <p>dynamically unregister a CacheResource plugin</p>"},{"location":"programmers/api-functions/api-unregister-cacheresource/#description","title":"Description","text":"<p>void</p> <p>unregisterCacheResource</p> <p>string</p> <p>name</p> <p>Pass in the <code>name</code> of the CacheResource.</p> <pre><code>&lt;?php\n\n$smarty-&gt;unregisterCacheResource('mysql');\n\n?&gt;\n</code></pre> <p>See also <code>registerCacheResource()</code> and the Custom CacheResource Implementation section.</p>"},{"location":"programmers/api-functions/api-unregister-filter/","title":"Api unregister filter","text":"<p>unregisterFilter()</p> <p>dynamically unregister a filter</p>"},{"location":"programmers/api-functions/api-unregister-filter/#description","title":"Description","text":"<p>void</p> <p>unregisterFilter</p> <p>string</p> <p>type</p> <p>string|array</p> <p>callback</p> <p>Use this to dynamically unregister filters. It uses the following parameters:</p> <p>See also <code>registerFilter()</code>.</p>"},{"location":"programmers/api-functions/api-unregister-object/","title":"Api unregister object","text":"<p>unregisterObject()</p> <p>dynamically unregister an object</p>"},{"location":"programmers/api-functions/api-unregister-object/#description","title":"Description","text":"<p>void</p> <p>unregisterObject</p> <p>string</p> <p>object_name</p> <p>See also <code>registerObject()</code> and objects section</p>"},{"location":"programmers/api-functions/api-unregister-plugin/","title":"Api unregister plugin","text":"<p>unregisterPlugin</p> <p>dynamically unregister plugins</p>"},{"location":"programmers/api-functions/api-unregister-plugin/#description","title":"Description","text":"<p>void</p> <p>unregisterPlugin</p> <p>string</p> <p>type</p> <p>string</p> <p>name</p> <p>This method unregisters plugins which previously have been registered by registerPlugin(), It uses the following parameters:</p> <pre><code>&lt;?php\n\n// we don't want template designers to have access to function plugin \"date_now\" \n$smarty-&gt;unregisterPlugin(\"function\",\"date_now\");\n\n?&gt;\n</code></pre> <p>See also <code>registerPlugin()</code>.</p>"},{"location":"programmers/api-functions/api-unregister-resource/","title":"Api unregister resource","text":"<p>unregisterResource()</p> <p>dynamically unregister a resource plugin</p>"},{"location":"programmers/api-functions/api-unregister-resource/#description","title":"Description","text":"<p>void</p> <p>unregisterResource</p> <p>string</p> <p>name</p> <p>Pass in the <code>name</code> of the resource.</p> <pre><code>&lt;?php\n\n$smarty-&gt;unregisterResource('db');\n\n?&gt;\n</code></pre> <p>See also <code>registerResource()</code> and template resources</p>"},{"location":"programmers/api-variables/variable-auto-literal/","title":"\\$auto_literal {#variable.auto.literal}","text":"<p>The Smarty delimiter tags { and } will be ignored so long as they are surrounded by white space. This behavior can be disabled by setting auto_literal to false.</p> <p>::: {.informalexample}</p> <pre><code>&lt;?php\n$smarty-&gt;auto_literal = false;\n?&gt;\n</code></pre> <p>:::</p> <p>See also Escaping Smarty parsing,</p>"},{"location":"programmers/api-variables/variable-cache-dir/","title":"\\$cache_dir {#variable.cache.dir}","text":"<p>This is the name of the directory where template caches are stored. By default this is <code>./cache</code>, meaning that Smarty will look for the <code>cache/</code> directory in the same directory as the executing php script. This directory must be writeable by the web server, see install for more info.</p> <p>You can also use your own custom cache implementation to control cache files, which will ignore this setting. See also <code>$use_sub_dirs</code>.</p> <p>Note</p> <p>This setting must be either a relative or absolute path. include_path is not used for writing files.</p> <p>Note</p> <p>It is not recommended to put this directory under the web server document root.</p> <p>Note</p> <p>As of Smarty 3.1 the attribute \\$cache_dir is no longer accessible directly. Use <code>getCacheDir()</code> and <code>setCacheDir()</code> instead.</p> <p>See also <code>getCacheDir()</code>, <code>setCacheDir()</code>, <code>$caching</code>, <code>$use_sub_dirs</code>, <code>$cache_lifetime</code>, <code>$cache_modified_check</code> and the caching section.</p>"},{"location":"programmers/api-variables/variable-cache-id/","title":"\\$cache_id {#variable.cache.id}","text":"<p>Persistent cache_id identifier. As an alternative to passing the same <code>$cache_id</code> to each and every function call, you can set this <code>$cache_id</code> and it will be used implicitly thereafter.</p> <p>With a <code>$cache_id</code> you can have multiple cache files for a single call to <code>display()</code> or <code>fetch()</code> depending for example from different content of the same template. See the caching section for more information.</p>"},{"location":"programmers/api-variables/variable-cache-lifetime/","title":"\\$cache_lifetime {#variable.cache.lifetime}","text":"<p>This is the length of time in seconds that a template cache is valid. Once this time has expired, the cache will be regenerated.</p> <ul> <li> <p><code>$caching</code> must be turned on (either     \\Smarty\\Smarty::CACHING_LIFETIME_CURRENT or     \\Smarty\\Smarty::CACHING_LIFETIME_SAVED) for <code>$cache_lifetime</code> to have any     purpose.</p> </li> <li> <p>A <code>$cache_lifetime</code> value of -1 will force the cache to never     expire.</p> </li> <li> <p>A value of 0 will cause the cache to always regenerate (good for     testing only, to disable caching a more efficient method is to set     <code>$caching</code> = \\Smarty\\Smarty::CACHING_OFF).</p> </li> <li> <p>If you want to give certain templates their own cache lifetime, you     could do this by setting <code>$caching</code> =     \\Smarty\\Smarty::CACHING_LIFETIME_SAVED, then set <code>$cache_lifetime</code> to a     unique value just before calling <code>display()</code> or     <code>fetch()</code>.</p> </li> </ul> <p>If <code>$force_compile</code> is enabled, the cache files will be regenerated every time, effectively disabling caching. You can clear all the cache files with the <code>clear_all_cache()</code> function, or individual cache files (or groups) with the <code>clear_cache()</code> function.</p>"},{"location":"programmers/api-variables/variable-cache-locking/","title":"\\$cache_locking {#variable.cache.locking}","text":"<p>Cache locking avoids concurrent cache generation. This means resource intensive pages can be generated only once, even if they\\'ve been requested multiple times in the same moment.</p> <p>Cache locking is disabled by default. To enable it set <code>$cache_locking</code> to TRUE.</p> <p>See also <code>$locking_timeout</code></p>"},{"location":"programmers/api-variables/variable-cache-modified-check/","title":"\\$cache_modified_check {#variable.cache.modified.check}","text":"<p>If set to TRUE, Smarty will respect the If-Modified-Since header sent from the client. If the cached file timestamp has not changed since the last visit, then a <code>'304: Not Modified'</code> header will be sent instead of the content.</p> <p>See also <code>$caching</code>, <code>$cache_lifetime</code>, and the caching section.</p>"},{"location":"programmers/api-variables/variable-caching-type/","title":"\\$caching_type {#variable.caching.type}","text":"<p>This property specifies the name of the caching handler to use. It defaults to <code>file</code>, enabling the internal filesystem based cache handler.</p> <p>See Custom Cache Implementation for pointers on setting up your own cache handler.</p>"},{"location":"programmers/api-variables/variable-caching/","title":"\\$caching {#variable.caching}","text":"<p>This tells Smarty whether or not to cache the output of the templates to the <code>$cache_dir</code>. By default this is set to the constant \\Smarty\\Smarty::CACHING_OFF. If your templates consistently generate the same content, it is advisable to turn on <code>$caching</code>, as this may result in significant performance gains.</p> <p>You can also have multiple caches for the same template.</p> <ul> <li> <p>A constant value of \\Smarty\\Smarty::CACHING_LIFETIME_CURRENT or     \\Smarty\\Smarty ::CACHING_LIFETIME_SAVED enables caching.</p> </li> <li> <p>A value of \\Smarty\\Smarty::CACHING_LIFETIME_CURRENT tells Smarty to use     the current <code>$cache_lifetime</code> variable     to determine if the cache has expired.</p> </li> <li> <p>A value of \\Smarty\\Smarty::CACHING_LIFETIME_SAVED tells Smarty to use the     <code>$cache_lifetime</code> value at the time the     cache was generated. This way you can set the     <code>$cache_lifetime</code> just before     fetching the template to have granular control over     when that particular cache expires. See also     <code>isCached()</code>.</p> </li> <li> <p>If <code>$compile_check</code> is enabled, the     cached content will be regenerated if any of the templates or config     files that are part of this cache are changed.</p> </li> <li> <p>If <code>$force_compile</code> is enabled, the     cached content will always be regenerated.</p> </li> </ul> <p>See also <code>$cache_dir</code>, <code>$cache_lifetime</code>, <code>$cache_modified_check</code>, <code>is_cached()</code> and the caching section.</p>"},{"location":"programmers/api-variables/variable-compile-dir/","title":"\\$compile_dir {#variable.compile.dir}","text":"<p>This is the name of the directory where compiled templates are located. By default this is <code>./templates_c</code>, meaning that Smarty will look for the <code>templates_c/</code> directory in the same directory as the executing php script. This directory must be writeable by the web server, see install for more info.</p> <p>Note</p> <p>This setting must be either a relative or absolute path. include_path is not used for writing files.</p> <p>Note</p> <p>It is not recommended to put this directory under the web server document root.</p> <p>Note</p> <p>As of Smarty 3.1 the attribute \\$compile_dir is no longer accessible directly. Use <code>getCompileDir()</code> and <code>setCompileDir()</code> instead.</p> <p>See also <code>getCompileDir()</code>, <code>setCompileDir()</code>, <code>$compile_id</code> and <code>$use_sub_dirs</code>.</p>"},{"location":"programmers/api-variables/variable-compile-id/","title":"\\$compile_id {#variable.compile.id}","text":"<p>Persistent compile identifier. As an alternative to passing the same <code>$compile_id</code> to each and every function call, you can set this <code>$compile_id</code> and it will be used implicitly thereafter.</p> <p>If you use the same template with different pre- and/or post-filters you must use a unique <code>$compile_id</code> to keep the compiled template files separated.</p> <p>For example a prefilter that localizes your templates (that is: translates language dependent parts) at compile time, then you could use the current language as <code>$compile_id</code> and you will get a set of compiled templates for each language you use.</p> <pre><code>&lt;?php\n$smarty-&gt;compile_id = 'en';\n?&gt;\n</code></pre> <p>Another application would be to use the same compile directory across multiple domains / multiple virtual hosts.</p> <pre><code>&lt;?php\n\n$smarty-&gt;compile_id = $_SERVER['SERVER_NAME'];\n$smarty-&gt;compile_dir = '/path/to/shared_compile_dir';\n\n?&gt;\n</code></pre> <p>Note</p> <p>In Smarty 3 a <code>$compile_id</code> is no longer required to keep templates with same name in different <code>$template_dir</code> folders separated. The <code>$template_dir</code> file path is encoded in the file name of compiled and cached template files.</p>"},{"location":"programmers/api-variables/variable-compile-locking/","title":"\\$compile_locking {#variable.compile.locking}","text":"<p>Compile locking avoids concurrent compilation of the same template.</p> <p>Compile locking is enabled by default. To disable it set <code>$compile_locking</code> to FALSE.</p>"},{"location":"programmers/api-variables/variable-compiler-class/","title":"\\$compiler_class {#variable.compiler.class}","text":"<p>Specifies the name of the compiler class that Smarty will use to compile the templates. The default is \\'Smarty_Compiler\\'. For advanced users only.</p>"},{"location":"programmers/api-variables/variable-config-booleanize/","title":"\\$config_booleanize {#variable.config.booleanize}","text":"<p>If set to TRUE, config files values of <code>on/true/yes</code> and <code>off/false/no</code> get converted to boolean values automatically. This way you can use the values in the template like so: <code>{if #foobar#}...{/if}</code>. If foobar was <code>on</code>, <code>true</code> or <code>yes</code>, the <code>{if}</code> statement will execute. Defaults to TRUE.</p>"},{"location":"programmers/api-variables/variable-config-dir/","title":"\\$config_dir {#variable.config.dir}","text":"<p>This is the directory used to store config files used in the templates. Default is <code>./configs</code>, meaning that Smarty will look for the <code>configs/</code> directory in the same directory as the executing php script.</p> <p>Note</p> <p>It is not recommended to put this directory under the web server document root.</p> <p>Note</p> <p>As of Smarty 3.1 the attribute \\$config_dir is no longer accessible directly. Use <code>getConfigDir()</code>, <code>setConfigDir()</code> and <code>addConfigDir()</code> instead.</p> <p>See also <code>getConfigDir()</code>, <code>setConfigDir()</code> and <code>addConfigDir()</code>.</p>"},{"location":"programmers/api-variables/variable-config-overwrite/","title":"\\$config_overwrite {#variable.config.overwrite}","text":"<p>If set to TRUE, the default then variables read in from config files will overwrite each other. Otherwise, the variables will be pushed onto an array. This is helpful if you want to store arrays of data in config files, just list each element multiple times.</p> <p>This examples uses <code>{cycle}</code> to output a table with alternating red/green/blue row colors with <code>$config_overwrite</code> = FALSE.</p> <p>The config file.</p> <pre><code># row colors\nrowColors = #FF0000\nrowColors = #00FF00\nrowColors = #0000FF\n</code></pre> <p>The template with a <code>{section}</code> loop.</p> <pre><code>&lt;table&gt;\n  {section name=r loop=$rows}\n  &lt;tr bgcolor=\"{cycle values=#rowColors#}\"&gt;\n    &lt;td&gt; ....etc.... &lt;/td&gt;\n  &lt;/tr&gt;\n  {/section}\n&lt;/table&gt;\n</code></pre> <p>See also <code>{config_load}</code>, <code>getConfigVars()</code>, <code>clearConfig()</code>, <code>configLoad()</code> and the config files section.</p>"},{"location":"programmers/api-variables/variable-config-read-hidden/","title":"\\$config_read_hidden {#variable.config.read.hidden}","text":"<p>If set to TRUE, hidden sections ie section names beginning with a period(.) in config files can be read from templates. Typically you would leave this FALSE, that way you can store sensitive data in the config files such as database parameters and not worry about the template loading them. FALSE by default.</p>"},{"location":"programmers/api-variables/variable-debug-template/","title":"\\$debug_tpl {#variable.debug_template}","text":"<p>This is the name of the template file used for the debugging console. By default, it is named <code>debug.tpl</code> and is located in <code>src/debug.tpl</code>.</p> <p>See also <code>$debugging</code> and the debugging console section.</p>"},{"location":"programmers/api-variables/variable-debugging-ctrl/","title":"\\$debugging_ctrl {#variable.debugging.ctrl}","text":"<p>This allows alternate ways to enable debugging. <code>NONE</code> means no alternate methods are allowed. <code>URL</code> means when the keyword <code>SMARTY_DEBUG</code> is found in the <code>QUERY_STRING</code>, debugging is enabled for that invocation of the script. If <code>$debugging</code> is TRUE, this value is ignored.</p> <pre><code>&lt;?php\n// shows debug console only on localhost ie\n// http://localhost/script.php?foo=bar&amp;SMARTY_DEBUG\n$smarty-&gt;debugging = false; // the default\n$smarty-&gt;debugging_ctrl = ($_SERVER['SERVER_NAME'] == 'localhost') ? 'URL' : 'NONE';\n?&gt;\n</code></pre> <p>See also debugging console section, <code>$debugging</code> and <code>$smarty_debug_id</code>.</p>"},{"location":"programmers/api-variables/variable-debugging/","title":"\\$debugging {#variable.debugging}","text":"<p>This enables the debugging console. The console is a javascript popup window that informs you of the included templates, variables assigned from php and config file variables for the current script. It does not show variables assigned within a template with the <code>{assign}</code> function.</p> <p>The console can also be enabled from the url with <code>$debugging_ctrl</code>.</p> <p>See also <code>{debug}</code>, <code>$debug_tpl</code>, and <code>$debugging_ctrl</code>.</p>"},{"location":"programmers/api-variables/variable-default-config-handler-func/","title":"\\$default_config_handler_func {#variable.default.config.handler.func}","text":"<p>This function is called when a config file cannot be obtained from its resource.</p> <p>Note</p> <p>The default handler is currently only invoked for file resources. It is not triggered when the resource itself cannot be found, in which case a \\Smarty\\Exception is thrown.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n$smarty-&gt;default_config_handler_func = 'my_default_config_handler_func';\n\n/**\n * Default Config Handler\n *\n * called when Smarty's file: resource is unable to load a requested file\n * \n * @param string   $type     resource type (e.g. \"file\", \"string\", \"eval\", \"resource\")\n * @param string   $name     resource name (e.g. \"foo/bar.tpl\")\n * @param string  &amp;$content  config's content\n * @param integer &amp;$modified config's modification time\n * @param Smarty   $smarty   Smarty instance\n * @return string|boolean   path to file or boolean true if $content and $modified \n *                          have been filled, boolean false if no default config \n *                          could be loaded\n */\nfunction my_default_config_handler_func($type, $name, &amp;$content, &amp;$modified, Smarty $smarty) {\n    if (false) {\n        // return corrected filepath\n        return \"/tmp/some/foobar.tpl\";\n    } elseif (false) {\n        // return a config directly\n        $content = 'someVar = \"the config source\"';\n        $modified = time();\n        return true;\n    } else {\n        // tell smarty that we failed\n        return false;\n    }\n}\n\n?&gt;\n</code></pre>"},{"location":"programmers/api-variables/variable-default-config-type/","title":"\\$default_config_type {#variable.default.config.type}","text":"<p>This tells smarty what resource type to use for config files. The default value is <code>file</code>, meaning that <code>$smarty-&gt;configLoad('test.conf')</code> and <code>$smarty-&gt;configLoad('file:test.conf')</code> are identical in meaning. See the resource chapter for more details.</p>"},{"location":"programmers/api-variables/variable-default-modifiers/","title":"\\$default_modifiers {#variable.default.modifiers}","text":"<p>This is an array of modifiers to implicitly apply to every variable in a template. For example, to HTML-escape every variable by default, use <code>array('escape:\"htmlall\"')</code>. To make a variable exempt from default modifiers, add the \\'nofilter\\' attribute to the output tag such as <code>{$var nofilter}</code>.</p>"},{"location":"programmers/api-variables/variable-default-resource-type/","title":"\\$default_resource_type {#variable.default.resource.type}","text":"<p>This tells smarty what resource type to use implicitly. The default value is <code>file</code>, meaning that <code>$smarty-&gt;display('index.tpl')</code> and <code>$smarty-&gt;display('file:index.tpl')</code> are identical in meaning. See the resource chapter for more details.</p>"},{"location":"programmers/api-variables/variable-default-template-handler-func/","title":"\\$default_template_handler_func {#variable.default.template.handler.func}","text":"<p>This function is called when a template cannot be obtained from its resource.</p> <p>Note</p> <p>The default handler is currently only invoked for file resources. It is not triggered when the resource itself cannot be found, in which case a \\Smarty\\Exception is thrown.</p> <pre><code>&lt;?php\nuse Smarty\\Smarty;\n$smarty = new Smarty();\n$smarty-&gt;default_template_handler_func = 'my_default_template_handler_func';\n\n/**\n * Default Template Handler\n *\n * called when Smarty's file: resource is unable to load a requested file\n * \n * @param string   $type     resource type (e.g. \"file\", \"string\", \"eval\", \"resource\")\n * @param string   $name     resource name (e.g. \"foo/bar.tpl\")\n * @param string  &amp;$content  template's content\n * @param integer &amp;$modified template's modification time\n * @param Smarty   $smarty   Smarty instance\n * @return string|boolean   path to file or boolean true if $content and $modified \n *                          have been filled, boolean false if no default template \n *                          could be loaded\n */\nfunction my_default_template_handler_func($type, $name, &amp;$content, &amp;$modified, Smarty $smarty) {\n    if (false) {\n        // return corrected filepath\n        return \"/tmp/some/foobar.tpl\";\n    } elseif (false) {\n        // return a template directly\n        $content = \"the template source\";\n        $modified = time();\n        return true;\n    } else {\n        // tell smarty that we failed\n        return false;\n    }\n}\n\n?&gt;\n</code></pre>"},{"location":"programmers/api-variables/variable-error-reporting/","title":"\\$error_reporting {#variable.error.reporting}","text":"<p>When this value is set to a non-null-value it\\'s value is used as php\\'s <code>error_reporting</code> level inside of <code>display()</code> and <code>fetch()</code>.</p> <p>Smarty 3.1.2 introduced the <code>muteExpectedErrors()</code> function. Calling <code>\\Smarty\\Smarty::muteExpectedErrors();</code> after setting up custom error handling will ensure that warnings and notices (deliberately) produced by Smarty will not be passed to other custom error handlers. If your error logs are filling up with warnings regarding <code>filemtime()</code> or <code>unlink()</code> calls, please enable Smarty\\'s error muting.</p> <p>See also debugging and troubleshooting.</p>"},{"location":"programmers/api-variables/variable-escape-html/","title":"\\$escape_html {#variable.escape.html}","text":"<p>Setting <code>$escape_html</code> to TRUE will escape all template variable output by wrapping it in <code>htmlspecialchars({$output}, ENT_QUOTES, $char_set);</code>, which is the same as <code>{$variable|escape:\"html\"}</code>.</p> <p>Template designers can choose to selectively disable this feature by adding the <code>nofilter</code> flag: <code>{$variable nofilter}</code>.</p> <p>Modifiers and Filters are run in the following order: modifier, default_modifier, \\$escape_html, registered variable filters, autoloaded variable filters, template instance\\'s variable filters. Everything except the individual modifier can be disabled with the <code>nofilter</code> flag.</p> <p>Note</p> <p>This is a compile time option. If you change the setting you must make sure that the templates get recompiled.</p>"},{"location":"programmers/api-variables/variable-force-cache/","title":"\\$force_cache {#variable.force.cache}","text":"<p>This forces Smarty to (re)cache templates on every invocation. It does not override the <code>$caching</code> level, but merely pretends the template has never been cached before.</p>"},{"location":"programmers/api-variables/variable-force-compile/","title":"\\$force_compile {#variable.force.compile}","text":"<p>This forces Smarty to (re)compile templates on every invocation. This setting overrides <code>$compile_check</code>. By default this is FALSE. This is handy for development and debugging. It should never be used in a production environment. If <code>$caching</code> is enabled, the cache file(s) will be regenerated every time.</p>"},{"location":"programmers/api-variables/variable-locking-timeout/","title":"\\$locking_timeout {#variable.locking.timeout}","text":"<p>This is maximum time in seconds a cache lock is valid to avoid dead locks. The default value is 10 seconds.</p> <p>See also <code>$cache_locking</code></p>"},{"location":"programmers/api-variables/variable-merge-compiled-includes/","title":"\\$merge_compiled_includes {#variable.merge.compiled.includes}","text":"<p>By setting <code>$merge_compiled_includes</code> to TRUE Smarty will merge the compiled template code of subtemplates into the compiled code of the main template. This increases rendering speed of templates using a many different sub-templates.</p> <p>Individual sub-templates can be merged by setting the <code>inline</code> option flag within the <code>{include}</code> tag. <code>$merge_compiled_includes</code> does not have to be enabled for the <code>inline</code> merge.</p> <p>::: {.informalexample}</p> <pre><code>&lt;?php\n$smarty-&gt;merge_compiled_includes = true;\n?&gt;\n</code></pre> <p>:::</p> <p>Note</p> <p>This is a compile time option. If you change the setting you must make sure that the templates get recompiled.</p> <p>See also <code>{include}</code> tag</p>"},{"location":"programmers/api-variables/variable-smarty-debug-id/","title":"\\$smarty_debug_id {#variable.smarty.debug.id}","text":"<p>The value of <code>$smarty_debug_id</code> defines the URL keyword to enable debugging at browser level. The default value is <code>SMARTY_DEBUG</code>.</p> <p>See also debugging console section, <code>$debugging</code> and <code>$debugging_ctrl</code>.</p>"},{"location":"programmers/api-variables/variable-template-dir/","title":"\\$template_dir {#variable.template.dir}","text":"<p>This is the name of the default template directory. If you do not supply a resource type when including files, they will be found here. By default this is <code>./templates</code>, meaning that Smarty will look for the <code>templates/</code> directory in the same directory as the executing php script. \\$template_dir can also be an array of directory paths: Smarty will traverse the directories and stop on the first matching template found.</p> <p>Note</p> <p>It is not recommended to put this directory under the web server document root.</p> <p>Note As of Smarty 3.1 the attribute \\$template_dir is no longer accessible directly. Use <code>getTemplateDir()</code>, <code>setTemplateDir()</code> and <code>addTemplateDir()</code> instead.</p> <p>See also <code>Template Resources</code>, <code>getTemplateDir()</code>, <code>setTemplateDir()</code> and <code>addTemplateDir()</code>.</p>"},{"location":"programmers/api-variables/variable-use-sub-dirs/","title":"\\$use_sub_dirs {#variable.use.sub.dirs}","text":"<p>Smarty will create subdirectories under the compiled templates and cache directories if <code>$use_sub_dirs</code> is set to TRUE, default is FALSE. In an environment where there are potentially tens of thousands of files created, this may help the filesystem speed. On the other hand, some environments do not allow PHP processes to create directories, so this must be disabled which is the default.</p> <p>Sub directories are more efficient, so use them if you can. Theoretically you get much better performance on a filesystem with 10 directories each having 100 files, than with 1 directory having 1000 files. This was certainly the case with Solaris 7 (UFS)... with newer filesystems such as ext3 and especially reiserfs, the difference is almost nothing.</p> <p>Note</p> <ul> <li> <p><code>$use_sub_dirs=true</code> doesn\\'t work with     safe_mode=On, that\\'s why     it\\'s switchable and why it\\'s off by default.</p> </li> <li> <p><code>$use_sub_dirs=true</code> on Windows can cause problems.</p> </li> <li> <p>Safe_mode is being deprecated in PHP6.</p> </li> </ul> <p>See also <code>$compile_id</code>, <code>$cache_dir</code>, and <code>$compile_dir</code>.</p>"}]}